{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":["file:///root/webmakerr/storefront/node_modules/algoliasearch-helper/src/version.js"],"sourcesContent":["'use strict';\n\nmodule.exports = '3.24.1';\n"],"names":[],"mappings":"AAAA;AAEA,OAAO,OAAO,GAAG","ignoreList":[0]}},
    {"offset": {"line": 8, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 13, "column": 0}, "map": {"version":3,"sources":["file:///root/webmakerr/storefront/node_modules/algoliasearch-helper/src/functions/inherits.js"],"sourcesContent":["'use strict';\n\nfunction inherits(ctor, superCtor) {\n  ctor.prototype = Object.create(superCtor.prototype, {\n    constructor: {\n      value: ctor,\n      enumerable: false,\n      writable: true,\n      configurable: true,\n    },\n  });\n}\n\nmodule.exports = inherits;\n"],"names":[],"mappings":"AAAA;AAEA,SAAS,SAAS,IAAI,EAAE,SAAS;IAC/B,KAAK,SAAS,GAAG,OAAO,MAAM,CAAC,UAAU,SAAS,EAAE;QAClD,aAAa;YACX,OAAO;YACP,YAAY;YACZ,UAAU;YACV,cAAc;QAChB;IACF;AACF;AAEA,OAAO,OAAO,GAAG","ignoreList":[0]}},
    {"offset": {"line": 25, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 30, "column": 0}, "map": {"version":3,"sources":["file:///root/webmakerr/storefront/node_modules/algoliasearch-helper/src/DerivedHelper/index.js"],"sourcesContent":["'use strict';\n\nvar EventEmitter = require('@algolia/events');\n\nvar inherits = require('../functions/inherits');\n\n/**\n * A DerivedHelper is a way to create sub requests to\n * Algolia from a main helper.\n * @class\n * @classdesc The DerivedHelper provides an event based interface for search callbacks:\n *  - search: when a search is triggered using the `search()` method.\n *  - result: when the response is retrieved from Algolia and is processed.\n *    This event contains a {@link SearchResults} object and the\n *    {@link SearchParameters} corresponding to this answer.\n * @param {AlgoliaSearchHelper} mainHelper the main helper\n * @param {function} fn the function to create the derived state for search\n * @param {function} recommendFn the function to create the derived state for recommendations\n */\nfunction DerivedHelper(mainHelper, fn, recommendFn) {\n  this.main = mainHelper;\n  this.fn = fn;\n  this.recommendFn = recommendFn;\n  this.lastResults = null;\n  this.lastRecommendResults = null;\n}\n\ninherits(DerivedHelper, EventEmitter);\n\n/**\n * Detach this helper from the main helper\n * @return {undefined}\n * @throws Error if the derived helper is already detached\n */\nDerivedHelper.prototype.detach = function () {\n  this.removeAllListeners();\n  this.main.detachDerivedHelper(this);\n};\n\nDerivedHelper.prototype.getModifiedState = function (parameters) {\n  return this.fn(parameters);\n};\n\nDerivedHelper.prototype.getModifiedRecommendState = function (parameters) {\n  return this.recommendFn(parameters);\n};\n\nmodule.exports = DerivedHelper;\n"],"names":[],"mappings":"AAAA;AAEA,IAAI;AAEJ,IAAI;AAEJ;;;;;;;;;;;;CAYC,GACD,SAAS,cAAc,UAAU,EAAE,EAAE,EAAE,WAAW;IAChD,IAAI,CAAC,IAAI,GAAG;IACZ,IAAI,CAAC,EAAE,GAAG;IACV,IAAI,CAAC,WAAW,GAAG;IACnB,IAAI,CAAC,WAAW,GAAG;IACnB,IAAI,CAAC,oBAAoB,GAAG;AAC9B;AAEA,SAAS,eAAe;AAExB;;;;CAIC,GACD,cAAc,SAAS,CAAC,MAAM,GAAG;IAC/B,IAAI,CAAC,kBAAkB;IACvB,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,IAAI;AACpC;AAEA,cAAc,SAAS,CAAC,gBAAgB,GAAG,SAAU,UAAU;IAC7D,OAAO,IAAI,CAAC,EAAE,CAAC;AACjB;AAEA,cAAc,SAAS,CAAC,yBAAyB,GAAG,SAAU,UAAU;IACtE,OAAO,IAAI,CAAC,WAAW,CAAC;AAC1B;AAEA,OAAO,OAAO,GAAG","ignoreList":[0]}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 73, "column": 0}, "map": {"version":3,"sources":["file:///root/webmakerr/storefront/node_modules/algoliasearch-helper/src/functions/escapeFacetValue.js"],"sourcesContent":["'use strict';\n\n/**\n * Replaces a leading - with \\-\n * @private\n * @param {any} value the facet value to replace\n * @returns {any} the escaped facet value or the value if it was not a string\n */\nfunction escapeFacetValue(value) {\n  if (typeof value !== 'string') return value;\n\n  return String(value).replace(/^-/, '\\\\-');\n}\n\n/**\n * Replaces a leading \\- with -\n * @private\n * @param {any} value the escaped facet value\n * @returns {any} the unescaped facet value or the value if it was not a string\n */\nfunction unescapeFacetValue(value) {\n  if (typeof value !== 'string') return value;\n\n  return value.replace(/^\\\\-/, '-');\n}\n\nmodule.exports = {\n  escapeFacetValue: escapeFacetValue,\n  unescapeFacetValue: unescapeFacetValue,\n};\n"],"names":[],"mappings":"AAAA;AAEA;;;;;CAKC,GACD,SAAS,iBAAiB,KAAK;IAC7B,IAAI,OAAO,UAAU,UAAU,OAAO;IAEtC,OAAO,OAAO,OAAO,OAAO,CAAC,MAAM;AACrC;AAEA;;;;;CAKC,GACD,SAAS,mBAAmB,KAAK;IAC/B,IAAI,OAAO,UAAU,UAAU,OAAO;IAEtC,OAAO,MAAM,OAAO,CAAC,QAAQ;AAC/B;AAEA,OAAO,OAAO,GAAG;IACf,kBAAkB;IAClB,oBAAoB;AACtB","ignoreList":[0]}},
    {"offset": {"line": 96, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 101, "column": 0}, "map": {"version":3,"sources":["file:///root/webmakerr/storefront/node_modules/algoliasearch-helper/src/functions/merge.js"],"sourcesContent":["'use strict';\n\nfunction clone(value) {\n  if (typeof value === 'object' && value !== null) {\n    return _merge(Array.isArray(value) ? [] : {}, value);\n  }\n  return value;\n}\n\nfunction isObjectOrArrayOrFunction(value) {\n  return (\n    typeof value === 'function' ||\n    Array.isArray(value) ||\n    Object.prototype.toString.call(value) === '[object Object]'\n  );\n}\n\nfunction _merge(target, source) {\n  if (target === source) {\n    return target;\n  }\n\n  // eslint-disable-next-line no-restricted-syntax\n  for (var key in source) {\n    if (\n      !Object.prototype.hasOwnProperty.call(source, key) ||\n      key === '__proto__' ||\n      key === 'constructor'\n    ) {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n\n    var sourceVal = source[key];\n    var targetVal = target[key];\n\n    if (typeof targetVal !== 'undefined' && typeof sourceVal === 'undefined') {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n\n    if (\n      isObjectOrArrayOrFunction(targetVal) &&\n      isObjectOrArrayOrFunction(sourceVal)\n    ) {\n      target[key] = _merge(targetVal, sourceVal);\n    } else {\n      target[key] = clone(sourceVal);\n    }\n  }\n  return target;\n}\n\n/**\n * This method is like Object.assign, but recursively merges own and inherited\n * enumerable keyed properties of source objects into the destination object.\n *\n * NOTE: this behaves like lodash/merge, but:\n * - does mutate functions if they are a source\n * - treats non-plain objects as plain\n * - does not work for circular objects\n * - treats sparse arrays as sparse\n * - does not convert Array-like objects (Arguments, NodeLists, etc.) to arrays\n *\n * @param {Object} target The destination object.\n * @param {...Object} [sources] The source objects.\n * @returns {Object} Returns `object`.\n */\nfunction merge(target) {\n  if (!isObjectOrArrayOrFunction(target)) {\n    target = {};\n  }\n\n  for (var i = 1, l = arguments.length; i < l; i++) {\n    var source = arguments[i];\n\n    if (isObjectOrArrayOrFunction(source)) {\n      _merge(target, source);\n    }\n  }\n  return target;\n}\n\nmodule.exports = merge;\n"],"names":[],"mappings":"AAAA;AAEA,SAAS,MAAM,KAAK;IAClB,IAAI,OAAO,UAAU,YAAY,UAAU,MAAM;QAC/C,OAAO,OAAO,MAAM,OAAO,CAAC,SAAS,EAAE,GAAG,CAAC,GAAG;IAChD;IACA,OAAO;AACT;AAEA,SAAS,0BAA0B,KAAK;IACtC,OACE,OAAO,UAAU,cACjB,MAAM,OAAO,CAAC,UACd,OAAO,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,WAAW;AAE9C;AAEA,SAAS,OAAO,MAAM,EAAE,MAAM;IAC5B,IAAI,WAAW,QAAQ;QACrB,OAAO;IACT;IAEA,gDAAgD;IAChD,IAAK,IAAI,OAAO,OAAQ;QACtB,IACE,CAAC,OAAO,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,QAAQ,QAC9C,QAAQ,eACR,QAAQ,eACR;YAEA;QACF;QAEA,IAAI,YAAY,MAAM,CAAC,IAAI;QAC3B,IAAI,YAAY,MAAM,CAAC,IAAI;QAE3B,IAAI,OAAO,cAAc,eAAe,OAAO,cAAc,aAAa;YAExE;QACF;QAEA,IACE,0BAA0B,cAC1B,0BAA0B,YAC1B;YACA,MAAM,CAAC,IAAI,GAAG,OAAO,WAAW;QAClC,OAAO;YACL,MAAM,CAAC,IAAI,GAAG,MAAM;QACtB;IACF;IACA,OAAO;AACT;AAEA;;;;;;;;;;;;;;CAcC,GACD,SAAS,MAAM,MAAM;IACnB,IAAI,CAAC,0BAA0B,SAAS;QACtC,SAAS,CAAC;IACZ;IAEA,IAAK,IAAI,IAAI,GAAG,IAAI,UAAU,MAAM,EAAE,IAAI,GAAG,IAAK;QAChD,IAAI,SAAS,SAAS,CAAC,EAAE;QAEzB,IAAI,0BAA0B,SAAS;YACrC,OAAO,QAAQ;QACjB;IACF;IACA,OAAO;AACT;AAEA,OAAO,OAAO,GAAG","ignoreList":[0]}},
    {"offset": {"line": 160, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 165, "column": 0}, "map": {"version":3,"sources":["file:///root/webmakerr/storefront/node_modules/algoliasearch-helper/src/functions/objectHasKeys.js"],"sourcesContent":["'use strict';\n\nfunction objectHasKeys(obj) {\n  return obj && Object.keys(obj).length > 0;\n}\n\nmodule.exports = objectHasKeys;\n"],"names":[],"mappings":"AAAA;AAEA,SAAS,cAAc,GAAG;IACxB,OAAO,OAAO,OAAO,IAAI,CAAC,KAAK,MAAM,GAAG;AAC1C;AAEA,OAAO,OAAO,GAAG","ignoreList":[0]}},
    {"offset": {"line": 170, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 175, "column": 0}, "map": {"version":3,"sources":["file:///root/webmakerr/storefront/node_modules/algoliasearch-helper/src/functions/omit.js"],"sourcesContent":["'use strict';\n\n// https://github.com/babel/babel/blob/3aaafae053fa75febb3aa45d45b6f00646e30ba4/packages/babel-helpers/src/helpers.js#L604-L620\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source === null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key;\n  var i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    // eslint-disable-next-line no-continue\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\n\nmodule.exports = _objectWithoutPropertiesLoose;\n"],"names":[],"mappings":"AAAA;AAEA,+HAA+H;AAC/H,SAAS,8BAA8B,MAAM,EAAE,QAAQ;IACrD,IAAI,WAAW,MAAM,OAAO,CAAC;IAC7B,IAAI,SAAS,CAAC;IACd,IAAI,aAAa,OAAO,IAAI,CAAC;IAC7B,IAAI;IACJ,IAAI;IACJ,IAAK,IAAI,GAAG,IAAI,WAAW,MAAM,EAAE,IAAK;QACtC,MAAM,UAAU,CAAC,EAAE;QACnB,uCAAuC;QACvC,IAAI,SAAS,OAAO,CAAC,QAAQ,GAAG;QAChC,MAAM,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI;IAC3B;IACA,OAAO;AACT;AAEA,OAAO,OAAO,GAAG","ignoreList":[0]}},
    {"offset": {"line": 192, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 197, "column": 0}, "map": {"version":3,"sources":["file:///root/webmakerr/storefront/node_modules/algoliasearch-helper/src/RecommendParameters/index.js"],"sourcesContent":["'use strict';\n\n/**\n * RecommendParameters is the data structure that contains all the information\n * usable for getting recommendations from the Algolia API. It doesn't do the\n * search itself, nor does it contains logic about the parameters.\n * It is an immutable object, therefore it has been created in a way that each\n * changes does not change the object itself but returns a copy with the\n * modification.\n * This object should probably not be instantiated outside of the helper. It\n * will be provided when needed.\n * @constructor\n * @classdesc contains all the parameters for recommendations\n * @param {RecommendParametersOptions} opts the options to create the object\n */\nfunction RecommendParameters(opts) {\n  opts = opts || {};\n  this.params = opts.params || [];\n}\n\nRecommendParameters.prototype = {\n  constructor: RecommendParameters,\n\n  addParams: function (params) {\n    var newParams = this.params.slice();\n\n    newParams.push(params);\n\n    return new RecommendParameters({ params: newParams });\n  },\n\n  removeParams: function (id) {\n    return new RecommendParameters({\n      params: this.params.filter(function (param) {\n        return param.$$id !== id;\n      }),\n    });\n  },\n\n  addFrequentlyBoughtTogether: function (params) {\n    return this.addParams(\n      Object.assign({}, params, { model: 'bought-together' })\n    );\n  },\n\n  addRelatedProducts: function (params) {\n    return this.addParams(\n      Object.assign({}, params, { model: 'related-products' })\n    );\n  },\n\n  addTrendingItems: function (params) {\n    return this.addParams(\n      Object.assign({}, params, { model: 'trending-items' })\n    );\n  },\n\n  addTrendingFacets: function (params) {\n    return this.addParams(\n      Object.assign({}, params, { model: 'trending-facets' })\n    );\n  },\n\n  addLookingSimilar: function (params) {\n    return this.addParams(\n      Object.assign({}, params, { model: 'looking-similar' })\n    );\n  },\n\n  _buildQueries: function (indexName, cache) {\n    return this.params\n      .filter(function (params) {\n        return cache[params.$$id] === undefined;\n      })\n      .map(function (params) {\n        var query = Object.assign({}, params, {\n          indexName: indexName,\n          // @TODO: remove this if it ever gets handled by the API\n          threshold: params.threshold || 0,\n        });\n        delete query.$$id;\n\n        return query;\n      });\n  },\n};\n\nmodule.exports = RecommendParameters;\n"],"names":[],"mappings":"AAAA;AAEA;;;;;;;;;;;;CAYC,GACD,SAAS,oBAAoB,IAAI;IAC/B,OAAO,QAAQ,CAAC;IAChB,IAAI,CAAC,MAAM,GAAG,KAAK,MAAM,IAAI,EAAE;AACjC;AAEA,oBAAoB,SAAS,GAAG;IAC9B,aAAa;IAEb,WAAW,SAAU,MAAM;QACzB,IAAI,YAAY,IAAI,CAAC,MAAM,CAAC,KAAK;QAEjC,UAAU,IAAI,CAAC;QAEf,OAAO,IAAI,oBAAoB;YAAE,QAAQ;QAAU;IACrD;IAEA,cAAc,SAAU,EAAE;QACxB,OAAO,IAAI,oBAAoB;YAC7B,QAAQ,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,SAAU,KAAK;gBACxC,OAAO,MAAM,IAAI,KAAK;YACxB;QACF;IACF;IAEA,6BAA6B,SAAU,MAAM;QAC3C,OAAO,IAAI,CAAC,SAAS,CACnB,OAAO,MAAM,CAAC,CAAC,GAAG,QAAQ;YAAE,OAAO;QAAkB;IAEzD;IAEA,oBAAoB,SAAU,MAAM;QAClC,OAAO,IAAI,CAAC,SAAS,CACnB,OAAO,MAAM,CAAC,CAAC,GAAG,QAAQ;YAAE,OAAO;QAAmB;IAE1D;IAEA,kBAAkB,SAAU,MAAM;QAChC,OAAO,IAAI,CAAC,SAAS,CACnB,OAAO,MAAM,CAAC,CAAC,GAAG,QAAQ;YAAE,OAAO;QAAiB;IAExD;IAEA,mBAAmB,SAAU,MAAM;QACjC,OAAO,IAAI,CAAC,SAAS,CACnB,OAAO,MAAM,CAAC,CAAC,GAAG,QAAQ;YAAE,OAAO;QAAkB;IAEzD;IAEA,mBAAmB,SAAU,MAAM;QACjC,OAAO,IAAI,CAAC,SAAS,CACnB,OAAO,MAAM,CAAC,CAAC,GAAG,QAAQ;YAAE,OAAO;QAAkB;IAEzD;IAEA,eAAe,SAAU,SAAS,EAAE,KAAK;QACvC,OAAO,IAAI,CAAC,MAAM,CACf,MAAM,CAAC,SAAU,MAAM;YACtB,OAAO,KAAK,CAAC,OAAO,IAAI,CAAC,KAAK;QAChC,GACC,GAAG,CAAC,SAAU,MAAM;YACnB,IAAI,QAAQ,OAAO,MAAM,CAAC,CAAC,GAAG,QAAQ;gBACpC,WAAW;gBACX,wDAAwD;gBACxD,WAAW,OAAO,SAAS,IAAI;YACjC;YACA,OAAO,MAAM,IAAI;YAEjB,OAAO;QACT;IACJ;AACF;AAEA,OAAO,OAAO,GAAG","ignoreList":[0]}},
    {"offset": {"line": 270, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 275, "column": 0}, "map": {"version":3,"sources":["file:///root/webmakerr/storefront/node_modules/algoliasearch-helper/src/RecommendResults/index.js"],"sourcesContent":["'use strict';\n\n/**\n * Constructor for SearchResults\n * @class\n * @classdesc SearchResults contains the results of a query to Algolia using the\n * {@link AlgoliaSearchHelper}.\n * @param {RecommendParameters} state state that led to the response\n * @param {Record<string,RecommendResultItem>} results the results from algolia client\n **/\nfunction RecommendResults(state, results) {\n  this._state = state;\n  this._rawResults = {};\n\n  // eslint-disable-next-line consistent-this\n  var self = this;\n\n  state.params.forEach(function (param) {\n    var id = param.$$id;\n    self[id] = results[id];\n    self._rawResults[id] = results[id];\n  });\n}\n\nRecommendResults.prototype = {\n  constructor: RecommendResults,\n};\n\nmodule.exports = RecommendResults;\n"],"names":[],"mappings":"AAAA;AAEA;;;;;;;EAOE,GACF,SAAS,iBAAiB,KAAK,EAAE,OAAO;IACtC,IAAI,CAAC,MAAM,GAAG;IACd,IAAI,CAAC,WAAW,GAAG,CAAC;IAEpB,2CAA2C;IAC3C,IAAI,OAAO,IAAI;IAEf,MAAM,MAAM,CAAC,OAAO,CAAC,SAAU,KAAK;QAClC,IAAI,KAAK,MAAM,IAAI;QACnB,IAAI,CAAC,GAAG,GAAG,OAAO,CAAC,GAAG;QACtB,KAAK,WAAW,CAAC,GAAG,GAAG,OAAO,CAAC,GAAG;IACpC;AACF;AAEA,iBAAiB,SAAS,GAAG;IAC3B,aAAa;AACf;AAEA,OAAO,OAAO,GAAG","ignoreList":[0]}},
    {"offset": {"line": 298, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 303, "column": 0}, "map": {"version":3,"sources":["file:///root/webmakerr/storefront/node_modules/algoliasearch-helper/src/requestBuilder.js"],"sourcesContent":["'use strict';\n\nvar merge = require('./functions/merge');\n\nfunction sortObject(obj) {\n  return Object.keys(obj)\n    .sort()\n    .reduce(function (acc, curr) {\n      acc[curr] = obj[curr];\n      return acc;\n    }, {});\n}\n\nvar requestBuilder = {\n  /**\n   * Get all the queries to send to the client, those queries can used directly\n   * with the Algolia client.\n   * @private\n   * @param  {string} index The name of the index\n   * @param  {SearchParameters} state The state from which to get the queries\n   * @return {object[]} The queries\n   */\n  _getQueries: function getQueries(index, state) {\n    var queries = [];\n\n    // One query for the hits\n    queries.push({\n      indexName: index,\n      params: requestBuilder._getHitsSearchParams(state),\n    });\n\n    // One for each disjunctive facets\n    state.getRefinedDisjunctiveFacets().forEach(function (refinedFacet) {\n      queries.push({\n        indexName: index,\n        params: requestBuilder._getDisjunctiveFacetSearchParams(\n          state,\n          refinedFacet\n        ),\n      });\n    });\n\n    // More to get the parent levels of the hierarchical facets when refined\n    state.getRefinedHierarchicalFacets().forEach(function (refinedFacet) {\n      var hierarchicalFacet = state.getHierarchicalFacetByName(refinedFacet);\n      var currentRefinement = state.getHierarchicalRefinement(refinedFacet);\n      var separator = state._getHierarchicalFacetSeparator(hierarchicalFacet);\n\n      // If we are deeper than level 0 (starting from `beer > IPA`)\n      // we want to get all parent values\n      if (\n        currentRefinement.length > 0 &&\n        currentRefinement[0].split(separator).length > 1\n      ) {\n        // We generate a map of the filters we will use for our facet values queries\n        var filtersMap = currentRefinement[0]\n          .split(separator)\n          .slice(0, -1)\n          .reduce(function createFiltersMap(map, segment, level) {\n            return map.concat({\n              attribute: hierarchicalFacet.attributes[level],\n              value:\n                level === 0\n                  ? segment\n                  : [map[map.length - 1].value, segment].join(separator),\n            });\n          }, []);\n\n        filtersMap.forEach(function (filter, level) {\n          var params = requestBuilder._getDisjunctiveFacetSearchParams(\n            state,\n            filter.attribute,\n            level === 0\n          );\n\n          // Keep facet filters unrelated to current hierarchical attributes\n          function hasHierarchicalFacetFilter(value) {\n            return hierarchicalFacet.attributes.some(function (attribute) {\n              return attribute === value.split(':')[0];\n            });\n          }\n\n          var filteredFacetFilters = (params.facetFilters || []).reduce(\n            function (acc, facetFilter) {\n              if (Array.isArray(facetFilter)) {\n                var filtered = facetFilter.filter(function (filterValue) {\n                  return !hasHierarchicalFacetFilter(filterValue);\n                });\n\n                if (filtered.length > 0) {\n                  acc.push(filtered);\n                }\n              }\n\n              if (\n                typeof facetFilter === 'string' &&\n                !hasHierarchicalFacetFilter(facetFilter)\n              ) {\n                acc.push(facetFilter);\n              }\n\n              return acc;\n            },\n            []\n          );\n\n          var parent = filtersMap[level - 1];\n          if (level > 0) {\n            params.facetFilters = filteredFacetFilters.concat(\n              parent.attribute + ':' + parent.value\n            );\n          } else if (filteredFacetFilters.length > 0) {\n            params.facetFilters = filteredFacetFilters;\n          } else {\n            delete params.facetFilters;\n          }\n\n          queries.push({ indexName: index, params: params });\n        });\n      }\n    });\n\n    return queries;\n  },\n\n  /**\n   * Get all the queries to send to the client, those queries can used directly\n   * with the Algolia client.\n   * @private\n   * @param  {SearchParameters} state The state from which to get the queries\n   * @return {object[]} The queries\n   */\n  _getCompositionQueries: function getQueries(state) {\n    return [\n      {\n        compositionID: state.index,\n        requestBody: {\n          params: requestBuilder._getCompositionHitsSearchParams(state),\n        },\n      },\n    ];\n  },\n\n  /**\n   * Build search parameters used to fetch hits\n   * @private\n   * @param  {SearchParameters} state The state from which to get the queries\n   * @return {object.<string, any>} The search parameters for hits\n   */\n  _getHitsSearchParams: function (state) {\n    var facets = state.facets\n      .concat(state.disjunctiveFacets)\n      .concat(requestBuilder._getHitsHierarchicalFacetsAttributes(state))\n      .sort();\n\n    var facetFilters = requestBuilder._getFacetFilters(state);\n    var numericFilters = requestBuilder._getNumericFilters(state);\n    var tagFilters = requestBuilder._getTagFilters(state);\n    var additionalParams = {};\n\n    if (facets.length > 0) {\n      additionalParams.facets = facets.indexOf('*') > -1 ? ['*'] : facets;\n    }\n\n    if (tagFilters.length > 0) {\n      additionalParams.tagFilters = tagFilters;\n    }\n\n    if (facetFilters.length > 0) {\n      additionalParams.facetFilters = facetFilters;\n    }\n\n    if (numericFilters.length > 0) {\n      additionalParams.numericFilters = numericFilters;\n    }\n\n    return sortObject(merge({}, state.getQueryParams(), additionalParams));\n  },\n\n  /**\n   * Build search parameters used to fetch hits\n   * @private\n   * @param  {SearchParameters} state The state from which to get the queries\n   * @return {object.<string, any>} The search parameters for hits\n   */\n  _getCompositionHitsSearchParams: function (state) {\n    var facets = state.facets\n      .concat(\n        state.disjunctiveFacets.map(function (value) {\n          return 'disjunctive(' + value + ')';\n        })\n      )\n      .concat(requestBuilder._getHitsHierarchicalFacetsAttributes(state))\n      .sort();\n\n    var facetFilters = requestBuilder._getFacetFilters(state);\n    var numericFilters = requestBuilder._getNumericFilters(state);\n    var tagFilters = requestBuilder._getTagFilters(state);\n    var additionalParams = {};\n\n    if (facets.length > 0) {\n      additionalParams.facets = facets.indexOf('*') > -1 ? ['*'] : facets;\n    }\n\n    if (tagFilters.length > 0) {\n      additionalParams.tagFilters = tagFilters;\n    }\n\n    if (facetFilters.length > 0) {\n      additionalParams.facetFilters = facetFilters;\n    }\n\n    if (numericFilters.length > 0) {\n      additionalParams.numericFilters = numericFilters;\n    }\n\n    var params = state.getQueryParams();\n\n    delete params.highlightPreTag;\n    delete params.highlightPostTag;\n    // not a valid search parameter, it is handled in _getCompositionQueries\n    delete params.index;\n\n    return sortObject(merge({}, params, additionalParams));\n  },\n\n  /**\n   * Build search parameters used to fetch a disjunctive facet\n   * @private\n   * @param  {SearchParameters} state The state from which to get the queries\n   * @param  {string} facet the associated facet name\n   * @param  {boolean} hierarchicalRootLevel ?? FIXME\n   * @return {object} The search parameters for a disjunctive facet\n   */\n  _getDisjunctiveFacetSearchParams: function (\n    state,\n    facet,\n    hierarchicalRootLevel\n  ) {\n    var facetFilters = requestBuilder._getFacetFilters(\n      state,\n      facet,\n      hierarchicalRootLevel\n    );\n    var numericFilters = requestBuilder._getNumericFilters(state, facet);\n    var tagFilters = requestBuilder._getTagFilters(state);\n    var additionalParams = {\n      hitsPerPage: 0,\n      page: 0,\n      analytics: false,\n      clickAnalytics: false,\n    };\n\n    if (tagFilters.length > 0) {\n      additionalParams.tagFilters = tagFilters;\n    }\n\n    var hierarchicalFacet = state.getHierarchicalFacetByName(facet);\n\n    if (hierarchicalFacet) {\n      additionalParams.facets =\n        requestBuilder._getDisjunctiveHierarchicalFacetAttribute(\n          state,\n          hierarchicalFacet,\n          hierarchicalRootLevel\n        );\n    } else {\n      additionalParams.facets = facet;\n    }\n\n    if (numericFilters.length > 0) {\n      additionalParams.numericFilters = numericFilters;\n    }\n\n    if (facetFilters.length > 0) {\n      additionalParams.facetFilters = facetFilters;\n    }\n\n    return sortObject(merge({}, state.getQueryParams(), additionalParams));\n  },\n\n  /**\n   * Return the numeric filters in an algolia request fashion\n   * @private\n   * @param {SearchParameters} state the state from which to get the filters\n   * @param {string} [facetName] the name of the attribute for which the filters should be excluded\n   * @return {string[]} the numeric filters in the algolia format\n   */\n  _getNumericFilters: function (state, facetName) {\n    if (state.numericFilters) {\n      return state.numericFilters;\n    }\n\n    var numericFilters = [];\n\n    Object.keys(state.numericRefinements).forEach(function (attribute) {\n      var operators = state.numericRefinements[attribute] || {};\n      Object.keys(operators).forEach(function (operator) {\n        var values = operators[operator] || [];\n        if (facetName !== attribute) {\n          values.forEach(function (value) {\n            if (Array.isArray(value)) {\n              var vs = value.map(function (v) {\n                return attribute + operator + v;\n              });\n              numericFilters.push(vs);\n            } else {\n              numericFilters.push(attribute + operator + value);\n            }\n          });\n        }\n      });\n    });\n\n    return numericFilters;\n  },\n\n  /**\n   * Return the tags filters depending on which format is used, either tagFilters or tagRefinements\n   * @private\n   * @param {SearchParameters} state the state from which to get the filters\n   * @return {string} Tag filters in a single string\n   */\n  _getTagFilters: function (state) {\n    if (state.tagFilters) {\n      return state.tagFilters;\n    }\n\n    return state.tagRefinements.join(',');\n  },\n\n  /**\n   * Build facetFilters parameter based on current refinements. The array returned\n   * contains strings representing the facet filters in the algolia format.\n   * @private\n   * @param  {SearchParameters} state The state from which to get the queries\n   * @param  {string} [facet] if set, the current disjunctive facet\n   * @param  {boolean} [hierarchicalRootLevel] ?? FIXME\n   * @return {array.<string>} The facet filters in the algolia format\n   */\n  _getFacetFilters: function (state, facet, hierarchicalRootLevel) {\n    var facetFilters = [];\n\n    var facetsRefinements = state.facetsRefinements || {};\n    Object.keys(facetsRefinements)\n      .sort()\n      .forEach(function (facetName) {\n        var facetValues = facetsRefinements[facetName] || [];\n        facetValues\n          .slice()\n          .sort()\n          .forEach(function (facetValue) {\n            facetFilters.push(facetName + ':' + facetValue);\n          });\n      });\n\n    var facetsExcludes = state.facetsExcludes || {};\n    Object.keys(facetsExcludes)\n      .sort()\n      .forEach(function (facetName) {\n        var facetValues = facetsExcludes[facetName] || [];\n        facetValues.sort().forEach(function (facetValue) {\n          facetFilters.push(facetName + ':-' + facetValue);\n        });\n      });\n\n    var disjunctiveFacetsRefinements = state.disjunctiveFacetsRefinements || {};\n    Object.keys(disjunctiveFacetsRefinements)\n      .sort()\n      .forEach(function (facetName) {\n        var facetValues = disjunctiveFacetsRefinements[facetName] || [];\n        if (facetName === facet || !facetValues || facetValues.length === 0) {\n          return;\n        }\n        var orFilters = [];\n\n        facetValues\n          .slice()\n          .sort()\n          .forEach(function (facetValue) {\n            orFilters.push(facetName + ':' + facetValue);\n          });\n\n        facetFilters.push(orFilters);\n      });\n\n    var hierarchicalFacetsRefinements =\n      state.hierarchicalFacetsRefinements || {};\n    Object.keys(hierarchicalFacetsRefinements)\n      .sort()\n      .forEach(function (facetName) {\n        var facetValues = hierarchicalFacetsRefinements[facetName] || [];\n        var facetValue = facetValues[0];\n\n        if (facetValue === undefined) {\n          return;\n        }\n\n        var hierarchicalFacet = state.getHierarchicalFacetByName(facetName);\n        var separator = state._getHierarchicalFacetSeparator(hierarchicalFacet);\n        var rootPath = state._getHierarchicalRootPath(hierarchicalFacet);\n        var attributeToRefine;\n        var attributesIndex;\n\n        // we ask for parent facet values only when the `facet` is the current hierarchical facet\n        if (facet === facetName) {\n          // if we are at the root level already, no need to ask for facet values, we get them from\n          // the hits query\n          if (\n            facetValue.indexOf(separator) === -1 ||\n            (!rootPath && hierarchicalRootLevel === true) ||\n            (rootPath &&\n              rootPath.split(separator).length ===\n                facetValue.split(separator).length)\n          ) {\n            return;\n          }\n\n          if (!rootPath) {\n            attributesIndex = facetValue.split(separator).length - 2;\n            facetValue = facetValue.slice(0, facetValue.lastIndexOf(separator));\n          } else {\n            attributesIndex = rootPath.split(separator).length - 1;\n            facetValue = rootPath;\n          }\n\n          attributeToRefine = hierarchicalFacet.attributes[attributesIndex];\n        } else {\n          attributesIndex = facetValue.split(separator).length - 1;\n\n          attributeToRefine = hierarchicalFacet.attributes[attributesIndex];\n        }\n\n        if (attributeToRefine) {\n          facetFilters.push([attributeToRefine + ':' + facetValue]);\n        }\n      });\n\n    return facetFilters;\n  },\n\n  _getHitsHierarchicalFacetsAttributes: function (state) {\n    var out = [];\n\n    return state.hierarchicalFacets.reduce(\n      // ask for as much levels as there's hierarchical refinements\n      function getHitsAttributesForHierarchicalFacet(\n        allAttributes,\n        hierarchicalFacet\n      ) {\n        var hierarchicalRefinement = state.getHierarchicalRefinement(\n          hierarchicalFacet.name\n        )[0];\n\n        // if no refinement, ask for root level\n        if (!hierarchicalRefinement) {\n          allAttributes.push(hierarchicalFacet.attributes[0]);\n          return allAttributes;\n        }\n\n        var separator = state._getHierarchicalFacetSeparator(hierarchicalFacet);\n        var level = hierarchicalRefinement.split(separator).length;\n        var newAttributes = hierarchicalFacet.attributes.slice(0, level + 1);\n\n        return allAttributes.concat(newAttributes);\n      },\n      out\n    );\n  },\n\n  _getDisjunctiveHierarchicalFacetAttribute: function (\n    state,\n    hierarchicalFacet,\n    rootLevel\n  ) {\n    var separator = state._getHierarchicalFacetSeparator(hierarchicalFacet);\n    if (rootLevel === true) {\n      var rootPath = state._getHierarchicalRootPath(hierarchicalFacet);\n      var attributeIndex = 0;\n\n      if (rootPath) {\n        attributeIndex = rootPath.split(separator).length;\n      }\n      return [hierarchicalFacet.attributes[attributeIndex]];\n    }\n\n    var hierarchicalRefinement =\n      state.getHierarchicalRefinement(hierarchicalFacet.name)[0] || '';\n    // if refinement is 'beers > IPA > Flying dog',\n    // then we want `facets: ['beers > IPA']` as disjunctive facet (parent level values)\n\n    var parentLevel = hierarchicalRefinement.split(separator).length - 1;\n    return hierarchicalFacet.attributes.slice(0, parentLevel + 1);\n  },\n\n  getSearchForFacetQuery: function (facetName, query, maxFacetHits, state) {\n    var stateForSearchForFacetValues = state.isDisjunctiveFacet(facetName)\n      ? state.clearRefinements(facetName)\n      : state;\n    var searchForFacetSearchParameters = {\n      facetQuery: query,\n      facetName: facetName,\n    };\n    if (typeof maxFacetHits === 'number') {\n      searchForFacetSearchParameters.maxFacetHits = maxFacetHits;\n    }\n    return sortObject(\n      merge(\n        {},\n        requestBuilder._getHitsSearchParams(stateForSearchForFacetValues),\n        searchForFacetSearchParameters\n      )\n    );\n  },\n};\n\nmodule.exports = requestBuilder;\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 665, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 670, "column": 0}, "map": {"version":3,"sources":["file:///root/webmakerr/storefront/node_modules/algoliasearch-helper/src/functions/defaultsPure.js"],"sourcesContent":["'use strict';\n\n// NOTE: this behaves like lodash/defaults, but doesn't mutate the target\n// it also preserve keys order\nmodule.exports = function defaultsPure() {\n  var sources = Array.prototype.slice.call(arguments);\n\n  return sources.reduceRight(function (acc, source) {\n    Object.keys(Object(source)).forEach(function (key) {\n      if (source[key] === undefined) {\n        return;\n      }\n      if (acc[key] !== undefined) {\n        // remove if already added, so that we can add it in correct order\n        delete acc[key];\n      }\n      acc[key] = source[key];\n    });\n    return acc;\n  }, {});\n};\n"],"names":[],"mappings":"AAAA;AAEA,yEAAyE;AACzE,8BAA8B;AAC9B,OAAO,OAAO,GAAG,SAAS;IACxB,IAAI,UAAU,MAAM,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC;IAEzC,OAAO,QAAQ,WAAW,CAAC,SAAU,GAAG,EAAE,MAAM;QAC9C,OAAO,IAAI,CAAC,OAAO,SAAS,OAAO,CAAC,SAAU,GAAG;YAC/C,IAAI,MAAM,CAAC,IAAI,KAAK,WAAW;gBAC7B;YACF;YACA,IAAI,GAAG,CAAC,IAAI,KAAK,WAAW;gBAC1B,kEAAkE;gBAClE,OAAO,GAAG,CAAC,IAAI;YACjB;YACA,GAAG,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI;QACxB;QACA,OAAO;IACT,GAAG,CAAC;AACN","ignoreList":[0]}},
    {"offset": {"line": 689, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 694, "column": 0}, "map": {"version":3,"sources":["file:///root/webmakerr/storefront/node_modules/algoliasearch-helper/src/functions/find.js"],"sourcesContent":["'use strict';\n\n// @MAJOR can be replaced by native Array#find when we change support\nmodule.exports = function find(array, comparator) {\n  if (!Array.isArray(array)) {\n    return undefined;\n  }\n\n  for (var i = 0; i < array.length; i++) {\n    if (comparator(array[i])) {\n      return array[i];\n    }\n  }\n\n  return undefined;\n};\n"],"names":[],"mappings":"AAAA;AAEA,qEAAqE;AACrE,OAAO,OAAO,GAAG,SAAS,KAAK,KAAK,EAAE,UAAU;IAC9C,IAAI,CAAC,MAAM,OAAO,CAAC,QAAQ;QACzB,OAAO;IACT;IAEA,IAAK,IAAI,IAAI,GAAG,IAAI,MAAM,MAAM,EAAE,IAAK;QACrC,IAAI,WAAW,KAAK,CAAC,EAAE,GAAG;YACxB,OAAO,KAAK,CAAC,EAAE;QACjB;IACF;IAEA,OAAO;AACT","ignoreList":[0]}},
    {"offset": {"line": 707, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 712, "column": 0}, "map": {"version":3,"sources":["file:///root/webmakerr/storefront/node_modules/algoliasearch-helper/src/functions/intersection.js"],"sourcesContent":["'use strict';\n\nfunction intersection(arr1, arr2) {\n  return arr1.filter(function (value, index) {\n    return (\n      arr2.indexOf(value) > -1 &&\n      arr1.indexOf(value) === index /* skips duplicates */\n    );\n  });\n}\n\nmodule.exports = intersection;\n"],"names":[],"mappings":"AAAA;AAEA,SAAS,aAAa,IAAI,EAAE,IAAI;IAC9B,OAAO,KAAK,MAAM,CAAC,SAAU,KAAK,EAAE,KAAK;QACvC,OACE,KAAK,OAAO,CAAC,SAAS,CAAC,KACvB,KAAK,OAAO,CAAC,WAAW,MAAM,oBAAoB;IAEtD;AACF;AAEA,OAAO,OAAO,GAAG","ignoreList":[0]}},
    {"offset": {"line": 719, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 724, "column": 0}, "map": {"version":3,"sources":["file:///root/webmakerr/storefront/node_modules/algoliasearch-helper/src/functions/valToNumber.js"],"sourcesContent":["'use strict';\n\nfunction valToNumber(v) {\n  if (typeof v === 'number') {\n    return v;\n  } else if (typeof v === 'string') {\n    return parseFloat(v);\n  } else if (Array.isArray(v)) {\n    return v.map(valToNumber);\n  }\n\n  throw new Error(\n    'The value should be a number, a parsable string or an array of those.'\n  );\n}\n\nmodule.exports = valToNumber;\n"],"names":[],"mappings":"AAAA;AAEA,SAAS,YAAY,CAAC;IACpB,IAAI,OAAO,MAAM,UAAU;QACzB,OAAO;IACT,OAAO,IAAI,OAAO,MAAM,UAAU;QAChC,OAAO,WAAW;IACpB,OAAO,IAAI,MAAM,OAAO,CAAC,IAAI;QAC3B,OAAO,EAAE,GAAG,CAAC;IACf;IAEA,MAAM,IAAI,MACR;AAEJ;AAEA,OAAO,OAAO,GAAG","ignoreList":[0]}},
    {"offset": {"line": 736, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 741, "column": 0}, "map": {"version":3,"sources":["file:///root/webmakerr/storefront/node_modules/algoliasearch-helper/src/utils/isValidUserToken.js"],"sourcesContent":["'use strict';\n\nmodule.exports = function isValidUserToken(userToken) {\n  if (userToken === null) {\n    return false;\n  }\n  return /^[a-zA-Z0-9_-]{1,64}$/.test(userToken);\n};\n"],"names":[],"mappings":"AAAA;AAEA,OAAO,OAAO,GAAG,SAAS,iBAAiB,SAAS;IAClD,IAAI,cAAc,MAAM;QACtB,OAAO;IACT;IACA,OAAO,wBAAwB,IAAI,CAAC;AACtC","ignoreList":[0]}},
    {"offset": {"line": 748, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 753, "column": 0}, "map": {"version":3,"sources":["file:///root/webmakerr/storefront/node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js"],"sourcesContent":["'use strict';\n\n/**\n * Functions to manipulate refinement lists\n *\n * The RefinementList is not formally defined through a prototype but is based\n * on a specific structure.\n *\n * @module SearchParameters.refinementList\n *\n * @typedef {string[]} SearchParameters.refinementList.Refinements\n * @typedef {Object.<string, SearchParameters.refinementList.Refinements>} SearchParameters.refinementList.RefinementList\n */\n\nvar defaultsPure = require('../functions/defaultsPure');\nvar objectHasKeys = require('../functions/objectHasKeys');\nvar omit = require('../functions/omit');\n\nvar lib = {\n  /**\n   * Adds a refinement to a RefinementList\n   * @param {RefinementList} refinementList the initial list\n   * @param {string} attribute the attribute to refine\n   * @param {string} value the value of the refinement, if the value is not a string it will be converted\n   * @return {RefinementList} a new and updated refinement list\n   */\n  addRefinement: function addRefinement(refinementList, attribute, value) {\n    if (lib.isRefined(refinementList, attribute, value)) {\n      return refinementList;\n    }\n\n    var valueAsString = '' + value;\n\n    var facetRefinement = !refinementList[attribute]\n      ? [valueAsString]\n      : refinementList[attribute].concat(valueAsString);\n\n    var mod = {};\n\n    mod[attribute] = facetRefinement;\n\n    return defaultsPure(mod, refinementList);\n  },\n  /**\n   * Removes refinement(s) for an attribute:\n   *  - if the value is specified removes the refinement for the value on the attribute\n   *  - if no value is specified removes all the refinements for this attribute\n   * @param {RefinementList} refinementList the initial list\n   * @param {string} attribute the attribute to refine\n   * @param {string} [value] the value of the refinement\n   * @return {RefinementList} a new and updated refinement lst\n   */\n  removeRefinement: function removeRefinement(\n    refinementList,\n    attribute,\n    value\n  ) {\n    if (value === undefined) {\n      // we use the \"filter\" form of clearRefinement, since it leaves empty values as-is\n      // the form with a string will remove the attribute completely\n      return lib.clearRefinement(refinementList, function (v, f) {\n        return attribute === f;\n      });\n    }\n\n    var valueAsString = '' + value;\n\n    return lib.clearRefinement(refinementList, function (v, f) {\n      return attribute === f && valueAsString === v;\n    });\n  },\n  /**\n   * Toggles the refinement value for an attribute.\n   * @param {RefinementList} refinementList the initial list\n   * @param {string} attribute the attribute to refine\n   * @param {string} value the value of the refinement\n   * @return {RefinementList} a new and updated list\n   */\n  toggleRefinement: function toggleRefinement(\n    refinementList,\n    attribute,\n    value\n  ) {\n    if (value === undefined)\n      throw new Error('toggleRefinement should be used with a value');\n\n    if (lib.isRefined(refinementList, attribute, value)) {\n      return lib.removeRefinement(refinementList, attribute, value);\n    }\n\n    return lib.addRefinement(refinementList, attribute, value);\n  },\n  /**\n   * Clear all or parts of a RefinementList. Depending on the arguments, three\n   * kinds of behavior can happen:\n   *  - if no attribute is provided: clears the whole list\n   *  - if an attribute is provided as a string: clears the list for the specific attribute\n   *  - if an attribute is provided as a function: discards the elements for which the function returns true\n   * @param {RefinementList} refinementList the initial list\n   * @param {string} [attribute] the attribute or function to discard\n   * @param {string} [refinementType] optional parameter to give more context to the attribute function\n   * @return {RefinementList} a new and updated refinement list\n   */\n  clearRefinement: function clearRefinement(\n    refinementList,\n    attribute,\n    refinementType\n  ) {\n    if (attribute === undefined) {\n      // return the same object if the list is already empty\n      // this is mainly for tests, as it doesn't have much impact on performance\n      if (!objectHasKeys(refinementList)) {\n        return refinementList;\n      }\n      return {};\n    } else if (typeof attribute === 'string') {\n      return omit(refinementList, [attribute]);\n    } else if (typeof attribute === 'function') {\n      var hasChanged = false;\n\n      var newRefinementList = Object.keys(refinementList).reduce(function (\n        memo,\n        key\n      ) {\n        var values = refinementList[key] || [];\n        var facetList = values.filter(function (value) {\n          return !attribute(value, key, refinementType);\n        });\n\n        if (facetList.length !== values.length) {\n          hasChanged = true;\n        }\n\n        memo[key] = facetList;\n\n        return memo;\n      },\n      {});\n\n      if (hasChanged) return newRefinementList;\n      return refinementList;\n    }\n\n    // We return nothing if the attribute is not undefined, a string or a function,\n    // as it is not a valid value for a refinement\n    return undefined;\n  },\n  /**\n   * Test if the refinement value is used for the attribute. If no refinement value\n   * is provided, test if the refinementList contains any refinement for the\n   * given attribute.\n   * @param {RefinementList} refinementList the list of refinement\n   * @param {string} attribute name of the attribute\n   * @param {string} [refinementValue] value of the filter/refinement\n   * @return {boolean} true if the attribute is refined, false otherwise\n   */\n  isRefined: function isRefined(refinementList, attribute, refinementValue) {\n    var containsRefinements =\n      Boolean(refinementList[attribute]) &&\n      refinementList[attribute].length > 0;\n\n    if (refinementValue === undefined || !containsRefinements) {\n      return containsRefinements;\n    }\n\n    var refinementValueAsString = '' + refinementValue;\n\n    return refinementList[attribute].indexOf(refinementValueAsString) !== -1;\n  },\n};\n\nmodule.exports = lib;\n"],"names":[],"mappings":"AAAA;AAEA;;;;;;;;;;CAUC,GAED,IAAI;AACJ,IAAI;AACJ,IAAI;AAEJ,IAAI,MAAM;IACR;;;;;;GAMC,GACD,eAAe,SAAS,cAAc,cAAc,EAAE,SAAS,EAAE,KAAK;QACpE,IAAI,IAAI,SAAS,CAAC,gBAAgB,WAAW,QAAQ;YACnD,OAAO;QACT;QAEA,IAAI,gBAAgB,KAAK;QAEzB,IAAI,kBAAkB,CAAC,cAAc,CAAC,UAAU,GAC5C;YAAC;SAAc,GACf,cAAc,CAAC,UAAU,CAAC,MAAM,CAAC;QAErC,IAAI,MAAM,CAAC;QAEX,GAAG,CAAC,UAAU,GAAG;QAEjB,OAAO,aAAa,KAAK;IAC3B;IACA;;;;;;;;GAQC,GACD,kBAAkB,SAAS,iBACzB,cAAc,EACd,SAAS,EACT,KAAK;QAEL,IAAI,UAAU,WAAW;YACvB,kFAAkF;YAClF,8DAA8D;YAC9D,OAAO,IAAI,eAAe,CAAC,gBAAgB,SAAU,CAAC,EAAE,CAAC;gBACvD,OAAO,cAAc;YACvB;QACF;QAEA,IAAI,gBAAgB,KAAK;QAEzB,OAAO,IAAI,eAAe,CAAC,gBAAgB,SAAU,CAAC,EAAE,CAAC;YACvD,OAAO,cAAc,KAAK,kBAAkB;QAC9C;IACF;IACA;;;;;;GAMC,GACD,kBAAkB,SAAS,iBACzB,cAAc,EACd,SAAS,EACT,KAAK;QAEL,IAAI,UAAU,WACZ,MAAM,IAAI,MAAM;QAElB,IAAI,IAAI,SAAS,CAAC,gBAAgB,WAAW,QAAQ;YACnD,OAAO,IAAI,gBAAgB,CAAC,gBAAgB,WAAW;QACzD;QAEA,OAAO,IAAI,aAAa,CAAC,gBAAgB,WAAW;IACtD;IACA;;;;;;;;;;GAUC,GACD,iBAAiB,SAAS,gBACxB,cAAc,EACd,SAAS,EACT,cAAc;QAEd,IAAI,cAAc,WAAW;YAC3B,sDAAsD;YACtD,0EAA0E;YAC1E,IAAI,CAAC,cAAc,iBAAiB;gBAClC,OAAO;YACT;YACA,OAAO,CAAC;QACV,OAAO,IAAI,OAAO,cAAc,UAAU;YACxC,OAAO,KAAK,gBAAgB;gBAAC;aAAU;QACzC,OAAO,IAAI,OAAO,cAAc,YAAY;YAC1C,IAAI,aAAa;YAEjB,IAAI,oBAAoB,OAAO,IAAI,CAAC,gBAAgB,MAAM,CAAC,SACzD,IAAI,EACJ,GAAG;gBAEH,IAAI,SAAS,cAAc,CAAC,IAAI,IAAI,EAAE;gBACtC,IAAI,YAAY,OAAO,MAAM,CAAC,SAAU,KAAK;oBAC3C,OAAO,CAAC,UAAU,OAAO,KAAK;gBAChC;gBAEA,IAAI,UAAU,MAAM,KAAK,OAAO,MAAM,EAAE;oBACtC,aAAa;gBACf;gBAEA,IAAI,CAAC,IAAI,GAAG;gBAEZ,OAAO;YACT,GACA,CAAC;YAED,IAAI,YAAY,OAAO;YACvB,OAAO;QACT;QAEA,+EAA+E;QAC/E,8CAA8C;QAC9C,OAAO;IACT;IACA;;;;;;;;GAQC,GACD,WAAW,SAAS,UAAU,cAAc,EAAE,SAAS,EAAE,eAAe;QACtE,IAAI,sBACF,QAAQ,cAAc,CAAC,UAAU,KACjC,cAAc,CAAC,UAAU,CAAC,MAAM,GAAG;QAErC,IAAI,oBAAoB,aAAa,CAAC,qBAAqB;YACzD,OAAO;QACT;QAEA,IAAI,0BAA0B,KAAK;QAEnC,OAAO,cAAc,CAAC,UAAU,CAAC,OAAO,CAAC,6BAA6B,CAAC;IACzE;AACF;AAEA,OAAO,OAAO,GAAG","ignoreList":[0]}},
    {"offset": {"line": 880, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 885, "column": 0}, "map": {"version":3,"sources":["file:///root/webmakerr/storefront/node_modules/algoliasearch-helper/src/SearchParameters/index.js"],"sourcesContent":["'use strict';\n\nvar defaultsPure = require('../functions/defaultsPure');\nvar find = require('../functions/find');\nvar intersection = require('../functions/intersection');\nvar merge = require('../functions/merge');\nvar objectHasKeys = require('../functions/objectHasKeys');\nvar omit = require('../functions/omit');\nvar valToNumber = require('../functions/valToNumber');\nvar isValidUserToken = require('../utils/isValidUserToken');\n\nvar RefinementList = require('./RefinementList');\n\n/**\n * isEqual, but only for numeric refinement values, possible values:\n * - 5\n * - [5]\n * - [[5]]\n * - [[5,5],[4]]\n * @param {any} a numeric refinement value\n * @param {any} b numeric refinement value\n * @return {boolean} true if the values are equal\n */\nfunction isEqualNumericRefinement(a, b) {\n  if (Array.isArray(a) && Array.isArray(b)) {\n    return (\n      a.length === b.length &&\n      a.every(function (el, i) {\n        return isEqualNumericRefinement(b[i], el);\n      })\n    );\n  }\n  return a === b;\n}\n\n/**\n * like _.find but using deep equality to be able to use it\n * to find arrays.\n * @private\n * @param {any[]} array array to search into (elements are base or array of base)\n * @param {any} searchedValue the value we're looking for (base or array of base)\n * @return {any} the searched value or undefined\n */\nfunction findArray(array, searchedValue) {\n  return find(array, function (currentValue) {\n    return isEqualNumericRefinement(currentValue, searchedValue);\n  });\n}\n\n/**\n * The facet list is the structure used to store the list of values used to\n * filter a single attribute.\n * @typedef {string[]} SearchParameters.FacetList\n */\n\n/**\n * Structure to store numeric filters with the operator as the key. The supported operators\n * are `=`, `>`, `<`, `>=`, `<=` and `!=`.\n * @typedef {Object.<string, Array.<number|number[]>>} SearchParameters.OperatorList\n */\n\n/**\n * SearchParameters is the data structure that contains all the information\n * usable for making a search to Algolia API. It doesn't do the search itself,\n * nor does it contains logic about the parameters.\n * It is an immutable object, therefore it has been created in a way that each\n * changes does not change the object itself but returns a copy with the\n * modification.\n * This object should probably not be instantiated outside of the helper. It will\n * be provided when needed. This object is documented for reference as you'll\n * get it from events generated by the {@link AlgoliaSearchHelper}.\n * If need be, instantiate the Helper from the factory function {@link SearchParameters.make}\n * @constructor\n * @classdesc contains all the parameters of a search\n * @param {object|SearchParameters} newParameters existing parameters or partial object\n * for the properties of a new SearchParameters\n * @see SearchParameters.make\n * @example <caption>SearchParameters of the first query in\n *   <a href=\"http://demos.algolia.com/instant-search-demo/\">the instant search demo</a></caption>\n{\n   \"query\": \"\",\n   \"disjunctiveFacets\": [\n      \"customerReviewCount\",\n      \"category\",\n      \"salePrice_range\",\n      \"manufacturer\"\n  ],\n   \"maxValuesPerFacet\": 30,\n   \"page\": 0,\n   \"hitsPerPage\": 10,\n   \"facets\": [\n      \"type\",\n      \"shipping\"\n  ]\n}\n */\nfunction SearchParameters(newParameters) {\n  var params = newParameters\n    ? SearchParameters._parseNumbers(newParameters)\n    : {};\n\n  if (params.userToken !== undefined && !isValidUserToken(params.userToken)) {\n    // eslint-disable-next-line no-console\n    console.warn(\n      '[algoliasearch-helper] The `userToken` parameter is invalid. This can lead to wrong analytics.\\n  - Format: [a-zA-Z0-9_-]{1,64}'\n    );\n  }\n  /**\n   * This attribute contains the list of all the conjunctive facets\n   * used. This list will be added to requested facets in the\n   * [facets attribute](https://www.algolia.com/doc/rest-api/search#param-facets) sent to algolia.\n   * @member {string[]}\n   */\n  this.facets = params.facets || [];\n  /**\n   * This attribute contains the list of all the disjunctive facets\n   * used. This list will be added to requested facets in the\n   * [facets attribute](https://www.algolia.com/doc/rest-api/search#param-facets) sent to algolia.\n   * @member {string[]}\n   */\n  this.disjunctiveFacets = params.disjunctiveFacets || [];\n  /**\n   * This attribute contains the list of all the hierarchical facets\n   * used. This list will be added to requested facets in the\n   * [facets attribute](https://www.algolia.com/doc/rest-api/search#param-facets) sent to algolia.\n   * Hierarchical facets are a sub type of disjunctive facets that\n   * let you filter faceted attributes hierarchically.\n   * @member {string[]|object[]}\n   */\n  this.hierarchicalFacets = params.hierarchicalFacets || [];\n\n  // Refinements\n  /**\n   * This attribute contains all the filters that need to be\n   * applied on the conjunctive facets. Each facet must be properly\n   * defined in the `facets` attribute.\n   *\n   * The key is the name of the facet, and the `FacetList` contains all\n   * filters selected for the associated facet name.\n   *\n   * When querying algolia, the values stored in this attribute will\n   * be translated into the `facetFilters` attribute.\n   * @member {Object.<string, SearchParameters.FacetList>}\n   */\n  this.facetsRefinements = params.facetsRefinements || {};\n  /**\n   * This attribute contains all the filters that need to be\n   * excluded from the conjunctive facets. Each facet must be properly\n   * defined in the `facets` attribute.\n   *\n   * The key is the name of the facet, and the `FacetList` contains all\n   * filters excluded for the associated facet name.\n   *\n   * When querying algolia, the values stored in this attribute will\n   * be translated into the `facetFilters` attribute.\n   * @member {Object.<string, SearchParameters.FacetList>}\n   */\n  this.facetsExcludes = params.facetsExcludes || {};\n  /**\n   * This attribute contains all the filters that need to be\n   * applied on the disjunctive facets. Each facet must be properly\n   * defined in the `disjunctiveFacets` attribute.\n   *\n   * The key is the name of the facet, and the `FacetList` contains all\n   * filters selected for the associated facet name.\n   *\n   * When querying algolia, the values stored in this attribute will\n   * be translated into the `facetFilters` attribute.\n   * @member {Object.<string, SearchParameters.FacetList>}\n   */\n  this.disjunctiveFacetsRefinements = params.disjunctiveFacetsRefinements || {};\n  /**\n   * This attribute contains all the filters that need to be\n   * applied on the numeric attributes.\n   *\n   * The key is the name of the attribute, and the value is the\n   * filters to apply to this attribute.\n   *\n   * When querying algolia, the values stored in this attribute will\n   * be translated into the `numericFilters` attribute.\n   * @member {Object.<string, SearchParameters.OperatorList>}\n   */\n  this.numericRefinements = params.numericRefinements || {};\n  /**\n   * This attribute contains all the tags used to refine the query.\n   *\n   * When querying algolia, the values stored in this attribute will\n   * be translated into the `tagFilters` attribute.\n   * @member {string[]}\n   */\n  this.tagRefinements = params.tagRefinements || [];\n  /**\n   * This attribute contains all the filters that need to be\n   * applied on the hierarchical facets. Each facet must be properly\n   * defined in the `hierarchicalFacets` attribute.\n   *\n   * The key is the name of the facet, and the `FacetList` contains all\n   * filters selected for the associated facet name. The FacetList values\n   * are structured as a string that contain the values for each level\n   * separated by the configured separator.\n   *\n   * When querying algolia, the values stored in this attribute will\n   * be translated into the `facetFilters` attribute.\n   * @member {Object.<string, SearchParameters.FacetList>}\n   */\n  this.hierarchicalFacetsRefinements =\n    params.hierarchicalFacetsRefinements || {};\n\n  // eslint-disable-next-line consistent-this\n  var self = this;\n  Object.keys(params).forEach(function (paramName) {\n    var isKeyKnown = SearchParameters.PARAMETERS.indexOf(paramName) !== -1;\n    var isValueDefined = params[paramName] !== undefined;\n\n    if (!isKeyKnown && isValueDefined) {\n      self[paramName] = params[paramName];\n    }\n  });\n}\n\n/**\n * List all the properties in SearchParameters and therefore all the known Algolia properties\n * This doesn't contain any beta/hidden features.\n * @private\n */\nSearchParameters.PARAMETERS = Object.keys(new SearchParameters());\n\n/**\n * @private\n * @param {object} partialState full or part of a state\n * @return {object} a new object with the number keys as number\n */\nSearchParameters._parseNumbers = function (partialState) {\n  // Do not parse numbers again in SearchParameters, they ought to be parsed already\n  if (partialState instanceof SearchParameters) return partialState;\n\n  var numbers = {};\n\n  var numberKeys = [\n    'aroundPrecision',\n    'aroundRadius',\n    'getRankingInfo',\n    'minWordSizefor2Typos',\n    'minWordSizefor1Typo',\n    'page',\n    'maxValuesPerFacet',\n    'distinct',\n    'minimumAroundRadius',\n    'hitsPerPage',\n    'minProximity',\n  ];\n\n  numberKeys.forEach(function (k) {\n    var value = partialState[k];\n    if (typeof value === 'string') {\n      var parsedValue = parseFloat(value);\n      // global isNaN is ok to use here, value is only number or NaN\n      numbers[k] = isNaN(parsedValue) ? value : parsedValue;\n    }\n  });\n\n  // there's two formats of insideBoundingBox, we need to parse\n  // the one which is an array of float geo rectangles\n  if (Array.isArray(partialState.insideBoundingBox)) {\n    numbers.insideBoundingBox = partialState.insideBoundingBox.map(function (\n      geoRect\n    ) {\n      if (Array.isArray(geoRect)) {\n        return geoRect.map(function (value) {\n          return parseFloat(value);\n        });\n      }\n      return geoRect;\n    });\n  }\n\n  if (partialState.numericRefinements) {\n    var numericRefinements = {};\n    Object.keys(partialState.numericRefinements).forEach(function (attribute) {\n      var operators = partialState.numericRefinements[attribute] || {};\n      numericRefinements[attribute] = {};\n      Object.keys(operators).forEach(function (operator) {\n        var values = operators[operator];\n        var parsedValues = values.map(function (v) {\n          if (Array.isArray(v)) {\n            return v.map(function (vPrime) {\n              if (typeof vPrime === 'string') {\n                return parseFloat(vPrime);\n              }\n              return vPrime;\n            });\n          } else if (typeof v === 'string') {\n            return parseFloat(v);\n          }\n          return v;\n        });\n        numericRefinements[attribute][operator] = parsedValues;\n      });\n    });\n    numbers.numericRefinements = numericRefinements;\n  }\n\n  return merge(partialState, numbers);\n};\n\n/**\n * Factory for SearchParameters\n * @param {object|SearchParameters} newParameters existing parameters or partial\n * object for the properties of a new SearchParameters\n * @return {SearchParameters} frozen instance of SearchParameters\n */\nSearchParameters.make = function makeSearchParameters(newParameters) {\n  var instance = new SearchParameters(newParameters);\n\n  var hierarchicalFacets = newParameters.hierarchicalFacets || [];\n  hierarchicalFacets.forEach(function (facet) {\n    if (facet.rootPath) {\n      var currentRefinement = instance.getHierarchicalRefinement(facet.name);\n\n      if (\n        currentRefinement.length > 0 &&\n        currentRefinement[0].indexOf(facet.rootPath) !== 0\n      ) {\n        instance = instance.clearRefinements(facet.name);\n      }\n\n      // get it again in case it has been cleared\n      currentRefinement = instance.getHierarchicalRefinement(facet.name);\n      if (currentRefinement.length === 0) {\n        instance = instance.toggleHierarchicalFacetRefinement(\n          facet.name,\n          facet.rootPath\n        );\n      }\n    }\n  });\n\n  return instance;\n};\n\n/**\n * Validates the new parameters based on the previous state\n * @param {SearchParameters} currentState the current state\n * @param {object|SearchParameters} parameters the new parameters to set\n * @return {Error|null} Error if the modification is invalid, null otherwise\n */\nSearchParameters.validate = function (currentState, parameters) {\n  var params = parameters || {};\n\n  if (\n    currentState.tagFilters &&\n    params.tagRefinements &&\n    params.tagRefinements.length > 0\n  ) {\n    return new Error(\n      '[Tags] Cannot switch from the managed tag API to the advanced API. It is probably ' +\n        'an error, if it is really what you want, you should first clear the tags with clearTags method.'\n    );\n  }\n\n  if (currentState.tagRefinements.length > 0 && params.tagFilters) {\n    return new Error(\n      '[Tags] Cannot switch from the advanced tag API to the managed API. It is probably ' +\n        'an error, if it is not, you should first clear the tags with clearTags method.'\n    );\n  }\n\n  if (\n    currentState.numericFilters &&\n    params.numericRefinements &&\n    objectHasKeys(params.numericRefinements)\n  ) {\n    return new Error(\n      \"[Numeric filters] Can't switch from the advanced to the managed API. It\" +\n        ' is probably an error, if this is really what you want, you have to first' +\n        ' clear the numeric filters.'\n    );\n  }\n\n  if (objectHasKeys(currentState.numericRefinements) && params.numericFilters) {\n    return new Error(\n      \"[Numeric filters] Can't switch from the managed API to the advanced. It\" +\n        ' is probably an error, if this is really what you want, you have to first' +\n        ' clear the numeric filters.'\n    );\n  }\n\n  return null;\n};\n\nSearchParameters.prototype = {\n  constructor: SearchParameters,\n\n  /**\n   * Remove all refinements (disjunctive + conjunctive + excludes + numeric filters)\n   * @method\n   * @param {undefined|string|SearchParameters.clearCallback} [attribute] optional string or function\n   * - If not given, means to clear all the filters.\n   * - If `string`, means to clear all refinements for the `attribute` named filter.\n   * - If `function`, means to clear all the refinements that return truthy values.\n   * @return {SearchParameters} new instance with filters cleared\n   */\n  clearRefinements: function clearRefinements(attribute) {\n    var patch = {\n      numericRefinements: this._clearNumericRefinements(attribute),\n      facetsRefinements: RefinementList.clearRefinement(\n        this.facetsRefinements,\n        attribute,\n        'conjunctiveFacet'\n      ),\n      facetsExcludes: RefinementList.clearRefinement(\n        this.facetsExcludes,\n        attribute,\n        'exclude'\n      ),\n      disjunctiveFacetsRefinements: RefinementList.clearRefinement(\n        this.disjunctiveFacetsRefinements,\n        attribute,\n        'disjunctiveFacet'\n      ),\n      hierarchicalFacetsRefinements: RefinementList.clearRefinement(\n        this.hierarchicalFacetsRefinements,\n        attribute,\n        'hierarchicalFacet'\n      ),\n    };\n    if (\n      patch.numericRefinements === this.numericRefinements &&\n      patch.facetsRefinements === this.facetsRefinements &&\n      patch.facetsExcludes === this.facetsExcludes &&\n      patch.disjunctiveFacetsRefinements ===\n        this.disjunctiveFacetsRefinements &&\n      patch.hierarchicalFacetsRefinements === this.hierarchicalFacetsRefinements\n    ) {\n      return this;\n    }\n    return this.setQueryParameters(patch);\n  },\n  /**\n   * Remove all the refined tags from the SearchParameters\n   * @method\n   * @return {SearchParameters} new instance with tags cleared\n   */\n  clearTags: function clearTags() {\n    if (this.tagFilters === undefined && this.tagRefinements.length === 0)\n      return this;\n\n    return this.setQueryParameters({\n      tagFilters: undefined,\n      tagRefinements: [],\n    });\n  },\n  /**\n   * Set the index.\n   * @method\n   * @param {string} index the index name\n   * @return {SearchParameters} new instance\n   */\n  setIndex: function setIndex(index) {\n    if (index === this.index) return this;\n\n    return this.setQueryParameters({\n      index: index,\n    });\n  },\n  /**\n   * Query setter\n   * @method\n   * @param {string} newQuery value for the new query\n   * @return {SearchParameters} new instance\n   */\n  setQuery: function setQuery(newQuery) {\n    if (newQuery === this.query) return this;\n\n    return this.setQueryParameters({\n      query: newQuery,\n    });\n  },\n  /**\n   * Page setter\n   * @method\n   * @param {number} newPage new page number\n   * @return {SearchParameters} new instance\n   */\n  setPage: function setPage(newPage) {\n    if (newPage === this.page) return this;\n\n    return this.setQueryParameters({\n      page: newPage,\n    });\n  },\n  /**\n   * Facets setter\n   * The facets are the simple facets, used for conjunctive (and) faceting.\n   * @method\n   * @param {string[]} facets all the attributes of the algolia records used for conjunctive faceting\n   * @return {SearchParameters} new instance\n   */\n  setFacets: function setFacets(facets) {\n    return this.setQueryParameters({\n      facets: facets,\n    });\n  },\n  /**\n   * Disjunctive facets setter\n   * Change the list of disjunctive (or) facets the helper chan handle.\n   * @method\n   * @param {string[]} facets all the attributes of the algolia records used for disjunctive faceting\n   * @return {SearchParameters} new instance\n   */\n  setDisjunctiveFacets: function setDisjunctiveFacets(facets) {\n    return this.setQueryParameters({\n      disjunctiveFacets: facets,\n    });\n  },\n  /**\n   * HitsPerPage setter\n   * Hits per page represents the number of hits retrieved for this query\n   * @method\n   * @param {number} n number of hits retrieved per page of results\n   * @return {SearchParameters} new instance\n   */\n  setHitsPerPage: function setHitsPerPage(n) {\n    if (this.hitsPerPage === n) return this;\n\n    return this.setQueryParameters({\n      hitsPerPage: n,\n    });\n  },\n  /**\n   * typoTolerance setter\n   * Set the value of typoTolerance\n   * @method\n   * @param {string} typoTolerance new value of typoTolerance (\"true\", \"false\", \"min\" or \"strict\")\n   * @return {SearchParameters} new instance\n   */\n  setTypoTolerance: function setTypoTolerance(typoTolerance) {\n    if (this.typoTolerance === typoTolerance) return this;\n\n    return this.setQueryParameters({\n      typoTolerance: typoTolerance,\n    });\n  },\n  /**\n   * Add a numeric filter for a given attribute\n   * When value is an array, they are combined with OR\n   * When value is a single value, it will combined with AND\n   * @method\n   * @param {string} attribute attribute to set the filter on\n   * @param {string} operator operator of the filter (possible values: =, >, >=, <, <=, !=)\n   * @param {number | number[]} value value of the filter\n   * @return {SearchParameters} new instance\n   * @example\n   * // for price = 50 or 40\n   * state.addNumericRefinement('price', '=', [50, 40]);\n   * @example\n   * // for size = 38 and 40\n   * state.addNumericRefinement('size', '=', 38);\n   * state.addNumericRefinement('size', '=', 40);\n   */\n  addNumericRefinement: function (attribute, operator, value) {\n    var val = valToNumber(value);\n\n    if (this.isNumericRefined(attribute, operator, val)) return this;\n\n    var mod = merge({}, this.numericRefinements);\n\n    mod[attribute] = merge({}, mod[attribute]);\n\n    if (mod[attribute][operator]) {\n      // Array copy\n      mod[attribute][operator] = mod[attribute][operator].slice();\n      // Add the element. Concat can't be used here because value can be an array.\n      mod[attribute][operator].push(val);\n    } else {\n      mod[attribute][operator] = [val];\n    }\n\n    return this.setQueryParameters({\n      numericRefinements: mod,\n    });\n  },\n  /**\n   * Get the list of conjunctive refinements for a single facet\n   * @param {string} facetName name of the attribute used for faceting\n   * @return {string[]} list of refinements\n   */\n  getConjunctiveRefinements: function (facetName) {\n    if (!this.isConjunctiveFacet(facetName)) {\n      return [];\n    }\n    return this.facetsRefinements[facetName] || [];\n  },\n  /**\n   * Get the list of disjunctive refinements for a single facet\n   * @param {string} facetName name of the attribute used for faceting\n   * @return {string[]} list of refinements\n   */\n  getDisjunctiveRefinements: function (facetName) {\n    if (!this.isDisjunctiveFacet(facetName)) {\n      return [];\n    }\n    return this.disjunctiveFacetsRefinements[facetName] || [];\n  },\n  /**\n   * Get the list of hierarchical refinements for a single facet\n   * @param {string} facetName name of the attribute used for faceting\n   * @return {string[]} list of refinements\n   */\n  getHierarchicalRefinement: function (facetName) {\n    // we send an array but we currently do not support multiple\n    // hierarchicalRefinements for a hierarchicalFacet\n    return this.hierarchicalFacetsRefinements[facetName] || [];\n  },\n  /**\n   * Get the list of exclude refinements for a single facet\n   * @param {string} facetName name of the attribute used for faceting\n   * @return {string[]} list of refinements\n   */\n  getExcludeRefinements: function (facetName) {\n    if (!this.isConjunctiveFacet(facetName)) {\n      return [];\n    }\n    return this.facetsExcludes[facetName] || [];\n  },\n\n  /**\n   * Remove all the numeric filter for a given (attribute, operator)\n   * @method\n   * @param {string} attribute attribute to set the filter on\n   * @param {string} [operator] operator of the filter (possible values: =, >, >=, <, <=, !=)\n   * @param {number} [number] the value to be removed\n   * @return {SearchParameters} new instance\n   */\n  removeNumericRefinement: function (attribute, operator, number) {\n    var paramValue = number;\n    if (paramValue !== undefined) {\n      if (!this.isNumericRefined(attribute, operator, paramValue)) {\n        return this;\n      }\n      return this.setQueryParameters({\n        numericRefinements: this._clearNumericRefinements(function (\n          value,\n          key\n        ) {\n          return (\n            key === attribute &&\n            value.op === operator &&\n            isEqualNumericRefinement(value.val, valToNumber(paramValue))\n          );\n        }),\n      });\n    } else if (operator !== undefined) {\n      if (!this.isNumericRefined(attribute, operator)) return this;\n      return this.setQueryParameters({\n        numericRefinements: this._clearNumericRefinements(function (\n          value,\n          key\n        ) {\n          return key === attribute && value.op === operator;\n        }),\n      });\n    }\n\n    if (!this.isNumericRefined(attribute)) return this;\n    return this.setQueryParameters({\n      numericRefinements: this._clearNumericRefinements(function (value, key) {\n        return key === attribute;\n      }),\n    });\n  },\n  /**\n   * Get the list of numeric refinements for a single facet\n   * @param {string} facetName name of the attribute used for faceting\n   * @return {SearchParameters.OperatorList} list of refinements\n   */\n  getNumericRefinements: function (facetName) {\n    return this.numericRefinements[facetName] || {};\n  },\n  /**\n   * Return the current refinement for the (attribute, operator)\n   * @param {string} attribute attribute in the record\n   * @param {string} operator operator applied on the refined values\n   * @return {Array.<number|number[]>} refined values\n   */\n  getNumericRefinement: function (attribute, operator) {\n    return (\n      this.numericRefinements[attribute] &&\n      this.numericRefinements[attribute][operator]\n    );\n  },\n  /**\n   * Clear numeric filters.\n   * @method\n   * @private\n   * @param {string|SearchParameters.clearCallback} [attribute] optional string or function\n   * - If not given, means to clear all the filters.\n   * - If `string`, means to clear all refinements for the `attribute` named filter.\n   * - If `function`, means to clear all the refinements that return truthy values.\n   * @return {Object.<string, OperatorList>} new numeric refinements\n   */\n  _clearNumericRefinements: function _clearNumericRefinements(attribute) {\n    if (attribute === undefined) {\n      if (!objectHasKeys(this.numericRefinements)) {\n        return this.numericRefinements;\n      }\n      return {};\n    } else if (typeof attribute === 'string') {\n      return omit(this.numericRefinements, [attribute]);\n    } else if (typeof attribute === 'function') {\n      var hasChanged = false;\n      var numericRefinements = this.numericRefinements;\n      var newNumericRefinements = Object.keys(numericRefinements).reduce(\n        function (memo, key) {\n          var operators = numericRefinements[key];\n          var operatorList = {};\n\n          operators = operators || {};\n          Object.keys(operators).forEach(function (operator) {\n            var values = operators[operator] || [];\n            var outValues = [];\n            values.forEach(function (value) {\n              var predicateResult = attribute(\n                { val: value, op: operator },\n                key,\n                'numeric'\n              );\n              if (!predicateResult) outValues.push(value);\n            });\n            if (outValues.length !== values.length) {\n              hasChanged = true;\n            }\n            operatorList[operator] = outValues;\n          });\n\n          memo[key] = operatorList;\n\n          return memo;\n        },\n        {}\n      );\n\n      if (hasChanged) return newNumericRefinements;\n      return this.numericRefinements;\n    }\n\n    // We return nothing if the attribute is not undefined, a string or a function,\n    // as it is not a valid value for a refinement\n    return undefined;\n  },\n  /**\n   * Add a facet to the facets attribute of the helper configuration, if it\n   * isn't already present.\n   * @method\n   * @param {string} facet facet name to add\n   * @return {SearchParameters} new instance\n   */\n  addFacet: function addFacet(facet) {\n    if (this.isConjunctiveFacet(facet)) {\n      return this;\n    }\n\n    return this.setQueryParameters({\n      facets: this.facets.concat([facet]),\n    });\n  },\n  /**\n   * Add a disjunctive facet to the disjunctiveFacets attribute of the helper\n   * configuration, if it isn't already present.\n   * @method\n   * @param {string} facet disjunctive facet name to add\n   * @return {SearchParameters} new instance\n   */\n  addDisjunctiveFacet: function addDisjunctiveFacet(facet) {\n    if (this.isDisjunctiveFacet(facet)) {\n      return this;\n    }\n\n    return this.setQueryParameters({\n      disjunctiveFacets: this.disjunctiveFacets.concat([facet]),\n    });\n  },\n  /**\n   * Add a hierarchical facet to the hierarchicalFacets attribute of the helper\n   * configuration.\n   * @method\n   * @param {object} hierarchicalFacet hierarchical facet to add\n   * @return {SearchParameters} new instance\n   * @throws will throw an error if a hierarchical facet with the same name was already declared\n   */\n  addHierarchicalFacet: function addHierarchicalFacet(hierarchicalFacet) {\n    if (this.isHierarchicalFacet(hierarchicalFacet.name)) {\n      throw new Error(\n        'Cannot declare two hierarchical facets with the same name: `' +\n          hierarchicalFacet.name +\n          '`'\n      );\n    }\n\n    return this.setQueryParameters({\n      hierarchicalFacets: this.hierarchicalFacets.concat([hierarchicalFacet]),\n    });\n  },\n  /**\n   * Add a refinement on a \"normal\" facet\n   * @method\n   * @param {string} facet attribute to apply the faceting on\n   * @param {string} value value of the attribute (will be converted to string)\n   * @return {SearchParameters} new instance\n   */\n  addFacetRefinement: function addFacetRefinement(facet, value) {\n    if (!this.isConjunctiveFacet(facet)) {\n      throw new Error(\n        facet +\n          ' is not defined in the facets attribute of the helper configuration'\n      );\n    }\n    if (RefinementList.isRefined(this.facetsRefinements, facet, value))\n      return this;\n\n    return this.setQueryParameters({\n      facetsRefinements: RefinementList.addRefinement(\n        this.facetsRefinements,\n        facet,\n        value\n      ),\n    });\n  },\n  /**\n   * Exclude a value from a \"normal\" facet\n   * @method\n   * @param {string} facet attribute to apply the exclusion on\n   * @param {string} value value of the attribute (will be converted to string)\n   * @return {SearchParameters} new instance\n   */\n  addExcludeRefinement: function addExcludeRefinement(facet, value) {\n    if (!this.isConjunctiveFacet(facet)) {\n      throw new Error(\n        facet +\n          ' is not defined in the facets attribute of the helper configuration'\n      );\n    }\n    if (RefinementList.isRefined(this.facetsExcludes, facet, value))\n      return this;\n\n    return this.setQueryParameters({\n      facetsExcludes: RefinementList.addRefinement(\n        this.facetsExcludes,\n        facet,\n        value\n      ),\n    });\n  },\n  /**\n   * Adds a refinement on a disjunctive facet.\n   * @method\n   * @param {string} facet attribute to apply the faceting on\n   * @param {string} value value of the attribute (will be converted to string)\n   * @return {SearchParameters} new instance\n   */\n  addDisjunctiveFacetRefinement: function addDisjunctiveFacetRefinement(\n    facet,\n    value\n  ) {\n    if (!this.isDisjunctiveFacet(facet)) {\n      throw new Error(\n        facet +\n          ' is not defined in the disjunctiveFacets attribute of the helper configuration'\n      );\n    }\n\n    if (\n      RefinementList.isRefined(this.disjunctiveFacetsRefinements, facet, value)\n    )\n      return this;\n\n    return this.setQueryParameters({\n      disjunctiveFacetsRefinements: RefinementList.addRefinement(\n        this.disjunctiveFacetsRefinements,\n        facet,\n        value\n      ),\n    });\n  },\n  /**\n   * addTagRefinement adds a tag to the list used to filter the results\n   * @param {string} tag tag to be added\n   * @return {SearchParameters} new instance\n   */\n  addTagRefinement: function addTagRefinement(tag) {\n    if (this.isTagRefined(tag)) return this;\n\n    var modification = {\n      tagRefinements: this.tagRefinements.concat(tag),\n    };\n\n    return this.setQueryParameters(modification);\n  },\n  /**\n   * Remove a facet from the facets attribute of the helper configuration, if it\n   * is present.\n   * @method\n   * @param {string} facet facet name to remove\n   * @return {SearchParameters} new instance\n   */\n  removeFacet: function removeFacet(facet) {\n    if (!this.isConjunctiveFacet(facet)) {\n      return this;\n    }\n\n    return this.clearRefinements(facet).setQueryParameters({\n      facets: this.facets.filter(function (f) {\n        return f !== facet;\n      }),\n    });\n  },\n  /**\n   * Remove a disjunctive facet from the disjunctiveFacets attribute of the\n   * helper configuration, if it is present.\n   * @method\n   * @param {string} facet disjunctive facet name to remove\n   * @return {SearchParameters} new instance\n   */\n  removeDisjunctiveFacet: function removeDisjunctiveFacet(facet) {\n    if (!this.isDisjunctiveFacet(facet)) {\n      return this;\n    }\n\n    return this.clearRefinements(facet).setQueryParameters({\n      disjunctiveFacets: this.disjunctiveFacets.filter(function (f) {\n        return f !== facet;\n      }),\n    });\n  },\n  /**\n   * Remove a hierarchical facet from the hierarchicalFacets attribute of the\n   * helper configuration, if it is present.\n   * @method\n   * @param {string} facet hierarchical facet name to remove\n   * @return {SearchParameters} new instance\n   */\n  removeHierarchicalFacet: function removeHierarchicalFacet(facet) {\n    if (!this.isHierarchicalFacet(facet)) {\n      return this;\n    }\n\n    return this.clearRefinements(facet).setQueryParameters({\n      hierarchicalFacets: this.hierarchicalFacets.filter(function (f) {\n        return f.name !== facet;\n      }),\n    });\n  },\n  /**\n   * Remove a refinement set on facet. If a value is provided, it will clear the\n   * refinement for the given value, otherwise it will clear all the refinement\n   * values for the faceted attribute.\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {string} [value] value used to filter\n   * @return {SearchParameters} new instance\n   */\n  removeFacetRefinement: function removeFacetRefinement(facet, value) {\n    if (!this.isConjunctiveFacet(facet)) {\n      throw new Error(\n        facet +\n          ' is not defined in the facets attribute of the helper configuration'\n      );\n    }\n    if (!RefinementList.isRefined(this.facetsRefinements, facet, value))\n      return this;\n\n    return this.setQueryParameters({\n      facetsRefinements: RefinementList.removeRefinement(\n        this.facetsRefinements,\n        facet,\n        value\n      ),\n    });\n  },\n  /**\n   * Remove a negative refinement on a facet\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {string} value value used to filter\n   * @return {SearchParameters} new instance\n   */\n  removeExcludeRefinement: function removeExcludeRefinement(facet, value) {\n    if (!this.isConjunctiveFacet(facet)) {\n      throw new Error(\n        facet +\n          ' is not defined in the facets attribute of the helper configuration'\n      );\n    }\n    if (!RefinementList.isRefined(this.facetsExcludes, facet, value))\n      return this;\n\n    return this.setQueryParameters({\n      facetsExcludes: RefinementList.removeRefinement(\n        this.facetsExcludes,\n        facet,\n        value\n      ),\n    });\n  },\n  /**\n   * Remove a refinement on a disjunctive facet\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {string} value value used to filter\n   * @return {SearchParameters} new instance\n   */\n  removeDisjunctiveFacetRefinement: function removeDisjunctiveFacetRefinement(\n    facet,\n    value\n  ) {\n    if (!this.isDisjunctiveFacet(facet)) {\n      throw new Error(\n        facet +\n          ' is not defined in the disjunctiveFacets attribute of the helper configuration'\n      );\n    }\n    if (\n      !RefinementList.isRefined(this.disjunctiveFacetsRefinements, facet, value)\n    )\n      return this;\n\n    return this.setQueryParameters({\n      disjunctiveFacetsRefinements: RefinementList.removeRefinement(\n        this.disjunctiveFacetsRefinements,\n        facet,\n        value\n      ),\n    });\n  },\n  /**\n   * Remove a tag from the list of tag refinements\n   * @method\n   * @param {string} tag the tag to remove\n   * @return {SearchParameters} new instance\n   */\n  removeTagRefinement: function removeTagRefinement(tag) {\n    if (!this.isTagRefined(tag)) return this;\n\n    var modification = {\n      tagRefinements: this.tagRefinements.filter(function (t) {\n        return t !== tag;\n      }),\n    };\n\n    return this.setQueryParameters(modification);\n  },\n  /**\n   * Generic toggle refinement method to use with facet, disjunctive facets\n   * and hierarchical facets\n   * @param  {string} facet the facet to refine\n   * @param  {string} value the associated value\n   * @return {SearchParameters} new instance\n   * @throws will throw an error if the facet is not declared in the settings of the helper\n   * @deprecated since version 2.19.0, see {@link SearchParameters#toggleFacetRefinement}\n   */\n  toggleRefinement: function toggleRefinement(facet, value) {\n    return this.toggleFacetRefinement(facet, value);\n  },\n  /**\n   * Generic toggle refinement method to use with facet, disjunctive facets\n   * and hierarchical facets\n   * @param  {string} facet the facet to refine\n   * @param  {string} value the associated value\n   * @return {SearchParameters} new instance\n   * @throws will throw an error if the facet is not declared in the settings of the helper\n   */\n  toggleFacetRefinement: function toggleFacetRefinement(facet, value) {\n    if (this.isHierarchicalFacet(facet)) {\n      return this.toggleHierarchicalFacetRefinement(facet, value);\n    } else if (this.isConjunctiveFacet(facet)) {\n      return this.toggleConjunctiveFacetRefinement(facet, value);\n    } else if (this.isDisjunctiveFacet(facet)) {\n      return this.toggleDisjunctiveFacetRefinement(facet, value);\n    }\n\n    throw new Error(\n      'Cannot refine the undeclared facet ' +\n        facet +\n        '; it should be added to the helper options facets, disjunctiveFacets or hierarchicalFacets'\n    );\n  },\n  /**\n   * Switch the refinement applied over a facet/value\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {value} value value used for filtering\n   * @return {SearchParameters} new instance\n   */\n  toggleConjunctiveFacetRefinement: function toggleConjunctiveFacetRefinement(\n    facet,\n    value\n  ) {\n    if (!this.isConjunctiveFacet(facet)) {\n      throw new Error(\n        facet +\n          ' is not defined in the facets attribute of the helper configuration'\n      );\n    }\n\n    return this.setQueryParameters({\n      facetsRefinements: RefinementList.toggleRefinement(\n        this.facetsRefinements,\n        facet,\n        value\n      ),\n    });\n  },\n  /**\n   * Switch the refinement applied over a facet/value\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {value} value value used for filtering\n   * @return {SearchParameters} new instance\n   */\n  toggleExcludeFacetRefinement: function toggleExcludeFacetRefinement(\n    facet,\n    value\n  ) {\n    if (!this.isConjunctiveFacet(facet)) {\n      throw new Error(\n        facet +\n          ' is not defined in the facets attribute of the helper configuration'\n      );\n    }\n\n    return this.setQueryParameters({\n      facetsExcludes: RefinementList.toggleRefinement(\n        this.facetsExcludes,\n        facet,\n        value\n      ),\n    });\n  },\n  /**\n   * Switch the refinement applied over a facet/value\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {value} value value used for filtering\n   * @return {SearchParameters} new instance\n   */\n  toggleDisjunctiveFacetRefinement: function toggleDisjunctiveFacetRefinement(\n    facet,\n    value\n  ) {\n    if (!this.isDisjunctiveFacet(facet)) {\n      throw new Error(\n        facet +\n          ' is not defined in the disjunctiveFacets attribute of the helper configuration'\n      );\n    }\n\n    return this.setQueryParameters({\n      disjunctiveFacetsRefinements: RefinementList.toggleRefinement(\n        this.disjunctiveFacetsRefinements,\n        facet,\n        value\n      ),\n    });\n  },\n  /**\n   * Switch the refinement applied over a facet/value\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {value} value value used for filtering\n   * @return {SearchParameters} new instance\n   */\n  toggleHierarchicalFacetRefinement: function toggleHierarchicalFacetRefinement(\n    facet,\n    value\n  ) {\n    if (!this.isHierarchicalFacet(facet)) {\n      throw new Error(\n        facet +\n          ' is not defined in the hierarchicalFacets attribute of the helper configuration'\n      );\n    }\n\n    var separator = this._getHierarchicalFacetSeparator(\n      this.getHierarchicalFacetByName(facet)\n    );\n\n    var mod = {};\n\n    var upOneOrMultipleLevel =\n      this.hierarchicalFacetsRefinements[facet] !== undefined &&\n      this.hierarchicalFacetsRefinements[facet].length > 0 &&\n      // remove current refinement:\n      // refinement was 'beer > IPA', call is toggleRefine('beer > IPA'), refinement should be `beer`\n      (this.hierarchicalFacetsRefinements[facet][0] === value ||\n        // remove a parent refinement of the current refinement:\n        //  - refinement was 'beer > IPA > Flying dog'\n        //  - call is toggleRefine('beer > IPA')\n        //  - refinement should be `beer`\n        this.hierarchicalFacetsRefinements[facet][0].indexOf(\n          value + separator\n        ) === 0);\n\n    if (upOneOrMultipleLevel) {\n      if (value.indexOf(separator) === -1) {\n        // go back to root level\n        mod[facet] = [];\n      } else {\n        mod[facet] = [value.slice(0, value.lastIndexOf(separator))];\n      }\n    } else {\n      mod[facet] = [value];\n    }\n\n    return this.setQueryParameters({\n      hierarchicalFacetsRefinements: defaultsPure(\n        mod,\n        this.hierarchicalFacetsRefinements\n      ),\n    });\n  },\n\n  /**\n   * Adds a refinement on a hierarchical facet.\n   * @param {string} facet the facet name\n   * @param {string} path the hierarchical facet path\n   * @return {SearchParameter} the new state\n   * @throws Error if the facet is not defined or if the facet is refined\n   */\n  addHierarchicalFacetRefinement: function (facet, path) {\n    if (this.isHierarchicalFacetRefined(facet)) {\n      throw new Error(facet + ' is already refined.');\n    }\n    if (!this.isHierarchicalFacet(facet)) {\n      throw new Error(\n        facet +\n          ' is not defined in the hierarchicalFacets attribute of the helper configuration.'\n      );\n    }\n    var mod = {};\n    mod[facet] = [path];\n    return this.setQueryParameters({\n      hierarchicalFacetsRefinements: defaultsPure(\n        mod,\n        this.hierarchicalFacetsRefinements\n      ),\n    });\n  },\n\n  /**\n   * Removes the refinement set on a hierarchical facet.\n   * @param {string} facet the facet name\n   * @return {SearchParameter} the new state\n   * @throws Error if the facet is not defined or if the facet is not refined\n   */\n  removeHierarchicalFacetRefinement: function (facet) {\n    if (!this.isHierarchicalFacetRefined(facet)) {\n      return this;\n    }\n    var mod = {};\n    mod[facet] = [];\n    return this.setQueryParameters({\n      hierarchicalFacetsRefinements: defaultsPure(\n        mod,\n        this.hierarchicalFacetsRefinements\n      ),\n    });\n  },\n  /**\n   * Switch the tag refinement\n   * @method\n   * @param {string} tag the tag to remove or add\n   * @return {SearchParameters} new instance\n   */\n  toggleTagRefinement: function toggleTagRefinement(tag) {\n    if (this.isTagRefined(tag)) {\n      return this.removeTagRefinement(tag);\n    }\n\n    return this.addTagRefinement(tag);\n  },\n  /**\n   * Test if the facet name is from one of the disjunctive facets\n   * @method\n   * @param {string} facet facet name to test\n   * @return {boolean} true if facet is a disjunctive facet\n   */\n  isDisjunctiveFacet: function (facet) {\n    return this.disjunctiveFacets.indexOf(facet) > -1;\n  },\n  /**\n   * Test if the facet name is from one of the hierarchical facets\n   * @method\n   * @param {string} facetName facet name to test\n   * @return {boolean} true if facetName is a hierarchical facet\n   */\n  isHierarchicalFacet: function (facetName) {\n    return this.getHierarchicalFacetByName(facetName) !== undefined;\n  },\n  /**\n   * Test if the facet name is from one of the conjunctive/normal facets\n   * @method\n   * @param {string} facet facet name to test\n   * @return {boolean} true if facet is a conjunctive facet\n   */\n  isConjunctiveFacet: function (facet) {\n    return this.facets.indexOf(facet) > -1;\n  },\n  /**\n   * Returns true if the facet is refined, either for a specific value or in\n   * general.\n   * @method\n   * @param {string} facet name of the attribute for used for faceting\n   * @param {string} value, optional value. If passed will test that this value\n   * is filtering the given facet.\n   * @return {boolean} returns true if refined\n   */\n  isFacetRefined: function isFacetRefined(facet, value) {\n    if (!this.isConjunctiveFacet(facet)) {\n      return false;\n    }\n    return RefinementList.isRefined(this.facetsRefinements, facet, value);\n  },\n  /**\n   * Returns true if the facet contains exclusions or if a specific value is\n   * excluded.\n   *\n   * @method\n   * @param {string} facet name of the attribute for used for faceting\n   * @param {string} [value] optional value. If passed will test that this value\n   * is filtering the given facet.\n   * @return {boolean} returns true if refined\n   */\n  isExcludeRefined: function isExcludeRefined(facet, value) {\n    if (!this.isConjunctiveFacet(facet)) {\n      return false;\n    }\n    return RefinementList.isRefined(this.facetsExcludes, facet, value);\n  },\n  /**\n   * Returns true if the facet contains a refinement, or if a value passed is a\n   * refinement for the facet.\n   * @method\n   * @param {string} facet name of the attribute for used for faceting\n   * @param {string} value optional, will test if the value is used for refinement\n   * if there is one, otherwise will test if the facet contains any refinement\n   * @return {boolean} true if the facet is refined\n   */\n  isDisjunctiveFacetRefined: function isDisjunctiveFacetRefined(facet, value) {\n    if (!this.isDisjunctiveFacet(facet)) {\n      return false;\n    }\n    return RefinementList.isRefined(\n      this.disjunctiveFacetsRefinements,\n      facet,\n      value\n    );\n  },\n  /**\n   * Returns true if the facet contains a refinement, or if a value passed is a\n   * refinement for the facet.\n   * @method\n   * @param {string} facet name of the attribute for used for faceting\n   * @param {string} value optional, will test if the value is used for refinement\n   * if there is one, otherwise will test if the facet contains any refinement\n   * @return {boolean} true if the facet is refined\n   */\n  isHierarchicalFacetRefined: function isHierarchicalFacetRefined(\n    facet,\n    value\n  ) {\n    if (!this.isHierarchicalFacet(facet)) {\n      return false;\n    }\n\n    var refinements = this.getHierarchicalRefinement(facet);\n\n    if (!value) {\n      return refinements.length > 0;\n    }\n\n    return refinements.indexOf(value) !== -1;\n  },\n  /**\n   * Test if the triple (attribute, operator, value) is already refined.\n   * If only the attribute and the operator are provided, it tests if the\n   * contains any refinement value.\n   * @method\n   * @param {string} attribute attribute for which the refinement is applied\n   * @param {string} [operator] operator of the refinement\n   * @param {string} [value] value of the refinement\n   * @return {boolean} true if it is refined\n   */\n  isNumericRefined: function isNumericRefined(attribute, operator, value) {\n    if (value === undefined && operator === undefined) {\n      return Boolean(this.numericRefinements[attribute]);\n    }\n\n    var isOperatorDefined =\n      this.numericRefinements[attribute] &&\n      this.numericRefinements[attribute][operator] !== undefined;\n\n    if (value === undefined || !isOperatorDefined) {\n      return isOperatorDefined;\n    }\n\n    var parsedValue = valToNumber(value);\n    var isAttributeValueDefined =\n      findArray(this.numericRefinements[attribute][operator], parsedValue) !==\n      undefined;\n\n    return isOperatorDefined && isAttributeValueDefined;\n  },\n  /**\n   * Returns true if the tag refined, false otherwise\n   * @method\n   * @param {string} tag the tag to check\n   * @return {boolean} true if tag is refined\n   */\n  isTagRefined: function isTagRefined(tag) {\n    return this.tagRefinements.indexOf(tag) !== -1;\n  },\n  /**\n   * Returns the list of all disjunctive facets refined\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {value} value value used for filtering\n   * @return {string[]} returns the list of refinements\n   */\n  getRefinedDisjunctiveFacets: function getRefinedDisjunctiveFacets() {\n    // eslint-disable-next-line consistent-this\n    var self = this;\n\n    // attributes used for numeric filter can also be disjunctive\n    var disjunctiveNumericRefinedFacets = intersection(\n      Object.keys(this.numericRefinements).filter(function (facet) {\n        return Object.keys(self.numericRefinements[facet]).length > 0;\n      }),\n      this.disjunctiveFacets\n    );\n\n    return Object.keys(this.disjunctiveFacetsRefinements)\n      .filter(function (facet) {\n        return self.disjunctiveFacetsRefinements[facet].length > 0;\n      })\n      .concat(disjunctiveNumericRefinedFacets)\n      .concat(this.getRefinedHierarchicalFacets())\n      .sort();\n  },\n  /**\n   * Returns the list of all disjunctive facets refined\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {value} value value used for filtering\n   * @return {string[]} returns the list of refinements\n   */\n  getRefinedHierarchicalFacets: function getRefinedHierarchicalFacets() {\n    // eslint-disable-next-line consistent-this\n    var self = this;\n    return intersection(\n      // enforce the order between the two arrays,\n      // so that refinement name index === hierarchical facet index\n      this.hierarchicalFacets.map(function (facet) {\n        return facet.name;\n      }),\n      Object.keys(this.hierarchicalFacetsRefinements).filter(function (facet) {\n        return self.hierarchicalFacetsRefinements[facet].length > 0;\n      })\n    ).sort();\n  },\n  /**\n   * Returned the list of all disjunctive facets not refined\n   * @method\n   * @return {string[]} returns the list of facets that are not refined\n   */\n  getUnrefinedDisjunctiveFacets: function () {\n    var refinedFacets = this.getRefinedDisjunctiveFacets();\n\n    return this.disjunctiveFacets.filter(function (f) {\n      return refinedFacets.indexOf(f) === -1;\n    });\n  },\n\n  managedParameters: [\n    'index',\n\n    'facets',\n    'disjunctiveFacets',\n    'facetsRefinements',\n    'hierarchicalFacets',\n    'facetsExcludes',\n\n    'disjunctiveFacetsRefinements',\n    'numericRefinements',\n    'tagRefinements',\n    'hierarchicalFacetsRefinements',\n  ],\n\n  getQueryParams: function getQueryParams() {\n    var managedParameters = this.managedParameters;\n\n    var queryParams = {};\n\n    // eslint-disable-next-line consistent-this\n    var self = this;\n    Object.keys(this).forEach(function (paramName) {\n      var paramValue = self[paramName];\n      if (\n        managedParameters.indexOf(paramName) === -1 &&\n        paramValue !== undefined\n      ) {\n        queryParams[paramName] = paramValue;\n      }\n    });\n\n    return queryParams;\n  },\n  /**\n   * Let the user set a specific value for a given parameter. Will return the\n   * same instance if the parameter is invalid or if the value is the same as the\n   * previous one.\n   * @method\n   * @param {string} parameter the parameter name\n   * @param {any} value the value to be set, must be compliant with the definition\n   * of the attribute on the object\n   * @return {SearchParameters} the updated state\n   */\n  setQueryParameter: function setParameter(parameter, value) {\n    if (this[parameter] === value) return this;\n\n    var modification = {};\n\n    modification[parameter] = value;\n\n    return this.setQueryParameters(modification);\n  },\n  /**\n   * Let the user set any of the parameters with a plain object.\n   * @method\n   * @param {object} params all the keys and the values to be updated\n   * @return {SearchParameters} a new updated instance\n   */\n  setQueryParameters: function setQueryParameters(params) {\n    if (!params) return this;\n\n    var error = SearchParameters.validate(this, params);\n\n    if (error) {\n      throw error;\n    }\n\n    // eslint-disable-next-line consistent-this\n    var self = this;\n    var nextWithNumbers = SearchParameters._parseNumbers(params);\n    var previousPlainObject = Object.keys(this).reduce(function (acc, key) {\n      acc[key] = self[key];\n      return acc;\n    }, {});\n\n    var nextPlainObject = Object.keys(nextWithNumbers).reduce(function (\n      previous,\n      key\n    ) {\n      var isPreviousValueDefined = previous[key] !== undefined;\n      var isNextValueDefined = nextWithNumbers[key] !== undefined;\n\n      if (isPreviousValueDefined && !isNextValueDefined) {\n        return omit(previous, [key]);\n      }\n\n      if (isNextValueDefined) {\n        previous[key] = nextWithNumbers[key];\n      }\n\n      return previous;\n    },\n    previousPlainObject);\n\n    return new this.constructor(nextPlainObject);\n  },\n\n  /**\n   * Returns a new instance with the page reset. Two scenarios possible:\n   * the page is omitted -> return the given instance\n   * the page is set -> return a new instance with a page of 0\n   * @return {SearchParameters} a new updated instance\n   */\n  resetPage: function () {\n    if (this.page === undefined) {\n      return this;\n    }\n\n    return this.setPage(0);\n  },\n\n  /**\n   * Helper function to get the hierarchicalFacet separator or the default one (`>`)\n   * @param  {object} hierarchicalFacet the hierarchicalFacet object\n   * @return {string} returns the hierarchicalFacet.separator or `>` as default\n   */\n  _getHierarchicalFacetSortBy: function (hierarchicalFacet) {\n    return hierarchicalFacet.sortBy || ['isRefined:desc', 'name:asc'];\n  },\n\n  /**\n   * Helper function to get the hierarchicalFacet separator or the default one (`>`)\n   * @private\n   * @param  {object} hierarchicalFacet the hierarchicalFacet object\n   * @return {string} returns the hierarchicalFacet.separator or `>` as default\n   */\n  _getHierarchicalFacetSeparator: function (hierarchicalFacet) {\n    return hierarchicalFacet.separator || ' > ';\n  },\n\n  /**\n   * Helper function to get the hierarchicalFacet prefix path or null\n   * @private\n   * @param  {object} hierarchicalFacet the hierarchicalFacet object\n   * @return {string} returns the hierarchicalFacet.rootPath or null as default\n   */\n  _getHierarchicalRootPath: function (hierarchicalFacet) {\n    return hierarchicalFacet.rootPath || null;\n  },\n\n  /**\n   * Helper function to check if we show the parent level of the hierarchicalFacet\n   * @private\n   * @param  {object} hierarchicalFacet the hierarchicalFacet object\n   * @return {string} returns the hierarchicalFacet.showParentLevel or true as default\n   */\n  _getHierarchicalShowParentLevel: function (hierarchicalFacet) {\n    if (typeof hierarchicalFacet.showParentLevel === 'boolean') {\n      return hierarchicalFacet.showParentLevel;\n    }\n    return true;\n  },\n\n  /**\n   * Helper function to get the hierarchicalFacet by it's name\n   * @param  {string} hierarchicalFacetName the hierarchicalFacet name\n   * @return {object} a hierarchicalFacet\n   */\n  getHierarchicalFacetByName: function (hierarchicalFacetName) {\n    return find(this.hierarchicalFacets, function (f) {\n      return f.name === hierarchicalFacetName;\n    });\n  },\n\n  /**\n   * Get the current breadcrumb for a hierarchical facet, as an array\n   * @param  {string} facetName Hierarchical facet name\n   * @return {array.<string>} the path as an array of string\n   */\n  getHierarchicalFacetBreadcrumb: function (facetName) {\n    if (!this.isHierarchicalFacet(facetName)) {\n      return [];\n    }\n\n    var refinement = this.getHierarchicalRefinement(facetName)[0];\n    if (!refinement) return [];\n\n    var separator = this._getHierarchicalFacetSeparator(\n      this.getHierarchicalFacetByName(facetName)\n    );\n    var path = refinement.split(separator);\n    return path.map(function (part) {\n      return part.trim();\n    });\n  },\n\n  toString: function () {\n    return JSON.stringify(this, null, 2);\n  },\n};\n\n/**\n * Callback used for clearRefinement method\n * @callback SearchParameters.clearCallback\n * @param {OperatorList|FacetList} value the value of the filter\n * @param {string} key the current attribute name\n * @param {string} type `numeric`, `disjunctiveFacet`, `conjunctiveFacet`, `hierarchicalFacet` or `exclude`\n * depending on the type of facet\n * @return {boolean} `true` if the element should be removed. `false` otherwise.\n */\nmodule.exports = SearchParameters;\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 2159, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2164, "column": 0}, "map": {"version":3,"sources":["file:///root/webmakerr/storefront/node_modules/algoliasearch-helper/src/functions/compact.js"],"sourcesContent":["'use strict';\n\nmodule.exports = function compact(array) {\n  if (!Array.isArray(array)) {\n    return [];\n  }\n\n  return array.filter(Boolean);\n};\n"],"names":[],"mappings":"AAAA;AAEA,OAAO,OAAO,GAAG,SAAS,QAAQ,KAAK;IACrC,IAAI,CAAC,MAAM,OAAO,CAAC,QAAQ;QACzB,OAAO,EAAE;IACX;IAEA,OAAO,MAAM,MAAM,CAAC;AACtB","ignoreList":[0]}},
    {"offset": {"line": 2171, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2176, "column": 0}, "map": {"version":3,"sources":["file:///root/webmakerr/storefront/node_modules/algoliasearch-helper/src/functions/findIndex.js"],"sourcesContent":["'use strict';\n\n// @MAJOR can be replaced by native Array#findIndex when we change support\nmodule.exports = function find(array, comparator) {\n  if (!Array.isArray(array)) {\n    return -1;\n  }\n\n  for (var i = 0; i < array.length; i++) {\n    if (comparator(array[i])) {\n      return i;\n    }\n  }\n  return -1;\n};\n"],"names":[],"mappings":"AAAA;AAEA,0EAA0E;AAC1E,OAAO,OAAO,GAAG,SAAS,KAAK,KAAK,EAAE,UAAU;IAC9C,IAAI,CAAC,MAAM,OAAO,CAAC,QAAQ;QACzB,OAAO,CAAC;IACV;IAEA,IAAK,IAAI,IAAI,GAAG,IAAI,MAAM,MAAM,EAAE,IAAK;QACrC,IAAI,WAAW,KAAK,CAAC,EAAE,GAAG;YACxB,OAAO;QACT;IACF;IACA,OAAO,CAAC;AACV","ignoreList":[0]}},
    {"offset": {"line": 2189, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2194, "column": 0}, "map": {"version":3,"sources":["file:///root/webmakerr/storefront/node_modules/algoliasearch-helper/src/functions/formatSort.js"],"sourcesContent":["'use strict';\n\nvar find = require('./find');\n\n/**\n * Transform sort format from user friendly notation to lodash format\n * @param {string[]} sortBy array of predicate of the form \"attribute:order\"\n * @param {string[]} [defaults] array of predicate of the form \"attribute:order\"\n * @return {array.<string[]>} array containing 2 elements : attributes, orders\n */\nmodule.exports = function formatSort(sortBy, defaults) {\n  var defaultInstructions = (defaults || []).map(function (sort) {\n    return sort.split(':');\n  });\n\n  return sortBy.reduce(\n    function preparePredicate(out, sort) {\n      var sortInstruction = sort.split(':');\n\n      var matchingDefault = find(\n        defaultInstructions,\n        function (defaultInstruction) {\n          return defaultInstruction[0] === sortInstruction[0];\n        }\n      );\n\n      if (sortInstruction.length > 1 || !matchingDefault) {\n        out[0].push(sortInstruction[0]);\n        out[1].push(sortInstruction[1]);\n        return out;\n      }\n\n      out[0].push(matchingDefault[0]);\n      out[1].push(matchingDefault[1]);\n      return out;\n    },\n    [[], []]\n  );\n};\n"],"names":[],"mappings":"AAAA;AAEA,IAAI;AAEJ;;;;;CAKC,GACD,OAAO,OAAO,GAAG,SAAS,WAAW,MAAM,EAAE,QAAQ;IACnD,IAAI,sBAAsB,CAAC,YAAY,EAAE,EAAE,GAAG,CAAC,SAAU,IAAI;QAC3D,OAAO,KAAK,KAAK,CAAC;IACpB;IAEA,OAAO,OAAO,MAAM,CAClB,SAAS,iBAAiB,GAAG,EAAE,IAAI;QACjC,IAAI,kBAAkB,KAAK,KAAK,CAAC;QAEjC,IAAI,kBAAkB,KACpB,qBACA,SAAU,kBAAkB;YAC1B,OAAO,kBAAkB,CAAC,EAAE,KAAK,eAAe,CAAC,EAAE;QACrD;QAGF,IAAI,gBAAgB,MAAM,GAAG,KAAK,CAAC,iBAAiB;YAClD,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,eAAe,CAAC,EAAE;YAC9B,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,eAAe,CAAC,EAAE;YAC9B,OAAO;QACT;QAEA,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,eAAe,CAAC,EAAE;QAC9B,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,eAAe,CAAC,EAAE;QAC9B,OAAO;IACT,GACA;QAAC,EAAE;QAAE,EAAE;KAAC;AAEZ","ignoreList":[0]}},
    {"offset": {"line": 2223, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2228, "column": 0}, "map": {"version":3,"sources":["file:///root/webmakerr/storefront/node_modules/algoliasearch-helper/src/functions/mergeNumericMax.js"],"sourcesContent":["'use strict';\n\n// NOTE: this behaves like lodash/defaults, but doesn't mutate the target\n// it also preserve keys order and keep the highest numeric value\nfunction mergeNumericMax() {\n  var sources = Array.prototype.slice.call(arguments);\n\n  return sources.reduceRight(function (acc, source) {\n    Object.keys(Object(source)).forEach(function (key) {\n      var accValue = typeof acc[key] === 'number' ? acc[key] : 0;\n      var sourceValue = source[key];\n\n      if (sourceValue === undefined) {\n        return;\n      }\n\n      if (sourceValue >= accValue) {\n        if (acc[key] !== undefined) {\n          // remove if already added, so that we can add it in correct order\n          delete acc[key];\n        }\n        acc[key] = sourceValue;\n      }\n    });\n    return acc;\n  }, {});\n}\n\nmodule.exports = mergeNumericMax;\n"],"names":[],"mappings":"AAAA;AAEA,yEAAyE;AACzE,iEAAiE;AACjE,SAAS;IACP,IAAI,UAAU,MAAM,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC;IAEzC,OAAO,QAAQ,WAAW,CAAC,SAAU,GAAG,EAAE,MAAM;QAC9C,OAAO,IAAI,CAAC,OAAO,SAAS,OAAO,CAAC,SAAU,GAAG;YAC/C,IAAI,WAAW,OAAO,GAAG,CAAC,IAAI,KAAK,WAAW,GAAG,CAAC,IAAI,GAAG;YACzD,IAAI,cAAc,MAAM,CAAC,IAAI;YAE7B,IAAI,gBAAgB,WAAW;gBAC7B;YACF;YAEA,IAAI,eAAe,UAAU;gBAC3B,IAAI,GAAG,CAAC,IAAI,KAAK,WAAW;oBAC1B,kEAAkE;oBAClE,OAAO,GAAG,CAAC,IAAI;gBACjB;gBACA,GAAG,CAAC,IAAI,GAAG;YACb;QACF;QACA,OAAO;IACT,GAAG,CAAC;AACN;AAEA,OAAO,OAAO,GAAG","ignoreList":[0]}},
    {"offset": {"line": 2252, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2257, "column": 0}, "map": {"version":3,"sources":["file:///root/webmakerr/storefront/node_modules/algoliasearch-helper/src/functions/orderBy.js"],"sourcesContent":["'use strict';\n\nfunction compareAscending(value, other) {\n  if (value !== other) {\n    var valIsDefined = value !== undefined;\n    var valIsNull = value === null;\n\n    var othIsDefined = other !== undefined;\n    var othIsNull = other === null;\n\n    if (\n      (!othIsNull && value > other) ||\n      (valIsNull && othIsDefined) ||\n      !valIsDefined\n    ) {\n      return 1;\n    }\n    if (\n      (!valIsNull && value < other) ||\n      (othIsNull && valIsDefined) ||\n      !othIsDefined\n    ) {\n      return -1;\n    }\n  }\n  return 0;\n}\n\n/**\n * @param {Array<object>} collection object with keys in attributes\n * @param {Array<string>} iteratees attributes\n * @param {Array<string>} orders asc | desc\n * @return {Array<object>} sorted collection\n */\nfunction orderBy(collection, iteratees, orders) {\n  if (!Array.isArray(collection)) {\n    return [];\n  }\n\n  if (!Array.isArray(orders)) {\n    orders = [];\n  }\n\n  var result = collection.map(function (value, index) {\n    return {\n      criteria: iteratees.map(function (iteratee) {\n        return value[iteratee];\n      }),\n      index: index,\n      value: value,\n    };\n  });\n\n  result.sort(function comparer(object, other) {\n    var index = -1;\n\n    while (++index < object.criteria.length) {\n      var res = compareAscending(object.criteria[index], other.criteria[index]);\n      if (res) {\n        if (index >= orders.length) {\n          return res;\n        }\n        if (orders[index] === 'desc') {\n          return -res;\n        }\n        return res;\n      }\n    }\n\n    // This ensures a stable sort in V8 and other engines.\n    // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.\n    return object.index - other.index;\n  });\n\n  return result.map(function (res) {\n    return res.value;\n  });\n}\n\nmodule.exports = orderBy;\n"],"names":[],"mappings":"AAAA;AAEA,SAAS,iBAAiB,KAAK,EAAE,KAAK;IACpC,IAAI,UAAU,OAAO;QACnB,IAAI,eAAe,UAAU;QAC7B,IAAI,YAAY,UAAU;QAE1B,IAAI,eAAe,UAAU;QAC7B,IAAI,YAAY,UAAU;QAE1B,IACE,AAAC,CAAC,aAAa,QAAQ,SACtB,aAAa,gBACd,CAAC,cACD;YACA,OAAO;QACT;QACA,IACE,AAAC,CAAC,aAAa,QAAQ,SACtB,aAAa,gBACd,CAAC,cACD;YACA,OAAO,CAAC;QACV;IACF;IACA,OAAO;AACT;AAEA;;;;;CAKC,GACD,SAAS,QAAQ,UAAU,EAAE,SAAS,EAAE,MAAM;IAC5C,IAAI,CAAC,MAAM,OAAO,CAAC,aAAa;QAC9B,OAAO,EAAE;IACX;IAEA,IAAI,CAAC,MAAM,OAAO,CAAC,SAAS;QAC1B,SAAS,EAAE;IACb;IAEA,IAAI,SAAS,WAAW,GAAG,CAAC,SAAU,KAAK,EAAE,KAAK;QAChD,OAAO;YACL,UAAU,UAAU,GAAG,CAAC,SAAU,QAAQ;gBACxC,OAAO,KAAK,CAAC,SAAS;YACxB;YACA,OAAO;YACP,OAAO;QACT;IACF;IAEA,OAAO,IAAI,CAAC,SAAS,SAAS,MAAM,EAAE,KAAK;QACzC,IAAI,QAAQ,CAAC;QAEb,MAAO,EAAE,QAAQ,OAAO,QAAQ,CAAC,MAAM,CAAE;YACvC,IAAI,MAAM,iBAAiB,OAAO,QAAQ,CAAC,MAAM,EAAE,MAAM,QAAQ,CAAC,MAAM;YACxE,IAAI,KAAK;gBACP,IAAI,SAAS,OAAO,MAAM,EAAE;oBAC1B,OAAO;gBACT;gBACA,IAAI,MAAM,CAAC,MAAM,KAAK,QAAQ;oBAC5B,OAAO,CAAC;gBACV;gBACA,OAAO;YACT;QACF;QAEA,sDAAsD;QACtD,2EAA2E;QAC3E,OAAO,OAAO,KAAK,GAAG,MAAM,KAAK;IACnC;IAEA,OAAO,OAAO,GAAG,CAAC,SAAU,GAAG;QAC7B,OAAO,IAAI,KAAK;IAClB;AACF;AAEA,OAAO,OAAO,GAAG","ignoreList":[0]}},
    {"offset": {"line": 2317, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2322, "column": 0}, "map": {"version":3,"sources":["file:///root/webmakerr/storefront/node_modules/algoliasearch-helper/src/SearchResults/generate-hierarchical-tree.js"],"sourcesContent":["'use strict';\n\nmodule.exports = generateTrees;\n\nvar fv = require('../functions/escapeFacetValue');\nvar find = require('../functions/find');\nvar prepareHierarchicalFacetSortBy = require('../functions/formatSort');\nvar orderBy = require('../functions/orderBy');\nvar escapeFacetValue = fv.escapeFacetValue;\nvar unescapeFacetValue = fv.unescapeFacetValue;\n\nfunction generateTrees(state) {\n  return function generate(hierarchicalFacetResult, hierarchicalFacetIndex) {\n    var hierarchicalFacet = state.hierarchicalFacets[hierarchicalFacetIndex];\n    var hierarchicalFacetRefinement =\n      (state.hierarchicalFacetsRefinements[hierarchicalFacet.name] &&\n        state.hierarchicalFacetsRefinements[hierarchicalFacet.name][0]) ||\n      '';\n    var hierarchicalSeparator =\n      state._getHierarchicalFacetSeparator(hierarchicalFacet);\n    var hierarchicalRootPath =\n      state._getHierarchicalRootPath(hierarchicalFacet);\n    var hierarchicalShowParentLevel =\n      state._getHierarchicalShowParentLevel(hierarchicalFacet);\n    var sortBy = prepareHierarchicalFacetSortBy(\n      state._getHierarchicalFacetSortBy(hierarchicalFacet)\n    );\n\n    var rootExhaustive = hierarchicalFacetResult.every(function (facetResult) {\n      return facetResult.exhaustive;\n    });\n\n    var generateTreeFn = generateHierarchicalTree(\n      sortBy,\n      hierarchicalSeparator,\n      hierarchicalRootPath,\n      hierarchicalShowParentLevel,\n      hierarchicalFacetRefinement\n    );\n\n    var results = hierarchicalFacetResult;\n\n    if (hierarchicalRootPath) {\n      results = hierarchicalFacetResult.slice(\n        hierarchicalRootPath.split(hierarchicalSeparator).length\n      );\n    }\n\n    return results.reduce(generateTreeFn, {\n      name: state.hierarchicalFacets[hierarchicalFacetIndex].name,\n      count: null, // root level, no count\n      isRefined: true, // root level, always refined\n      path: null, // root level, no path\n      escapedValue: null,\n      exhaustive: rootExhaustive,\n      data: null,\n    });\n  };\n}\n\nfunction generateHierarchicalTree(\n  sortBy,\n  hierarchicalSeparator,\n  hierarchicalRootPath,\n  hierarchicalShowParentLevel,\n  currentRefinement\n) {\n  return function generateTree(\n    hierarchicalTree,\n    hierarchicalFacetResult,\n    currentHierarchicalLevel\n  ) {\n    var parent = hierarchicalTree;\n\n    if (currentHierarchicalLevel > 0) {\n      var level = 0;\n\n      parent = hierarchicalTree;\n\n      while (level < currentHierarchicalLevel) {\n        /**\n         * @type {object[]]} hierarchical data\n         */\n        var data = parent && Array.isArray(parent.data) ? parent.data : [];\n        parent = find(data, function (subtree) {\n          return subtree.isRefined;\n        });\n        level++;\n      }\n    }\n\n    // we found a refined parent, let's add current level data under it\n    if (parent) {\n      // filter values in case an object has multiple categories:\n      //   {\n      //     categories: {\n      //       level0: ['beers', 'bières'],\n      //       level1: ['beers > IPA', 'bières > Belges']\n      //     }\n      //   }\n      //\n      // If parent refinement is `beers`, then we do not want to have `bières > Belges`\n      // showing up\n\n      var picked = Object.keys(hierarchicalFacetResult.data)\n        .map(function (facetValue) {\n          return [facetValue, hierarchicalFacetResult.data[facetValue]];\n        })\n        .filter(function (tuple) {\n          var facetValue = tuple[0];\n          return onlyMatchingTree(\n            facetValue,\n            parent.path || hierarchicalRootPath,\n            currentRefinement,\n            hierarchicalSeparator,\n            hierarchicalRootPath,\n            hierarchicalShowParentLevel\n          );\n        });\n\n      parent.data = orderBy(\n        picked.map(function (tuple) {\n          var facetValue = tuple[0];\n          var facetCount = tuple[1];\n\n          return format(\n            facetCount,\n            facetValue,\n            hierarchicalSeparator,\n            unescapeFacetValue(currentRefinement),\n            hierarchicalFacetResult.exhaustive\n          );\n        }),\n        sortBy[0],\n        sortBy[1]\n      );\n    }\n\n    return hierarchicalTree;\n  };\n}\n\n// eslint-disable-next-line max-params\nfunction onlyMatchingTree(\n  facetValue,\n  parentPath,\n  currentRefinement,\n  hierarchicalSeparator,\n  hierarchicalRootPath,\n  hierarchicalShowParentLevel\n) {\n  // we want the facetValue is a child of hierarchicalRootPath\n  if (\n    hierarchicalRootPath &&\n    (facetValue.indexOf(hierarchicalRootPath) !== 0 ||\n      hierarchicalRootPath === facetValue)\n  ) {\n    return false;\n  }\n\n  // we always want root levels (only when there is no prefix path)\n  return (\n    (!hierarchicalRootPath &&\n      facetValue.indexOf(hierarchicalSeparator) === -1) ||\n    // if there is a rootPath, being root level mean 1 level under rootPath\n    (hierarchicalRootPath &&\n      facetValue.split(hierarchicalSeparator).length -\n        hierarchicalRootPath.split(hierarchicalSeparator).length ===\n        1) ||\n    // if current refinement is a root level and current facetValue is a root level,\n    // keep the facetValue\n    (facetValue.indexOf(hierarchicalSeparator) === -1 &&\n      currentRefinement.indexOf(hierarchicalSeparator) === -1) ||\n    // currentRefinement is a child of the facet value\n    currentRefinement.indexOf(facetValue) === 0 ||\n    // facetValue is a child of the current parent, add it\n    (facetValue.indexOf(parentPath + hierarchicalSeparator) === 0 &&\n      (hierarchicalShowParentLevel ||\n        facetValue.indexOf(currentRefinement) === 0))\n  );\n}\n\nfunction format(\n  facetCount,\n  facetValue,\n  hierarchicalSeparator,\n  currentRefinement,\n  exhaustive\n) {\n  var parts = facetValue.split(hierarchicalSeparator);\n  return {\n    name: parts[parts.length - 1].trim(),\n    path: facetValue,\n    escapedValue: escapeFacetValue(facetValue),\n    count: facetCount,\n    isRefined:\n      currentRefinement === facetValue ||\n      currentRefinement.indexOf(facetValue + hierarchicalSeparator) === 0,\n    exhaustive: exhaustive,\n    data: null,\n  };\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 2425, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2430, "column": 0}, "map": {"version":3,"sources":["file:///root/webmakerr/storefront/node_modules/algoliasearch-helper/src/SearchResults/index.js"],"sourcesContent":["'use strict';\n\nvar compact = require('../functions/compact');\nvar defaultsPure = require('../functions/defaultsPure');\nvar fv = require('../functions/escapeFacetValue');\nvar find = require('../functions/find');\nvar findIndex = require('../functions/findIndex');\nvar formatSort = require('../functions/formatSort');\nvar mergeNumericMax = require('../functions/mergeNumericMax');\nvar orderBy = require('../functions/orderBy');\nvar escapeFacetValue = fv.escapeFacetValue;\nvar unescapeFacetValue = fv.unescapeFacetValue;\n\nvar generateHierarchicalTree = require('./generate-hierarchical-tree');\n\n/**\n * @typedef SearchResults.Facet\n * @type {object}\n * @property {string} name name of the attribute in the record\n * @property {object} data the faceting data: value, number of entries\n * @property {object} stats undefined unless facet_stats is retrieved from algolia\n */\n\n/**\n * @typedef SearchResults.HierarchicalFacet\n * @type {object}\n * @property {string} name name of the current value given the hierarchical level, trimmed.\n * If root node, you get the facet name\n * @property {number} count number of objects matching this hierarchical value\n * @property {string} path the current hierarchical value full path\n * @property {boolean} isRefined `true` if the current value was refined, `false` otherwise\n * @property {HierarchicalFacet[]} data sub values for the current level\n */\n\n/**\n * @typedef SearchResults.FacetValue\n * @type {object}\n * @property {string} name the facet value itself\n * @property {number} count times this facet appears in the results\n * @property {boolean} isRefined is the facet currently selected\n * @property {boolean} isExcluded is the facet currently excluded (only for conjunctive facets)\n */\n\n/**\n * @typedef Refinement\n * @type {object}\n * @property {string} type the type of filter used:\n * `numeric`, `facet`, `exclude`, `disjunctive`, `hierarchical`\n * @property {string} attributeName name of the attribute used for filtering\n * @property {string} name the value of the filter\n * @property {number} numericValue the value as a number. Only for numeric filters.\n * @property {string} operator the operator used. Only for numeric filters.\n * @property {number} count the number of computed hits for this filter. Only on facets.\n * @property {boolean} exhaustive if the count is exhaustive\n */\n\n/**\n * Turn an array of attributes in an object of attributes with their position in the array as value\n * @param {string[]} attributes the list of attributes in the record\n * @return {object} the list of attributes indexed by attribute name\n */\nfunction getIndices(attributes) {\n  var indices = {};\n\n  attributes.forEach(function (val, idx) {\n    indices[val] = idx;\n  });\n\n  return indices;\n}\n\nfunction assignFacetStats(dest, facetStats, key) {\n  if (facetStats && facetStats[key]) {\n    dest.stats = facetStats[key];\n  }\n}\n\n/**\n * @typedef {Object} HierarchicalFacet\n * @property {string} name\n * @property {string[]} attributes\n */\n\n/**\n * @param {HierarchicalFacet[]} hierarchicalFacets All hierarchical facets\n * @param {string} hierarchicalAttributeName The name of the hierarchical attribute\n * @return {HierarchicalFacet} The hierarchical facet matching the attribute name\n */\nfunction findMatchingHierarchicalFacetFromAttributeName(\n  hierarchicalFacets,\n  hierarchicalAttributeName\n) {\n  return find(\n    hierarchicalFacets,\n    function facetKeyMatchesAttribute(hierarchicalFacet) {\n      var facetNames = hierarchicalFacet.attributes || [];\n      return facetNames.indexOf(hierarchicalAttributeName) > -1;\n    }\n  );\n}\n\n/**\n * Constructor for SearchResults\n * @class\n * @classdesc SearchResults contains the results of a query to Algolia using the\n * {@link AlgoliaSearchHelper}.\n * @param {SearchParameters} state state that led to the response\n * @param {array.<object>} results the results from algolia client\n * @param {object} options options to control results content\n * @example <caption>SearchResults of the first query in\n * <a href=\"http://demos.algolia.com/instant-search-demo\">the instant search demo</a></caption>\n{\n   \"hitsPerPage\": 10,\n   \"processingTimeMS\": 2,\n   \"facets\": [\n      {\n         \"name\": \"type\",\n         \"data\": {\n            \"HardGood\": 6627,\n            \"BlackTie\": 550,\n            \"Music\": 665,\n            \"Software\": 131,\n            \"Game\": 456,\n            \"Movie\": 1571\n         },\n         \"exhaustive\": false\n      },\n      {\n         \"exhaustive\": false,\n         \"data\": {\n            \"Free shipping\": 5507\n         },\n         \"name\": \"shipping\"\n      }\n  ],\n   \"hits\": [\n      {\n         \"thumbnailImage\": \"http://img.bbystatic.com/BestBuy_US/images/products/1688/1688832_54x108_s.gif\",\n         \"_highlightResult\": {\n            \"shortDescription\": {\n               \"matchLevel\": \"none\",\n               \"value\": \"Safeguard your PC, Mac, Android and iOS devices with comprehensive Internet protection\",\n               \"matchedWords\": []\n            },\n            \"category\": {\n               \"matchLevel\": \"none\",\n               \"value\": \"Computer Security Software\",\n               \"matchedWords\": []\n            },\n            \"manufacturer\": {\n               \"matchedWords\": [],\n               \"value\": \"Webroot\",\n               \"matchLevel\": \"none\"\n            },\n            \"name\": {\n               \"value\": \"Webroot SecureAnywhere Internet Security (3-Device) (1-Year Subscription) - Mac/Windows\",\n               \"matchedWords\": [],\n               \"matchLevel\": \"none\"\n            }\n         },\n         \"image\": \"http://img.bbystatic.com/BestBuy_US/images/products/1688/1688832_105x210_sc.jpg\",\n         \"shipping\": \"Free shipping\",\n         \"bestSellingRank\": 4,\n         \"shortDescription\": \"Safeguard your PC, Mac, Android and iOS devices with comprehensive Internet protection\",\n         \"url\": \"http://www.bestbuy.com/site/webroot-secureanywhere-internet-security-3-devi…d=1219060687969&skuId=1688832&cmp=RMX&ky=2d3GfEmNIzjA0vkzveHdZEBgpPCyMnLTJ\",\n         \"name\": \"Webroot SecureAnywhere Internet Security (3-Device) (1-Year Subscription) - Mac/Windows\",\n         \"category\": \"Computer Security Software\",\n         \"salePrice_range\": \"1 - 50\",\n         \"objectID\": \"1688832\",\n         \"type\": \"Software\",\n         \"customerReviewCount\": 5980,\n         \"salePrice\": 49.99,\n         \"manufacturer\": \"Webroot\"\n      },\n      ....\n  ],\n   \"nbHits\": 10000,\n   \"disjunctiveFacets\": [\n      {\n         \"exhaustive\": false,\n         \"data\": {\n            \"5\": 183,\n            \"12\": 112,\n            \"7\": 149,\n            ...\n         },\n         \"name\": \"customerReviewCount\",\n         \"stats\": {\n            \"max\": 7461,\n            \"avg\": 157.939,\n            \"min\": 1\n         }\n      },\n      {\n         \"data\": {\n            \"Printer Ink\": 142,\n            \"Wireless Speakers\": 60,\n            \"Point & Shoot Cameras\": 48,\n            ...\n         },\n         \"name\": \"category\",\n         \"exhaustive\": false\n      },\n      {\n         \"exhaustive\": false,\n         \"data\": {\n            \"> 5000\": 2,\n            \"1 - 50\": 6524,\n            \"501 - 2000\": 566,\n            \"201 - 500\": 1501,\n            \"101 - 200\": 1360,\n            \"2001 - 5000\": 47\n         },\n         \"name\": \"salePrice_range\"\n      },\n      {\n         \"data\": {\n            \"Dynex™\": 202,\n            \"Insignia™\": 230,\n            \"PNY\": 72,\n            ...\n         },\n         \"name\": \"manufacturer\",\n         \"exhaustive\": false\n      }\n  ],\n   \"query\": \"\",\n   \"nbPages\": 100,\n   \"page\": 0,\n   \"index\": \"bestbuy\"\n}\n **/\nfunction SearchResults(state, results, options) {\n  var mainSubResponse = results[0] || {};\n\n  this._rawResults = results;\n\n  // eslint-disable-next-line consistent-this\n  var self = this;\n\n  // https://www.algolia.com/doc/api-reference/api-methods/search/#response\n  Object.keys(mainSubResponse).forEach(function (key) {\n    self[key] = mainSubResponse[key];\n  });\n\n  // Make every key of the result options reachable from the instance\n  var opts = defaultsPure(options, {\n    persistHierarchicalRootCount: false,\n  });\n  Object.keys(opts).forEach(function (key) {\n    self[key] = opts[key];\n  });\n\n  /**\n   * query used to generate the results\n   * @name query\n   * @member {string}\n   * @memberof SearchResults\n   * @instance\n   */\n  /**\n   * The query as parsed by the engine given all the rules.\n   * @name parsedQuery\n   * @member {string}\n   * @memberof SearchResults\n   * @instance\n   */\n  /**\n   * all the records that match the search parameters. Each record is\n   * augmented with a new attribute `_highlightResult`\n   * which is an object keyed by attribute and with the following properties:\n   * - `value` : the value of the facet highlighted (html)\n   * - `matchLevel`: `full`, `partial` or `none`, depending on how the query terms match\n   * @name hits\n   * @member {object[]}\n   * @memberof SearchResults\n   * @instance\n   */\n  /**\n   * index where the results come from\n   * @name index\n   * @member {string}\n   * @memberof SearchResults\n   * @instance\n   */\n  /**\n   * number of hits per page requested\n   * @name hitsPerPage\n   * @member {number}\n   * @memberof SearchResults\n   * @instance\n   */\n  /**\n   * total number of hits of this query on the index\n   * @name nbHits\n   * @member {number}\n   * @memberof SearchResults\n   * @instance\n   */\n  /**\n   * total number of pages with respect to the number of hits per page and the total number of hits\n   * @name nbPages\n   * @member {number}\n   * @memberof SearchResults\n   * @instance\n   */\n  /**\n   * current page\n   * @name page\n   * @member {number}\n   * @memberof SearchResults\n   * @instance\n   */\n  /**\n   * The position if the position was guessed by IP.\n   * @name aroundLatLng\n   * @member {string}\n   * @memberof SearchResults\n   * @instance\n   * @example \"48.8637,2.3615\",\n   */\n  /**\n   * The radius computed by Algolia.\n   * @name automaticRadius\n   * @member {string}\n   * @memberof SearchResults\n   * @instance\n   * @example \"126792922\",\n   */\n  /**\n   * String identifying the server used to serve this request.\n   *\n   * getRankingInfo needs to be set to `true` for this to be returned\n   *\n   * @name serverUsed\n   * @member {string}\n   * @memberof SearchResults\n   * @instance\n   * @example \"c7-use-2.algolia.net\",\n   */\n  /**\n   * Boolean that indicates if the computation of the counts did time out.\n   * @deprecated\n   * @name timeoutCounts\n   * @member {boolean}\n   * @memberof SearchResults\n   * @instance\n   */\n  /**\n   * Boolean that indicates if the computation of the hits did time out.\n   * @deprecated\n   * @name timeoutHits\n   * @member {boolean}\n   * @memberof SearchResults\n   * @instance\n   */\n  /**\n   * True if the counts of the facets is exhaustive\n   * @name exhaustiveFacetsCount\n   * @member {boolean}\n   * @memberof SearchResults\n   * @instance\n   */\n  /**\n   * True if the number of hits is exhaustive\n   * @name exhaustiveNbHits\n   * @member {boolean}\n   * @memberof SearchResults\n   * @instance\n   */\n  /**\n   * Contains the userData if they are set by a [query rule](https://www.algolia.com/doc/guides/query-rules/query-rules-overview/).\n   * @name userData\n   * @member {object[]}\n   * @memberof SearchResults\n   * @instance\n   */\n  /**\n   * queryID is the unique identifier of the query used to generate the current search results.\n   * This value is only available if the `clickAnalytics` search parameter is set to `true`.\n   * @name queryID\n   * @member {string}\n   * @memberof SearchResults\n   * @instance\n   */\n\n  /**\n   * sum of the processing time of all the queries\n   * @name processingTimeMS\n   * @member {number}\n   * @memberof SearchResults\n   * @instance\n   */\n  this.processingTimeMS = results.reduce(function (sum, result) {\n    return result.processingTimeMS === undefined\n      ? sum\n      : sum + result.processingTimeMS;\n  }, 0);\n\n  /**\n   * disjunctive facets results\n   * @member {SearchResults.Facet[]}\n   */\n  this.disjunctiveFacets = [];\n  /**\n   * disjunctive facets results\n   * @member {SearchResults.HierarchicalFacet[]}\n   */\n  this.hierarchicalFacets = state.hierarchicalFacets.map(\n    function initFutureTree() {\n      return [];\n    }\n  );\n  /**\n   * other facets results\n   * @member {SearchResults.Facet[]}\n   */\n  this.facets = [];\n\n  var disjunctiveFacets = state.getRefinedDisjunctiveFacets();\n\n  var facetsIndices = getIndices(state.facets);\n  var disjunctiveFacetsIndices = getIndices(state.disjunctiveFacets);\n  var nextDisjunctiveResult = 1;\n\n  // Since we send request only for disjunctive facets that have been refined,\n  // we get the facets information from the first, general, response.\n\n  var mainFacets = mainSubResponse.facets || {};\n\n  Object.keys(mainFacets).forEach(function (facetKey) {\n    var facetValueObject = mainFacets[facetKey];\n\n    var hierarchicalFacet = findMatchingHierarchicalFacetFromAttributeName(\n      state.hierarchicalFacets,\n      facetKey\n    );\n\n    if (hierarchicalFacet) {\n      // Place the hierarchicalFacet data at the correct index depending on\n      // the attributes order that was defined at the helper initialization\n      var facetIndex = hierarchicalFacet.attributes.indexOf(facetKey);\n      var idxAttributeName = findIndex(state.hierarchicalFacets, function (f) {\n        return f.name === hierarchicalFacet.name;\n      });\n      self.hierarchicalFacets[idxAttributeName][facetIndex] = {\n        attribute: facetKey,\n        data: facetValueObject,\n        exhaustive: mainSubResponse.exhaustiveFacetsCount,\n      };\n    } else {\n      var isFacetDisjunctive = state.disjunctiveFacets.indexOf(facetKey) !== -1;\n      var isFacetConjunctive = state.facets.indexOf(facetKey) !== -1;\n      var position;\n\n      if (isFacetDisjunctive) {\n        position = disjunctiveFacetsIndices[facetKey];\n        self.disjunctiveFacets[position] = {\n          name: facetKey,\n          data: facetValueObject,\n          exhaustive: mainSubResponse.exhaustiveFacetsCount,\n        };\n        assignFacetStats(\n          self.disjunctiveFacets[position],\n          mainSubResponse.facets_stats,\n          facetKey\n        );\n      }\n      if (isFacetConjunctive) {\n        position = facetsIndices[facetKey];\n        self.facets[position] = {\n          name: facetKey,\n          data: facetValueObject,\n          exhaustive: mainSubResponse.exhaustiveFacetsCount,\n        };\n        assignFacetStats(\n          self.facets[position],\n          mainSubResponse.facets_stats,\n          facetKey\n        );\n      }\n    }\n  });\n\n  // Make sure we do not keep holes within the hierarchical facets\n  this.hierarchicalFacets = compact(this.hierarchicalFacets);\n\n  // aggregate the refined disjunctive facets\n  disjunctiveFacets.forEach(function (disjunctiveFacet) {\n    var result = results[nextDisjunctiveResult];\n    var facets = result && result.facets ? result.facets : {};\n    var hierarchicalFacet = state.getHierarchicalFacetByName(disjunctiveFacet);\n\n    // There should be only item in facets.\n    Object.keys(facets).forEach(function (dfacet) {\n      var facetResults = facets[dfacet];\n\n      var position;\n\n      if (hierarchicalFacet) {\n        position = findIndex(state.hierarchicalFacets, function (f) {\n          return f.name === hierarchicalFacet.name;\n        });\n        var attributeIndex = findIndex(\n          self.hierarchicalFacets[position],\n          function (f) {\n            return f.attribute === dfacet;\n          }\n        );\n\n        // previous refinements and no results so not able to find it\n        if (attributeIndex === -1) {\n          return;\n        }\n\n        self.hierarchicalFacets[position][attributeIndex].data =\n          self.persistHierarchicalRootCount\n            ? mergeNumericMax(\n                self.hierarchicalFacets[position][attributeIndex].data,\n                facetResults\n              )\n            : defaultsPure(\n                facetResults,\n                self.hierarchicalFacets[position][attributeIndex].data\n              );\n      } else {\n        position = disjunctiveFacetsIndices[dfacet];\n\n        var dataFromMainRequest =\n          (mainSubResponse.facets && mainSubResponse.facets[dfacet]) || {};\n\n        self.disjunctiveFacets[position] = {\n          name: dfacet,\n          data: mergeNumericMax(dataFromMainRequest, facetResults),\n          exhaustive: result.exhaustiveFacetsCount,\n        };\n        assignFacetStats(\n          self.disjunctiveFacets[position],\n          result.facets_stats,\n          dfacet\n        );\n\n        if (state.disjunctiveFacetsRefinements[dfacet]) {\n          state.disjunctiveFacetsRefinements[dfacet].forEach(function (\n            refinementValue\n          ) {\n            // add the disjunctive refinements if it is no more retrieved\n            if (\n              !self.disjunctiveFacets[position].data[refinementValue] &&\n              state.disjunctiveFacetsRefinements[dfacet].indexOf(\n                unescapeFacetValue(refinementValue)\n              ) > -1\n            ) {\n              self.disjunctiveFacets[position].data[refinementValue] = 0;\n            }\n          });\n        }\n      }\n    });\n    nextDisjunctiveResult++;\n  });\n\n  // if we have some parent level values for hierarchical facets, merge them\n  state.getRefinedHierarchicalFacets().forEach(function (refinedFacet) {\n    var hierarchicalFacet = state.getHierarchicalFacetByName(refinedFacet);\n    var separator = state._getHierarchicalFacetSeparator(hierarchicalFacet);\n\n    var currentRefinement = state.getHierarchicalRefinement(refinedFacet);\n    // if we are already at a root refinement (or no refinement at all), there is no\n    // root level values request\n    if (\n      currentRefinement.length === 0 ||\n      currentRefinement[0].split(separator).length < 2\n    ) {\n      return;\n    }\n\n    results.slice(nextDisjunctiveResult).forEach(function (result) {\n      var facets = result && result.facets ? result.facets : {};\n\n      Object.keys(facets).forEach(function (dfacet) {\n        var facetResults = facets[dfacet];\n        var position = findIndex(state.hierarchicalFacets, function (f) {\n          return f.name === hierarchicalFacet.name;\n        });\n        var attributeIndex = findIndex(\n          self.hierarchicalFacets[position],\n          function (f) {\n            return f.attribute === dfacet;\n          }\n        );\n\n        // previous refinements and no results so not able to find it\n        if (attributeIndex === -1) {\n          return;\n        }\n\n        // when we always get root levels, if the hits refinement is `beers > IPA` (count: 5),\n        // then the disjunctive values will be `beers` (count: 100),\n        // but we do not want to display\n        //   | beers (100)\n        //     > IPA (5)\n        // We want\n        //   | beers (5)\n        //     > IPA (5)\n        // @MAJOR: remove this legacy behaviour in next major version\n        var defaultData = {};\n\n        if (\n          currentRefinement.length > 0 &&\n          !self.persistHierarchicalRootCount\n        ) {\n          var root = currentRefinement[0].split(separator)[0];\n          defaultData[root] =\n            self.hierarchicalFacets[position][attributeIndex].data[root];\n        }\n\n        self.hierarchicalFacets[position][attributeIndex].data = defaultsPure(\n          defaultData,\n          facetResults,\n          self.hierarchicalFacets[position][attributeIndex].data\n        );\n      });\n\n      nextDisjunctiveResult++;\n    });\n  });\n\n  // add the excludes\n  Object.keys(state.facetsExcludes).forEach(function (facetName) {\n    var excludes = state.facetsExcludes[facetName];\n    var position = facetsIndices[facetName];\n\n    self.facets[position] = {\n      name: facetName,\n      data: mainFacets[facetName],\n      exhaustive: mainSubResponse.exhaustiveFacetsCount,\n    };\n    excludes.forEach(function (facetValue) {\n      self.facets[position] = self.facets[position] || { name: facetName };\n      self.facets[position].data = self.facets[position].data || {};\n      self.facets[position].data[facetValue] = 0;\n    });\n  });\n\n  /**\n   * @type {Array}\n   */\n  this.hierarchicalFacets = this.hierarchicalFacets.map(\n    generateHierarchicalTree(state)\n  );\n\n  /**\n   * @type {Array}\n   */\n  this.facets = compact(this.facets);\n  /**\n   * @type {Array}\n   */\n  this.disjunctiveFacets = compact(this.disjunctiveFacets);\n\n  this._state = state;\n}\n\n/**\n * Get a facet object with its name\n * @deprecated\n * @param {string} name name of the faceted attribute\n * @return {SearchResults.Facet} the facet object\n */\nSearchResults.prototype.getFacetByName = function (name) {\n  function predicate(facet) {\n    return facet.name === name;\n  }\n\n  return (\n    find(this.facets, predicate) ||\n    find(this.disjunctiveFacets, predicate) ||\n    find(this.hierarchicalFacets, predicate)\n  );\n};\n\n/**\n * Get the facet values of a specified attribute from a SearchResults object.\n * @private\n * @param {SearchResults} results the search results to search in\n * @param {string} attribute name of the faceted attribute to search for\n * @return {array|object} facet values. For the hierarchical facets it is an object.\n */\nfunction extractNormalizedFacetValues(results, attribute) {\n  function predicate(facet) {\n    return facet.name === attribute;\n  }\n\n  if (results._state.isConjunctiveFacet(attribute)) {\n    var facet = find(results.facets, predicate);\n    if (!facet) return [];\n\n    return Object.keys(facet.data).map(function (name) {\n      var value = escapeFacetValue(name);\n      return {\n        name: name,\n        escapedValue: value,\n        count: facet.data[name],\n        isRefined: results._state.isFacetRefined(attribute, value),\n        isExcluded: results._state.isExcludeRefined(attribute, name),\n      };\n    });\n  } else if (results._state.isDisjunctiveFacet(attribute)) {\n    var disjunctiveFacet = find(results.disjunctiveFacets, predicate);\n    if (!disjunctiveFacet) return [];\n\n    return Object.keys(disjunctiveFacet.data).map(function (name) {\n      var value = escapeFacetValue(name);\n      return {\n        name: name,\n        escapedValue: value,\n        count: disjunctiveFacet.data[name],\n        isRefined: results._state.isDisjunctiveFacetRefined(attribute, value),\n      };\n    });\n  } else if (results._state.isHierarchicalFacet(attribute)) {\n    var hierarchicalFacetValues = find(results.hierarchicalFacets, predicate);\n    if (!hierarchicalFacetValues) return hierarchicalFacetValues;\n\n    var hierarchicalFacet =\n      results._state.getHierarchicalFacetByName(attribute);\n    var separator =\n      results._state._getHierarchicalFacetSeparator(hierarchicalFacet);\n    var currentRefinement = unescapeFacetValue(\n      results._state.getHierarchicalRefinement(attribute)[0] || ''\n    );\n\n    if (currentRefinement.indexOf(hierarchicalFacet.rootPath) === 0) {\n      currentRefinement = currentRefinement.replace(\n        hierarchicalFacet.rootPath + separator,\n        ''\n      );\n    }\n\n    var currentRefinementSplit = currentRefinement.split(separator);\n    currentRefinementSplit.unshift(attribute);\n\n    setIsRefined(hierarchicalFacetValues, currentRefinementSplit, 0);\n\n    return hierarchicalFacetValues;\n  }\n\n  return undefined;\n}\n\n/**\n * Set the isRefined of a hierarchical facet result based on the current state.\n * @param {SearchResults.HierarchicalFacet} item Hierarchical facet to fix\n * @param {string[]} currentRefinement array of parts of the current hierarchical refinement\n * @param {number} depth recursion depth in the currentRefinement\n * @return {undefined} function mutates the item\n */\nfunction setIsRefined(item, currentRefinement, depth) {\n  item.isRefined =\n    item.name === (currentRefinement[depth] && currentRefinement[depth].trim());\n  if (item.data) {\n    item.data.forEach(function (child) {\n      setIsRefined(child, currentRefinement, depth + 1);\n    });\n  }\n}\n\n/**\n * Sort nodes of a hierarchical or disjunctive facet results\n * @private\n * @param {function} sortFn sort function to apply\n * @param {HierarchicalFacet|Array} node node upon which we want to apply the sort\n * @param {string[]} names attribute names\n * @param {number} [level=0] current index in the names array\n * @return {HierarchicalFacet|Array} sorted node\n */\nfunction recSort(sortFn, node, names, level) {\n  level = level || 0;\n\n  if (Array.isArray(node)) {\n    return sortFn(node, names[level]);\n  }\n\n  if (!node.data || node.data.length === 0) {\n    return node;\n  }\n\n  var children = node.data.map(function (childNode) {\n    return recSort(sortFn, childNode, names, level + 1);\n  });\n  var sortedChildren = sortFn(children, names[level]);\n  var newNode = defaultsPure({ data: sortedChildren }, node);\n  return newNode;\n}\n\nSearchResults.DEFAULT_SORT = ['isRefined:desc', 'count:desc', 'name:asc'];\n\nfunction vanillaSortFn(order, data) {\n  return data.sort(order);\n}\n\n/**\n * @typedef FacetOrdering\n * @type {Object}\n * @property {string[]} [order]\n * @property {'count' | 'alpha' | 'hidden'} [sortRemainingBy]\n */\n\n/**\n * Sorts facet arrays via their facet ordering\n * @param {Array} facetValues the values\n * @param {FacetOrdering} facetOrdering the ordering\n * @returns {Array} the sorted facet values\n */\nfunction sortViaFacetOrdering(facetValues, facetOrdering) {\n  var orderedFacets = [];\n  var remainingFacets = [];\n  var hide = facetOrdering.hide || [];\n  var order = facetOrdering.order || [];\n\n  /**\n   * an object with the keys being the values in order, the values their index:\n   * ['one', 'two'] -> { one: 0, two: 1 }\n   */\n  var reverseOrder = order.reduce(function (acc, name, i) {\n    acc[name] = i;\n    return acc;\n  }, {});\n\n  facetValues.forEach(function (item) {\n    // hierarchical facets get sorted using their raw name\n    var name = item.path || item.name;\n    var hidden = hide.indexOf(name) > -1;\n    if (!hidden && reverseOrder[name] !== undefined) {\n      orderedFacets[reverseOrder[name]] = item;\n    } else if (!hidden) {\n      remainingFacets.push(item);\n    }\n  });\n\n  orderedFacets = orderedFacets.filter(function (facet) {\n    return facet;\n  });\n\n  var sortRemainingBy = facetOrdering.sortRemainingBy;\n  var ordering;\n  if (sortRemainingBy === 'hidden') {\n    return orderedFacets;\n  } else if (sortRemainingBy === 'alpha') {\n    ordering = [\n      ['path', 'name'],\n      ['asc', 'asc'],\n    ];\n  } else {\n    ordering = [['count'], ['desc']];\n  }\n\n  return orderedFacets.concat(\n    orderBy(remainingFacets, ordering[0], ordering[1])\n  );\n}\n\n/**\n * @param {SearchResults} results the search results class\n * @param {string} attribute the attribute to retrieve ordering of\n * @returns {FacetOrdering | undefined} the facet ordering\n */\nfunction getFacetOrdering(results, attribute) {\n  return (\n    results.renderingContent &&\n    results.renderingContent.facetOrdering &&\n    results.renderingContent.facetOrdering.values &&\n    results.renderingContent.facetOrdering.values[attribute]\n  );\n}\n\n/**\n * Get a the list of values for a given facet attribute. Those values are sorted\n * refinement first, descending count (bigger value on top), and name ascending\n * (alphabetical order). The sort formula can overridden using either string based\n * predicates or a function.\n *\n * This method will return all the values returned by the Algolia engine plus all\n * the values already refined. This means that it can happen that the\n * `maxValuesPerFacet` [configuration](https://www.algolia.com/doc/rest-api/search#param-maxValuesPerFacet)\n * might not be respected if you have facet values that are already refined.\n * @param {string} attribute attribute name\n * @param {object} opts configuration options.\n * @param {boolean} [opts.facetOrdering]\n * Force the use of facetOrdering from the result if a sortBy is present. If\n * sortBy isn't present, facetOrdering will be used automatically.\n * @param {Array.<string> | function} opts.sortBy\n * When using strings, it consists of\n * the name of the [FacetValue](#SearchResults.FacetValue) or the\n * [HierarchicalFacet](#SearchResults.HierarchicalFacet) attributes with the\n * order (`asc` or `desc`). For example to order the value by count, the\n * argument would be `['count:asc']`.\n *\n * If only the attribute name is specified, the ordering defaults to the one\n * specified in the default value for this attribute.\n *\n * When not specified, the order is\n * ascending.  This parameter can also be a function which takes two facet\n * values and should return a number, 0 if equal, 1 if the first argument is\n * bigger or -1 otherwise.\n *\n * The default value for this attribute `['isRefined:desc', 'count:desc', 'name:asc']`\n * @return {FacetValue[]|HierarchicalFacet|undefined} depending on the type of facet of\n * the attribute requested (hierarchical, disjunctive or conjunctive)\n * @example\n * helper.on('result', function(event){\n *   //get values ordered only by name ascending using the string predicate\n *   event.results.getFacetValues('city', {sortBy: ['name:asc']});\n *   //get values  ordered only by count ascending using a function\n *   event.results.getFacetValues('city', {\n *     // this is equivalent to ['count:asc']\n *     sortBy: function(a, b) {\n *       if (a.count === b.count) return 0;\n *       if (a.count > b.count)   return 1;\n *       if (b.count > a.count)   return -1;\n *     }\n *   });\n * });\n */\nSearchResults.prototype.getFacetValues = function (attribute, opts) {\n  var facetValues = extractNormalizedFacetValues(this, attribute);\n  if (!facetValues) {\n    return undefined;\n  }\n\n  var options = defaultsPure(opts, {\n    sortBy: SearchResults.DEFAULT_SORT,\n    // if no sortBy is given, attempt to sort based on facetOrdering\n    // if it is given, we still allow to sort via facet ordering first\n    facetOrdering: !(opts && opts.sortBy),\n  });\n\n  // eslint-disable-next-line consistent-this\n  var results = this;\n  var attributes;\n  if (Array.isArray(facetValues)) {\n    attributes = [attribute];\n  } else {\n    var config = results._state.getHierarchicalFacetByName(facetValues.name);\n    attributes = config.attributes;\n  }\n\n  return recSort(\n    function (data, facetName) {\n      if (options.facetOrdering) {\n        var facetOrdering = getFacetOrdering(results, facetName);\n        if (facetOrdering) {\n          return sortViaFacetOrdering(data, facetOrdering);\n        }\n      }\n\n      if (Array.isArray(options.sortBy)) {\n        var order = formatSort(options.sortBy, SearchResults.DEFAULT_SORT);\n        return orderBy(data, order[0], order[1]);\n      } else if (typeof options.sortBy === 'function') {\n        return vanillaSortFn(options.sortBy, data);\n      }\n      throw new Error(\n        'options.sortBy is optional but if defined it must be ' +\n          'either an array of string (predicates) or a sorting function'\n      );\n    },\n    facetValues,\n    attributes\n  );\n};\n\n/**\n * Returns the facet stats if attribute is defined and the facet contains some.\n * Otherwise returns undefined.\n * @param {string} attribute name of the faceted attribute\n * @return {object} The stats of the facet\n */\nSearchResults.prototype.getFacetStats = function (attribute) {\n  if (this._state.isConjunctiveFacet(attribute)) {\n    return getFacetStatsIfAvailable(this.facets, attribute);\n  } else if (this._state.isDisjunctiveFacet(attribute)) {\n    return getFacetStatsIfAvailable(this.disjunctiveFacets, attribute);\n  }\n\n  return undefined;\n};\n\n/**\n * @typedef {Object} FacetListItem\n * @property {string} name\n */\n\n/**\n * @param {FacetListItem[]} facetList (has more items, but enough for here)\n * @param {string} facetName The attribute to look for\n * @return {object|undefined} The stats of the facet\n */\nfunction getFacetStatsIfAvailable(facetList, facetName) {\n  var data = find(facetList, function (facet) {\n    return facet.name === facetName;\n  });\n  return data && data.stats;\n}\n\n/**\n * Returns all refinements for all filters + tags. It also provides\n * additional information: count and exhaustiveness for each filter.\n *\n * See the [refinement type](#Refinement) for an exhaustive view of the available\n * data.\n *\n * Note that for a numeric refinement, results are grouped per operator, this\n * means that it will return responses for operators which are empty.\n *\n * @return {Array.<Refinement>} all the refinements\n */\nSearchResults.prototype.getRefinements = function () {\n  var state = this._state;\n  // eslint-disable-next-line consistent-this\n  var results = this;\n  var res = [];\n\n  Object.keys(state.facetsRefinements).forEach(function (attributeName) {\n    state.facetsRefinements[attributeName].forEach(function (name) {\n      res.push(\n        getRefinement(state, 'facet', attributeName, name, results.facets)\n      );\n    });\n  });\n\n  Object.keys(state.facetsExcludes).forEach(function (attributeName) {\n    state.facetsExcludes[attributeName].forEach(function (name) {\n      res.push(\n        getRefinement(state, 'exclude', attributeName, name, results.facets)\n      );\n    });\n  });\n\n  Object.keys(state.disjunctiveFacetsRefinements).forEach(function (\n    attributeName\n  ) {\n    state.disjunctiveFacetsRefinements[attributeName].forEach(function (name) {\n      res.push(\n        getRefinement(\n          state,\n          'disjunctive',\n          attributeName,\n          name,\n          results.disjunctiveFacets\n        )\n      );\n    });\n  });\n\n  Object.keys(state.hierarchicalFacetsRefinements).forEach(function (\n    attributeName\n  ) {\n    state.hierarchicalFacetsRefinements[attributeName].forEach(function (name) {\n      res.push(\n        getHierarchicalRefinement(\n          state,\n          attributeName,\n          name,\n          results.hierarchicalFacets\n        )\n      );\n    });\n  });\n\n  Object.keys(state.numericRefinements).forEach(function (attributeName) {\n    var operators = state.numericRefinements[attributeName];\n    Object.keys(operators).forEach(function (operator) {\n      operators[operator].forEach(function (value) {\n        res.push({\n          type: 'numeric',\n          attributeName: attributeName,\n          name: value,\n          numericValue: value,\n          operator: operator,\n        });\n      });\n    });\n  });\n\n  state.tagRefinements.forEach(function (name) {\n    res.push({ type: 'tag', attributeName: '_tags', name: name });\n  });\n\n  return res;\n};\n\n/**\n * @typedef {Object} Facet\n * @property {string} name\n * @property {Object} data\n * @property {boolean} exhaustive\n */\n\n/**\n * @param {SearchParameters} state the current state\n * @param {string} type the type of the refinement\n * @param {string} attributeName The attribute of the facet\n * @param {*} name The name of the facet\n * @param {Facet[]} resultsFacets facets from the results\n * @return {Refinement} the refinement\n */\nfunction getRefinement(state, type, attributeName, name, resultsFacets) {\n  var facet = find(resultsFacets, function (f) {\n    return f.name === attributeName;\n  });\n  var count = facet && facet.data && facet.data[name] ? facet.data[name] : 0;\n  var exhaustive = (facet && facet.exhaustive) || false;\n\n  return {\n    type: type,\n    attributeName: attributeName,\n    name: name,\n    count: count,\n    exhaustive: exhaustive,\n  };\n}\n\n/**\n * @param {SearchParameters} state the current state\n * @param {string} attributeName the attribute of the hierarchical facet\n * @param {string} name the name of the facet\n * @param {Facet[]} resultsFacets facets from the results\n * @return {HierarchicalFacet} the hierarchical facet\n */\nfunction getHierarchicalRefinement(state, attributeName, name, resultsFacets) {\n  var facetDeclaration = state.getHierarchicalFacetByName(attributeName);\n  var separator = state._getHierarchicalFacetSeparator(facetDeclaration);\n  var split = name.split(separator);\n  var rootFacet = find(resultsFacets, function (facet) {\n    return facet.name === attributeName;\n  });\n\n  var facet = split.reduce(function (intermediateFacet, part) {\n    var newFacet =\n      intermediateFacet &&\n      find(intermediateFacet.data, function (f) {\n        return f.name === part;\n      });\n    return newFacet !== undefined ? newFacet : intermediateFacet;\n  }, rootFacet);\n\n  var count = (facet && facet.count) || 0;\n  var exhaustive = (facet && facet.exhaustive) || false;\n  var path = (facet && facet.path) || '';\n\n  return {\n    type: 'hierarchical',\n    attributeName: attributeName,\n    name: path,\n    count: count,\n    exhaustive: exhaustive,\n  };\n}\n\nmodule.exports = SearchResults;\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 3355, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3360, "column": 0}, "map": {"version":3,"sources":["file:///root/webmakerr/storefront/node_modules/algoliasearch-helper/src/functions/flat.js"],"sourcesContent":["// @MAJOR: remove this function and use Array.prototype.flat\nmodule.exports = function flat(arr) {\n  return arr.reduce(function (acc, val) {\n    return acc.concat(val);\n  }, []);\n};\n"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,OAAO,OAAO,GAAG,SAAS,KAAK,GAAG;IAChC,OAAO,IAAI,MAAM,CAAC,SAAU,GAAG,EAAE,GAAG;QAClC,OAAO,IAAI,MAAM,CAAC;IACpB,GAAG,EAAE;AACP","ignoreList":[0]}},
    {"offset": {"line": 3366, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3371, "column": 0}, "map": {"version":3,"sources":["file:///root/webmakerr/storefront/node_modules/algoliasearch-helper/src/utils/sortAndMergeRecommendations.js"],"sourcesContent":["'use strict';\n\nvar find = require('../functions/find');\nvar flat = require('../functions/flat');\n\nfunction getAverageIndices(indexTracker, nrOfObjs) {\n  var avgIndices = [];\n\n  Object.keys(indexTracker).forEach(function (key) {\n    if (indexTracker[key].count < 2) {\n      indexTracker[key].indexSum += 100;\n    }\n    avgIndices.push({\n      objectID: key,\n      avgOfIndices: indexTracker[key].indexSum / nrOfObjs,\n    });\n  });\n\n  return avgIndices.sort(function (a, b) {\n    return a.avgOfIndices > b.avgOfIndices ? 1 : -1;\n  });\n}\n\nfunction sortAndMergeRecommendations(results) {\n  var indexTracker = {};\n\n  results.forEach(function (hits) {\n    hits.forEach(function (hit, index) {\n      if (!indexTracker[hit.objectID]) {\n        indexTracker[hit.objectID] = { indexSum: index, count: 1 };\n      } else {\n        indexTracker[hit.objectID] = {\n          indexSum: indexTracker[hit.objectID].indexSum + index,\n          count: indexTracker[hit.objectID].count + 1,\n        };\n      }\n    });\n  });\n\n  var sortedAverageIndices = getAverageIndices(indexTracker, results.length);\n\n  var finalOrder = sortedAverageIndices.reduce(function (\n    orderedHits,\n    avgIndexRef\n  ) {\n    var result = find(flat(results), function (hit) {\n      return hit.objectID === avgIndexRef.objectID;\n    });\n    return result ? orderedHits.concat(result) : orderedHits;\n  },\n  []);\n\n  return finalOrder;\n}\n\nmodule.exports = sortAndMergeRecommendations;\n"],"names":[],"mappings":"AAAA;AAEA,IAAI;AACJ,IAAI;AAEJ,SAAS,kBAAkB,YAAY,EAAE,QAAQ;IAC/C,IAAI,aAAa,EAAE;IAEnB,OAAO,IAAI,CAAC,cAAc,OAAO,CAAC,SAAU,GAAG;QAC7C,IAAI,YAAY,CAAC,IAAI,CAAC,KAAK,GAAG,GAAG;YAC/B,YAAY,CAAC,IAAI,CAAC,QAAQ,IAAI;QAChC;QACA,WAAW,IAAI,CAAC;YACd,UAAU;YACV,cAAc,YAAY,CAAC,IAAI,CAAC,QAAQ,GAAG;QAC7C;IACF;IAEA,OAAO,WAAW,IAAI,CAAC,SAAU,CAAC,EAAE,CAAC;QACnC,OAAO,EAAE,YAAY,GAAG,EAAE,YAAY,GAAG,IAAI,CAAC;IAChD;AACF;AAEA,SAAS,4BAA4B,OAAO;IAC1C,IAAI,eAAe,CAAC;IAEpB,QAAQ,OAAO,CAAC,SAAU,IAAI;QAC5B,KAAK,OAAO,CAAC,SAAU,GAAG,EAAE,KAAK;YAC/B,IAAI,CAAC,YAAY,CAAC,IAAI,QAAQ,CAAC,EAAE;gBAC/B,YAAY,CAAC,IAAI,QAAQ,CAAC,GAAG;oBAAE,UAAU;oBAAO,OAAO;gBAAE;YAC3D,OAAO;gBACL,YAAY,CAAC,IAAI,QAAQ,CAAC,GAAG;oBAC3B,UAAU,YAAY,CAAC,IAAI,QAAQ,CAAC,CAAC,QAAQ,GAAG;oBAChD,OAAO,YAAY,CAAC,IAAI,QAAQ,CAAC,CAAC,KAAK,GAAG;gBAC5C;YACF;QACF;IACF;IAEA,IAAI,uBAAuB,kBAAkB,cAAc,QAAQ,MAAM;IAEzE,IAAI,aAAa,qBAAqB,MAAM,CAAC,SAC3C,WAAW,EACX,WAAW;QAEX,IAAI,SAAS,KAAK,KAAK,UAAU,SAAU,GAAG;YAC5C,OAAO,IAAI,QAAQ,KAAK,YAAY,QAAQ;QAC9C;QACA,OAAO,SAAS,YAAY,MAAM,CAAC,UAAU;IAC/C,GACA,EAAE;IAEF,OAAO;AACT;AAEA,OAAO,OAAO,GAAG","ignoreList":[0]}},
    {"offset": {"line": 3416, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3421, "column": 0}, "map": {"version":3,"sources":["file:///root/webmakerr/storefront/node_modules/algoliasearch-helper/src/algoliasearch.helper.js"],"sourcesContent":["'use strict';\n\nvar EventEmitter = require('@algolia/events');\n\nvar DerivedHelper = require('./DerivedHelper');\nvar escapeFacetValue = require('./functions/escapeFacetValue').escapeFacetValue;\nvar inherits = require('./functions/inherits');\nvar merge = require('./functions/merge');\nvar objectHasKeys = require('./functions/objectHasKeys');\nvar omit = require('./functions/omit');\nvar RecommendParameters = require('./RecommendParameters');\nvar RecommendResults = require('./RecommendResults');\nvar requestBuilder = require('./requestBuilder');\nvar SearchParameters = require('./SearchParameters');\nvar SearchResults = require('./SearchResults');\nvar sortAndMergeRecommendations = require('./utils/sortAndMergeRecommendations');\nvar version = require('./version');\n\n/**\n * Event triggered when a parameter is set or updated\n * @event AlgoliaSearchHelper#event:change\n * @property {object} event\n * @property {SearchParameters} event.state the current parameters with the latest changes applied\n * @property {SearchResults} event.results the previous results received from Algolia. `null` before the first request\n * @example\n * helper.on('change', function(event) {\n *   console.log('The parameters have changed');\n * });\n */\n\n/**\n * Event triggered when a main search is sent to Algolia\n * @event AlgoliaSearchHelper#event:search\n * @property {object} event\n * @property {SearchParameters} event.state the parameters used for this search\n * @property {SearchResults} event.results the results from the previous search. `null` if it is the first search.\n * @example\n * helper.on('search', function(event) {\n *   console.log('Search sent');\n * });\n */\n\n/**\n * Event triggered when a search using `searchForFacetValues` is sent to Algolia\n * @event AlgoliaSearchHelper#event:searchForFacetValues\n * @property {object} event\n * @property {SearchParameters} event.state the parameters used for this search it is the first search.\n * @property {string} event.facet the facet searched into\n * @property {string} event.query the query used to search in the facets\n * @example\n * helper.on('searchForFacetValues', function(event) {\n *   console.log('searchForFacetValues sent');\n * });\n */\n\n/**\n * Event triggered when a search using `searchOnce` is sent to Algolia\n * @event AlgoliaSearchHelper#event:searchOnce\n * @property {object} event\n * @property {SearchParameters} event.state the parameters used for this search it is the first search.\n * @example\n * helper.on('searchOnce', function(event) {\n *   console.log('searchOnce sent');\n * });\n */\n\n/**\n * Event triggered when the results are retrieved from Algolia\n * @event AlgoliaSearchHelper#event:result\n * @property {object} event\n * @property {SearchResults} event.results the results received from Algolia\n * @property {SearchParameters} event.state the parameters used to query Algolia. Those might be different from the one in the helper instance (for example if the network is unreliable).\n * @example\n * helper.on('result', function(event) {\n *   console.log('Search results received');\n * });\n */\n\n/**\n * Event triggered when Algolia sends back an error. For example, if an unknown parameter is\n * used, the error can be caught using this event.\n * @event AlgoliaSearchHelper#event:error\n * @property {object} event\n * @property {Error} event.error the error returned by the Algolia.\n * @example\n * helper.on('error', function(event) {\n *   console.log('Houston we got a problem.');\n * });\n */\n\n/**\n * Event triggered when the queue of queries have been depleted (with any result or outdated queries)\n * @event AlgoliaSearchHelper#event:searchQueueEmpty\n * @example\n * helper.on('searchQueueEmpty', function() {\n *   console.log('No more search pending');\n *   // This is received before the result event if we're not expecting new results\n * });\n *\n * helper.search();\n */\n\n/**\n * Initialize a new AlgoliaSearchHelper\n * @class\n * @classdesc The AlgoliaSearchHelper is a class that ease the management of the\n * search. It provides an event based interface for search callbacks:\n *  - change: when the internal search state is changed.\n *    This event contains a {@link SearchParameters} object and the\n *    {@link SearchResults} of the last result if any.\n *  - search: when a search is triggered using the `search()` method.\n *  - result: when the response is retrieved from Algolia and is processed.\n *    This event contains a {@link SearchResults} object and the\n *    {@link SearchParameters} corresponding to this answer.\n *  - error: when the response is an error. This event contains the error returned by the server.\n * @param  {AlgoliaSearch} client an AlgoliaSearch client\n * @param  {string} index the index name to query\n * @param  {SearchParameters | object} options an object defining the initial\n * config of the search. It doesn't have to be a {SearchParameters},\n * just an object containing the properties you need from it.\n * @param {SearchResultsOptions|object} searchResultsOptions an object defining the options to use when creating the search results.\n */\nfunction AlgoliaSearchHelper(client, index, options, searchResultsOptions) {\n  if (typeof client.addAlgoliaAgent === 'function') {\n    client.addAlgoliaAgent('JS Helper (' + version + ')');\n  }\n\n  this.setClient(client);\n  var opts = options || {};\n  opts.index = index;\n  this.state = SearchParameters.make(opts);\n  this.recommendState = new RecommendParameters({\n    params: opts.recommendState,\n  });\n  this.lastResults = null;\n  this.lastRecommendResults = null;\n  this._queryId = 0;\n  this._recommendQueryId = 0;\n  this._lastQueryIdReceived = -1;\n  this._lastRecommendQueryIdReceived = -1;\n  this.derivedHelpers = [];\n  this._currentNbQueries = 0;\n  this._currentNbRecommendQueries = 0;\n  this._searchResultsOptions = searchResultsOptions;\n  this._recommendCache = {};\n}\n\ninherits(AlgoliaSearchHelper, EventEmitter);\n\n/**\n * Start the search with the parameters set in the state. When the\n * method is called, it triggers a `search` event. The results will\n * be available through the `result` event. If an error occurs, an\n * `error` will be fired instead.\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires search\n * @fires result\n * @fires error\n * @chainable\n */\nAlgoliaSearchHelper.prototype.search = function () {\n  this._search({ onlyWithDerivedHelpers: false });\n  return this;\n};\n\nAlgoliaSearchHelper.prototype.searchOnlyWithDerivedHelpers = function () {\n  this._search({ onlyWithDerivedHelpers: true });\n  return this;\n};\n\nAlgoliaSearchHelper.prototype.searchWithComposition = function () {\n  this._runComposition({ onlyWithDerivedHelpers: true });\n  return this;\n};\n/**\n * Sends the recommendation queries set in the state. When the method is\n * called, it triggers a `fetch` event. The results will be available through\n * the `result` event. If an error occurs, an `error` will be fired instead.\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires fetch\n * @fires result\n * @fires error\n * @chainable\n */\nAlgoliaSearchHelper.prototype.recommend = function () {\n  this._recommend();\n  return this;\n};\n\n/**\n * Gets the search query parameters that would be sent to the Algolia Client\n * for the hits\n * @return {object} Query Parameters\n */\nAlgoliaSearchHelper.prototype.getQuery = function () {\n  var state = this.state;\n  return requestBuilder._getHitsSearchParams(state);\n};\n\n/**\n * Start a search using a modified version of the current state. This method does\n * not trigger the helper lifecycle and does not modify the state kept internally\n * by the helper. This second aspect means that the next search call will be the\n * same as a search call before calling searchOnce.\n * @param {object} options can contain all the parameters that can be set to SearchParameters\n * plus the index\n * @param {function} [cb] optional callback executed when the response from the\n * server is back.\n * @return {promise|undefined} if a callback is passed the method returns undefined\n * otherwise it returns a promise containing an object with two keys :\n *  - content with a SearchResults\n *  - state with the state used for the query as a SearchParameters\n * @example\n * // Changing the number of records returned per page to 1\n * // This example uses the callback API\n * var state = helper.searchOnce({hitsPerPage: 1},\n *   function(error, content, state) {\n *     // if an error occurred it will be passed in error, otherwise its value is null\n *     // content contains the results formatted as a SearchResults\n *     // state is the instance of SearchParameters used for this search\n *   });\n * @example\n * // Changing the number of records returned per page to 1\n * // This example uses the promise API\n * var state1 = helper.searchOnce({hitsPerPage: 1})\n *                 .then(promiseHandler);\n *\n * function promiseHandler(res) {\n *   // res contains\n *   // {\n *   //   content : SearchResults\n *   //   state   : SearchParameters (the one used for this specific search)\n *   // }\n * }\n */\nAlgoliaSearchHelper.prototype.searchOnce = function (options, cb) {\n  var tempState = !options\n    ? this.state\n    : this.state.setQueryParameters(options);\n  var queries = requestBuilder._getQueries(tempState.index, tempState);\n  // eslint-disable-next-line consistent-this\n  var self = this;\n\n  this._currentNbQueries++;\n\n  this.emit('searchOnce', {\n    state: tempState,\n  });\n\n  if (cb) {\n    this.client\n      .search(queries)\n      .then(function (content) {\n        self._currentNbQueries--;\n        if (self._currentNbQueries === 0) {\n          self.emit('searchQueueEmpty');\n        }\n\n        cb(null, new SearchResults(tempState, content.results), tempState);\n      })\n      .catch(function (err) {\n        self._currentNbQueries--;\n        if (self._currentNbQueries === 0) {\n          self.emit('searchQueueEmpty');\n        }\n\n        cb(err, null, tempState);\n      });\n\n    return undefined;\n  }\n\n  return this.client.search(queries).then(\n    function (content) {\n      self._currentNbQueries--;\n      if (self._currentNbQueries === 0) self.emit('searchQueueEmpty');\n      return {\n        content: new SearchResults(tempState, content.results),\n        state: tempState,\n        _originalResponse: content,\n      };\n    },\n    function (e) {\n      self._currentNbQueries--;\n      if (self._currentNbQueries === 0) self.emit('searchQueueEmpty');\n      throw e;\n    }\n  );\n};\n\n/**\n * Start the search for answers with the parameters set in the state.\n * This method returns a promise.\n * @param {Object} options - the options for answers API call\n * @param {string[]} options.attributesForPrediction - Attributes to use for predictions. If empty, `searchableAttributes` is used instead.\n * @param {string[]} options.queryLanguages - The languages in the query. Currently only supports ['en'].\n * @param {number} options.nbHits - Maximum number of answers to retrieve from the Answers Engine. Cannot be greater than 1000.\n *\n * @return {promise} the answer results\n * @deprecated answers is deprecated and will be replaced with new initiatives\n */\nAlgoliaSearchHelper.prototype.findAnswers = function (options) {\n  // eslint-disable-next-line no-console\n  console.warn('[algoliasearch-helper] answers is no longer supported');\n  var state = this.state;\n  var derivedHelper = this.derivedHelpers[0];\n  if (!derivedHelper) {\n    return Promise.resolve([]);\n  }\n  var derivedState = derivedHelper.getModifiedState(state);\n  var data = merge(\n    {\n      attributesForPrediction: options.attributesForPrediction,\n      nbHits: options.nbHits,\n    },\n    {\n      params: omit(requestBuilder._getHitsSearchParams(derivedState), [\n        'attributesToSnippet',\n        'hitsPerPage',\n        'restrictSearchableAttributes',\n        'snippetEllipsisText',\n      ]),\n    }\n  );\n\n  var errorMessage =\n    'search for answers was called, but this client does not have a function client.initIndex(index).findAnswers';\n  if (typeof this.client.initIndex !== 'function') {\n    throw new Error(errorMessage);\n  }\n  var index = this.client.initIndex(derivedState.index);\n  if (typeof index.findAnswers !== 'function') {\n    throw new Error(errorMessage);\n  }\n  return index.findAnswers(derivedState.query, options.queryLanguages, data);\n};\n\n/**\n * Structure of each result when using\n * [`searchForFacetValues()`](reference.html#AlgoliaSearchHelper#searchForFacetValues)\n * @typedef FacetSearchHit\n * @type {object}\n * @property {string} value the facet value\n * @property {string} highlighted the facet value highlighted with the query string\n * @property {number} count number of occurrence of this facet value\n * @property {boolean} isRefined true if the value is already refined\n */\n\n/**\n * Structure of the data resolved by the\n * [`searchForFacetValues()`](reference.html#AlgoliaSearchHelper#searchForFacetValues)\n * promise.\n * @typedef FacetSearchResult\n * @type {object}\n * @property {FacetSearchHit} facetHits the results for this search for facet values\n * @property {number} processingTimeMS time taken by the query inside the engine\n */\n\n/**\n * Search for facet values based on an query and the name of a faceted attribute. This\n * triggers a search and will return a promise. On top of using the query, it also sends\n * the parameters from the state so that the search is narrowed down to only the possible values.\n *\n * See the description of [FacetSearchResult](reference.html#FacetSearchResult)\n * @param {string} facet the name of the faceted attribute\n * @param {string} query the string query for the search\n * @param {number} [maxFacetHits] the maximum number values returned. Should be > 0 and <= 100\n * @param {object} [userState] the set of custom parameters to use on top of the current state. Setting a property to `undefined` removes\n * it in the generated query.\n * @return {promise.<FacetSearchResult>} the results of the search\n */\nAlgoliaSearchHelper.prototype.searchForFacetValues = function (\n  facet,\n  query,\n  maxFacetHits,\n  userState\n) {\n  var clientHasSFFV =\n    typeof this.client.searchForFacetValues === 'function' &&\n    // v5 has a wrong sffv signature\n    typeof this.client.searchForFacets !== 'function';\n  var clientHasInitIndex = typeof this.client.initIndex === 'function';\n  if (\n    !clientHasSFFV &&\n    !clientHasInitIndex &&\n    typeof this.client.search !== 'function'\n  ) {\n    throw new Error(\n      'search for facet values (searchable) was called, but this client does not have a function client.searchForFacetValues or client.initIndex(index).searchForFacetValues'\n    );\n  }\n\n  var state = this.state.setQueryParameters(userState || {});\n  var isDisjunctive = state.isDisjunctiveFacet(facet);\n  var algoliaQuery = requestBuilder.getSearchForFacetQuery(\n    facet,\n    query,\n    maxFacetHits,\n    state\n  );\n\n  this._currentNbQueries++;\n  // eslint-disable-next-line consistent-this\n  var self = this;\n  var searchForFacetValuesPromise;\n  // newer algoliasearch ^3.27.1 - ~4.0.0\n  if (clientHasSFFV) {\n    searchForFacetValuesPromise = this.client.searchForFacetValues([\n      { indexName: state.index, params: algoliaQuery },\n    ]);\n    // algoliasearch < 3.27.1\n  } else if (clientHasInitIndex) {\n    searchForFacetValuesPromise = this.client\n      .initIndex(state.index)\n      .searchForFacetValues(algoliaQuery);\n    // algoliasearch ~5.0.0\n  } else {\n    // @MAJOR only use client.search\n    delete algoliaQuery.facetName;\n    searchForFacetValuesPromise = this.client\n      .search([\n        {\n          type: 'facet',\n          facet: facet,\n          indexName: state.index,\n          params: algoliaQuery,\n        },\n      ])\n      .then(function processResponse(response) {\n        return response.results[0];\n      });\n  }\n\n  this.emit('searchForFacetValues', {\n    state: state,\n    facet: facet,\n    query: query,\n  });\n\n  return searchForFacetValuesPromise.then(\n    function addIsRefined(content) {\n      self._currentNbQueries--;\n      if (self._currentNbQueries === 0) self.emit('searchQueueEmpty');\n\n      content = Array.isArray(content) ? content[0] : content;\n\n      content.facetHits.forEach(function (f) {\n        f.escapedValue = escapeFacetValue(f.value);\n        f.isRefined = isDisjunctive\n          ? state.isDisjunctiveFacetRefined(facet, f.escapedValue)\n          : state.isFacetRefined(facet, f.escapedValue);\n      });\n\n      return content;\n    },\n    function (e) {\n      self._currentNbQueries--;\n      if (self._currentNbQueries === 0) self.emit('searchQueueEmpty');\n      throw e;\n    }\n  );\n};\n\n/**\n * Search for facet values using the Composition API & based on a query and the name of a faceted attribute.\n * This triggers a search and will return a promise. On top of using the query, it also sends\n * the parameters from the state so that the search is narrowed down to only the possible values.\n *\n * See the description of [FacetSearchResult](reference.html#FacetSearchResult)\n * @param {string} facet the name of the faceted attribute\n * @param {string} query the string query for the search\n * @param {number} [maxFacetHits] the maximum number values returned. Should be > 0 and <= 100\n * @param {object} [userState] the set of custom parameters to use on top of the current state. Setting a property to `undefined` removes\n * it in the generated query.\n * @return {promise.<FacetSearchResult>} the results of the search\n */\nAlgoliaSearchHelper.prototype.searchForCompositionFacetValues = function (\n  facet,\n  query,\n  maxFacetHits,\n  userState\n) {\n  if (typeof this.client.searchForFacetValues !== 'function') {\n    throw new Error(\n      'search for facet values (searchable) was called, but this client does not have a function client.searchForFacetValues'\n    );\n  }\n\n  var state = this.state.setQueryParameters(userState || {});\n  var isDisjunctive = state.isDisjunctiveFacet(facet);\n\n  this._currentNbQueries++;\n  // eslint-disable-next-line consistent-this\n  var self = this;\n  var searchForFacetValuesPromise;\n\n  searchForFacetValuesPromise = this.client.searchForFacetValues({\n    compositionID: state.index,\n    facetName: facet,\n    searchForFacetValuesRequest: {\n      params: {\n        query: query,\n        maxFacetHits: maxFacetHits,\n        searchQuery: requestBuilder._getCompositionHitsSearchParams(state),\n      },\n    },\n  });\n\n  this.emit('searchForFacetValues', {\n    state: state,\n    facet: facet,\n    query: query,\n  });\n\n  return searchForFacetValuesPromise.then(\n    function addIsRefined(content) {\n      self._currentNbQueries--;\n      if (self._currentNbQueries === 0) self.emit('searchQueueEmpty');\n\n      content = content.results[0];\n\n      content.facetHits.forEach(function (f) {\n        f.escapedValue = escapeFacetValue(f.value);\n        f.isRefined = isDisjunctive\n          ? state.isDisjunctiveFacetRefined(facet, f.escapedValue)\n          : state.isFacetRefined(facet, f.escapedValue);\n      });\n\n      return content;\n    },\n    function (e) {\n      self._currentNbQueries--;\n      if (self._currentNbQueries === 0) self.emit('searchQueueEmpty');\n      throw e;\n    }\n  );\n};\n\n/**\n * Sets the text query used for the search.\n *\n * This method resets the current page to 0.\n * @param  {string} q the user query\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.setQuery = function (q) {\n  this._change({\n    state: this.state.resetPage().setQuery(q),\n    isPageReset: true,\n  });\n\n  return this;\n};\n\n/**\n * Remove all the types of refinements except tags. A string can be provided to remove\n * only the refinements of a specific attribute. For more advanced use case, you can\n * provide a function instead. This function should follow the\n * [clearCallback definition](#SearchParameters.clearCallback).\n *\n * This method resets the current page to 0.\n * @param {string} [name] optional name of the facet / attribute on which we want to remove all refinements\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n * @example\n * // Removing all the refinements\n * helper.clearRefinements().search();\n * @example\n * // Removing all the filters on a the category attribute.\n * helper.clearRefinements('category').search();\n * @example\n * // Removing only the exclude filters on the category facet.\n * helper.clearRefinements(function(value, attribute, type) {\n *   return type === 'exclude' && attribute === 'category';\n * }).search();\n */\nAlgoliaSearchHelper.prototype.clearRefinements = function (name) {\n  this._change({\n    state: this.state.resetPage().clearRefinements(name),\n    isPageReset: true,\n  });\n\n  return this;\n};\n\n/**\n * Remove all the tag filters.\n *\n * This method resets the current page to 0.\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.clearTags = function () {\n  this._change({\n    state: this.state.resetPage().clearTags(),\n    isPageReset: true,\n  });\n\n  return this;\n};\n\n/**\n * Adds a disjunctive filter to a faceted attribute with the `value` provided. If the\n * filter is already set, it doesn't change the filters.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} value the associated value (will be converted to string)\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.addDisjunctiveFacetRefinement = function (\n  facet,\n  value\n) {\n  this._change({\n    state: this.state.resetPage().addDisjunctiveFacetRefinement(facet, value),\n    isPageReset: true,\n  });\n\n  return this;\n};\n\n// eslint-disable-next-line valid-jsdoc\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#addDisjunctiveFacetRefinement}\n */\nAlgoliaSearchHelper.prototype.addDisjunctiveRefine = function () {\n  return this.addDisjunctiveFacetRefinement.apply(this, arguments);\n};\n\n/**\n * Adds a refinement on a hierarchical facet. It will throw\n * an exception if the facet is not defined or if the facet\n * is already refined.\n *\n * This method resets the current page to 0.\n * @param {string} facet the facet name\n * @param {string} path the hierarchical facet path\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @throws Error if the facet is not defined or if the facet is refined\n * @chainable\n * @fires change\n */\nAlgoliaSearchHelper.prototype.addHierarchicalFacetRefinement = function (\n  facet,\n  path\n) {\n  this._change({\n    state: this.state.resetPage().addHierarchicalFacetRefinement(facet, path),\n    isPageReset: true,\n  });\n\n  return this;\n};\n\n/**\n * Adds a an numeric filter to an attribute with the `operator` and `value` provided. If the\n * filter is already set, it doesn't change the filters.\n *\n * This method resets the current page to 0.\n * @param  {string} attribute the attribute on which the numeric filter applies\n * @param  {string} operator the operator of the filter\n * @param  {number} value the value of the filter\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.addNumericRefinement = function (\n  attribute,\n  operator,\n  value\n) {\n  this._change({\n    state: this.state\n      .resetPage()\n      .addNumericRefinement(attribute, operator, value),\n    isPageReset: true,\n  });\n\n  return this;\n};\n\n/**\n * Adds a filter to a faceted attribute with the `value` provided. If the\n * filter is already set, it doesn't change the filters.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} value the associated value (will be converted to string)\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.addFacetRefinement = function (facet, value) {\n  this._change({\n    state: this.state.resetPage().addFacetRefinement(facet, value),\n    isPageReset: true,\n  });\n\n  return this;\n};\n\n// eslint-disable-next-line valid-jsdoc\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#addFacetRefinement}\n */\nAlgoliaSearchHelper.prototype.addRefine = function () {\n  return this.addFacetRefinement.apply(this, arguments);\n};\n\n/**\n * Adds a an exclusion filter to a faceted attribute with the `value` provided. If the\n * filter is already set, it doesn't change the filters.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} value the associated value (will be converted to string)\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.addFacetExclusion = function (facet, value) {\n  this._change({\n    state: this.state.resetPage().addExcludeRefinement(facet, value),\n    isPageReset: true,\n  });\n\n  return this;\n};\n\n// eslint-disable-next-line valid-jsdoc\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#addFacetExclusion}\n */\nAlgoliaSearchHelper.prototype.addExclude = function () {\n  return this.addFacetExclusion.apply(this, arguments);\n};\n\n/**\n * Adds a tag filter with the `tag` provided. If the\n * filter is already set, it doesn't change the filters.\n *\n * This method resets the current page to 0.\n * @param {string} tag the tag to add to the filter\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.addTag = function (tag) {\n  this._change({\n    state: this.state.resetPage().addTagRefinement(tag),\n    isPageReset: true,\n  });\n\n  return this;\n};\n\n/**\n * Adds a \"frequently bought together\" recommendation query.\n *\n * @param {FrequentlyBoughtTogetherQuery} params the parameters for the recommendation\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.addFrequentlyBoughtTogether = function (params) {\n  this._recommendChange({\n    state: this.recommendState.addFrequentlyBoughtTogether(params),\n  });\n\n  return this;\n};\n\n/**\n * Adds a \"related products\" recommendation query.\n *\n * @param {RelatedProductsQuery} params the parameters for the recommendation\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.addRelatedProducts = function (params) {\n  this._recommendChange({\n    state: this.recommendState.addRelatedProducts(params),\n  });\n\n  return this;\n};\n\n/**\n * Adds a \"trending items\" recommendation query.\n *\n * @param {TrendingItemsQuery} params the parameters for the recommendation\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.addTrendingItems = function (params) {\n  this._recommendChange({\n    state: this.recommendState.addTrendingItems(params),\n  });\n\n  return this;\n};\n\n/**\n * Adds a \"trending facets\" recommendation query.\n *\n * @param {TrendingFacetsQuery} params the parameters for the recommendation\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.addTrendingFacets = function (params) {\n  this._recommendChange({\n    state: this.recommendState.addTrendingFacets(params),\n  });\n\n  return this;\n};\n\n/**\n * Adds a \"looking similar\" recommendation query.\n *\n * @param {LookingSimilarQuery} params the parameters for the recommendation\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.addLookingSimilar = function (params) {\n  this._recommendChange({\n    state: this.recommendState.addLookingSimilar(params),\n  });\n\n  return this;\n};\n\n/**\n * Removes an numeric filter to an attribute with the `operator` and `value` provided. If the\n * filter is not set, it doesn't change the filters.\n *\n * Some parameters are optional, triggering different behavior:\n *  - if the value is not provided, then all the numeric value will be removed for the\n *  specified attribute/operator couple.\n *  - if the operator is not provided either, then all the numeric filter on this attribute\n *  will be removed.\n *\n * This method resets the current page to 0.\n * @param  {string} attribute the attribute on which the numeric filter applies\n * @param  {string} [operator] the operator of the filter\n * @param  {number} [value] the value of the filter\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.removeNumericRefinement = function (\n  attribute,\n  operator,\n  value\n) {\n  this._change({\n    state: this.state\n      .resetPage()\n      .removeNumericRefinement(attribute, operator, value),\n    isPageReset: true,\n  });\n\n  return this;\n};\n\n/**\n * Removes a disjunctive filter to a faceted attribute with the `value` provided. If the\n * filter is not set, it doesn't change the filters.\n *\n * If the value is omitted, then this method will remove all the filters for the\n * attribute.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} [value] the associated value\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.removeDisjunctiveFacetRefinement = function (\n  facet,\n  value\n) {\n  this._change({\n    state: this.state\n      .resetPage()\n      .removeDisjunctiveFacetRefinement(facet, value),\n    isPageReset: true,\n  });\n\n  return this;\n};\n\n// eslint-disable-next-line valid-jsdoc\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#removeDisjunctiveFacetRefinement}\n */\nAlgoliaSearchHelper.prototype.removeDisjunctiveRefine = function () {\n  return this.removeDisjunctiveFacetRefinement.apply(this, arguments);\n};\n\n/**\n * Removes the refinement set on a hierarchical facet.\n * @param {string} facet the facet name\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @throws Error if the facet is not defined or if the facet is not refined\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.removeHierarchicalFacetRefinement = function (\n  facet\n) {\n  this._change({\n    state: this.state.resetPage().removeHierarchicalFacetRefinement(facet),\n    isPageReset: true,\n  });\n\n  return this;\n};\n\n/**\n * Removes a filter to a faceted attribute with the `value` provided. If the\n * filter is not set, it doesn't change the filters.\n *\n * If the value is omitted, then this method will remove all the filters for the\n * attribute.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} [value] the associated value\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.removeFacetRefinement = function (facet, value) {\n  this._change({\n    state: this.state.resetPage().removeFacetRefinement(facet, value),\n    isPageReset: true,\n  });\n\n  return this;\n};\n\n// eslint-disable-next-line valid-jsdoc\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#removeFacetRefinement}\n */\nAlgoliaSearchHelper.prototype.removeRefine = function () {\n  return this.removeFacetRefinement.apply(this, arguments);\n};\n\n/**\n * Removes an exclusion filter to a faceted attribute with the `value` provided. If the\n * filter is not set, it doesn't change the filters.\n *\n * If the value is omitted, then this method will remove all the filters for the\n * attribute.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} [value] the associated value\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.removeFacetExclusion = function (facet, value) {\n  this._change({\n    state: this.state.resetPage().removeExcludeRefinement(facet, value),\n    isPageReset: true,\n  });\n\n  return this;\n};\n\n// eslint-disable-next-line valid-jsdoc\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#removeFacetExclusion}\n */\nAlgoliaSearchHelper.prototype.removeExclude = function () {\n  return this.removeFacetExclusion.apply(this, arguments);\n};\n\n/**\n * Removes a tag filter with the `tag` provided. If the\n * filter is not set, it doesn't change the filters.\n *\n * This method resets the current page to 0.\n * @param {string} tag tag to remove from the filter\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.removeTag = function (tag) {\n  this._change({\n    state: this.state.resetPage().removeTagRefinement(tag),\n    isPageReset: true,\n  });\n\n  return this;\n};\n\n/**\n * Removes a \"frequently bought together\" recommendation query.\n *\n * @param {number} id identifier of the recommendation widget\n * @returns {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.removeFrequentlyBoughtTogether = function (id) {\n  this._recommendChange({\n    state: this.recommendState.removeParams(id),\n  });\n\n  return this;\n};\n\n/**\n * Removes a \"related products\" recommendation query.\n *\n * @param {number} id identifier of the recommendation widget\n * @returns {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.removeRelatedProducts = function (id) {\n  this._recommendChange({\n    state: this.recommendState.removeParams(id),\n  });\n\n  return this;\n};\n\n/**\n * Removes a \"trending items\" recommendation query.\n *\n * @param {number} id identifier of the recommendation widget\n * @returns {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.removeTrendingItems = function (id) {\n  this._recommendChange({\n    state: this.recommendState.removeParams(id),\n  });\n\n  return this;\n};\n\n/**\n * Removes a \"trending facets\" recommendation query.\n *\n * @param {number} id identifier of the recommendation widget\n * @returns {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.removeTrendingFacets = function (id) {\n  this._recommendChange({\n    state: this.recommendState.removeParams(id),\n  });\n\n  return this;\n};\n\n/**\n * Removes a \"looking similar\" recommendation query.\n *\n * @param {number} id identifier of the recommendation widget\n * @returns {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.removeLookingSimilar = function (id) {\n  this._recommendChange({\n    state: this.recommendState.removeParams(id),\n  });\n\n  return this;\n};\n\n/**\n * Adds or removes an exclusion filter to a faceted attribute with the `value` provided. If\n * the value is set then it removes it, otherwise it adds the filter.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} value the associated value\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.toggleFacetExclusion = function (facet, value) {\n  this._change({\n    state: this.state.resetPage().toggleExcludeFacetRefinement(facet, value),\n    isPageReset: true,\n  });\n\n  return this;\n};\n\n// eslint-disable-next-line valid-jsdoc\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#toggleFacetExclusion}\n */\nAlgoliaSearchHelper.prototype.toggleExclude = function () {\n  return this.toggleFacetExclusion.apply(this, arguments);\n};\n\n/**\n * Adds or removes a filter to a faceted attribute with the `value` provided. If\n * the value is set then it removes it, otherwise it adds the filter.\n *\n * This method can be used for conjunctive, disjunctive and hierarchical filters.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} value the associated value\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @throws Error will throw an error if the facet is not declared in the settings of the helper\n * @fires change\n * @chainable\n * @deprecated since version 2.19.0, see {@link AlgoliaSearchHelper#toggleFacetRefinement}\n */\nAlgoliaSearchHelper.prototype.toggleRefinement = function (facet, value) {\n  return this.toggleFacetRefinement(facet, value);\n};\n\n/**\n * Adds or removes a filter to a faceted attribute with the `value` provided. If\n * the value is set then it removes it, otherwise it adds the filter.\n *\n * This method can be used for conjunctive, disjunctive and hierarchical filters.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} value the associated value\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @throws Error will throw an error if the facet is not declared in the settings of the helper\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.toggleFacetRefinement = function (facet, value) {\n  this._change({\n    state: this.state.resetPage().toggleFacetRefinement(facet, value),\n    isPageReset: true,\n  });\n\n  return this;\n};\n\n// eslint-disable-next-line valid-jsdoc\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#toggleFacetRefinement}\n */\nAlgoliaSearchHelper.prototype.toggleRefine = function () {\n  return this.toggleFacetRefinement.apply(this, arguments);\n};\n\n/**\n * Adds or removes a tag filter with the `value` provided. If\n * the value is set then it removes it, otherwise it adds the filter.\n *\n * This method resets the current page to 0.\n * @param {string} tag tag to remove or add\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.toggleTag = function (tag) {\n  this._change({\n    state: this.state.resetPage().toggleTagRefinement(tag),\n    isPageReset: true,\n  });\n\n  return this;\n};\n\n/**\n * Increments the page number by one.\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n * @example\n * helper.setPage(0).nextPage().getPage();\n * // returns 1\n */\nAlgoliaSearchHelper.prototype.nextPage = function () {\n  var page = this.state.page || 0;\n  return this.setPage(page + 1);\n};\n\n/**\n * Decrements the page number by one.\n * @fires change\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @chainable\n * @example\n * helper.setPage(1).previousPage().getPage();\n * // returns 0\n */\nAlgoliaSearchHelper.prototype.previousPage = function () {\n  var page = this.state.page || 0;\n  return this.setPage(page - 1);\n};\n\n/**\n * @private\n * @param {number} page The page number\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @chainable\n * @fires change\n */\nfunction setCurrentPage(page) {\n  if (page < 0) throw new Error('Page requested below 0.');\n\n  this._change({\n    state: this.state.setPage(page),\n    isPageReset: false,\n  });\n\n  return this;\n}\n\n/**\n * Change the current page\n * @deprecated\n * @param  {number} page The page number\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.setCurrentPage = setCurrentPage;\n\n/**\n * Updates the current page.\n * @function\n * @param  {number} page The page number\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.setPage = setCurrentPage;\n\n/**\n * Updates the name of the index that will be targeted by the query.\n *\n * This method resets the current page to 0.\n * @param {string} name the index name\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.setIndex = function (name) {\n  this._change({\n    state: this.state.resetPage().setIndex(name),\n    isPageReset: true,\n  });\n\n  return this;\n};\n\n/**\n * Update a parameter of the search. This method reset the page\n *\n * The complete list of parameters is available on the\n * [Algolia website](https://www.algolia.com/doc/rest#query-an-index).\n * The most commonly used parameters have their own [shortcuts](#query-parameters-shortcuts)\n * or benefit from higher-level APIs (all the kind of filters and facets have their own API)\n *\n * This method resets the current page to 0.\n * @param {string} parameter name of the parameter to update\n * @param {any} value new value of the parameter\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n * @example\n * helper.setQueryParameter('hitsPerPage', 20).search();\n */\nAlgoliaSearchHelper.prototype.setQueryParameter = function (parameter, value) {\n  this._change({\n    state: this.state.resetPage().setQueryParameter(parameter, value),\n    isPageReset: true,\n  });\n\n  return this;\n};\n\n/**\n * Set the whole state (warning: will erase previous state)\n * @param {SearchParameters} newState the whole new state\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.setState = function (newState) {\n  this._change({\n    state: SearchParameters.make(newState),\n    isPageReset: false,\n  });\n\n  return this;\n};\n\n/**\n * Override the current state without triggering a change event.\n * Do not use this method unless you know what you are doing. (see the example\n * for a legit use case)\n * @param {SearchParameters} newState the whole new state\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @example\n *  helper.on('change', function(state){\n *    // In this function you might want to find a way to store the state in the url/history\n *    updateYourURL(state)\n *  })\n *  window.onpopstate = function(event){\n *    // This is naive though as you should check if the state is really defined etc.\n *    helper.overrideStateWithoutTriggeringChangeEvent(event.state).search()\n *  }\n * @chainable\n */\nAlgoliaSearchHelper.prototype.overrideStateWithoutTriggeringChangeEvent =\n  function (newState) {\n    this.state = new SearchParameters(newState);\n    return this;\n  };\n\n/**\n * Check if an attribute has any numeric, conjunctive, disjunctive or hierarchical filters.\n * @param {string} attribute the name of the attribute\n * @return {boolean} true if the attribute is filtered by at least one value\n * @example\n * // hasRefinements works with numeric, conjunctive, disjunctive and hierarchical filters\n * helper.hasRefinements('price'); // false\n * helper.addNumericRefinement('price', '>', 100);\n * helper.hasRefinements('price'); // true\n *\n * helper.hasRefinements('color'); // false\n * helper.addFacetRefinement('color', 'blue');\n * helper.hasRefinements('color'); // true\n *\n * helper.hasRefinements('material'); // false\n * helper.addDisjunctiveFacetRefinement('material', 'plastic');\n * helper.hasRefinements('material'); // true\n *\n * helper.hasRefinements('categories'); // false\n * helper.toggleFacetRefinement('categories', 'kitchen > knife');\n * helper.hasRefinements('categories'); // true\n *\n */\nAlgoliaSearchHelper.prototype.hasRefinements = function (attribute) {\n  if (objectHasKeys(this.state.getNumericRefinements(attribute))) {\n    return true;\n  } else if (this.state.isConjunctiveFacet(attribute)) {\n    return this.state.isFacetRefined(attribute);\n  } else if (this.state.isDisjunctiveFacet(attribute)) {\n    return this.state.isDisjunctiveFacetRefined(attribute);\n  } else if (this.state.isHierarchicalFacet(attribute)) {\n    return this.state.isHierarchicalFacetRefined(attribute);\n  }\n\n  // there's currently no way to know that the user did call `addNumericRefinement` at some point\n  // thus we cannot distinguish if there once was a numeric refinement that was cleared\n  // so we will return false in every other situations to be consistent\n  // while what we should do here is throw because we did not find the attribute in any type\n  // of refinement\n  return false;\n};\n\n/**\n * Check if a value is excluded for a specific faceted attribute. If the value\n * is omitted then the function checks if there is any excluding refinements.\n *\n * @param  {string}  facet name of the attribute for used for faceting\n * @param  {string}  [value] optional value. If passed will test that this value\n * is filtering the given facet.\n * @return {boolean} true if refined\n * @example\n * helper.isExcludeRefined('color'); // false\n * helper.isExcludeRefined('color', 'blue') // false\n * helper.isExcludeRefined('color', 'red') // false\n *\n * helper.addFacetExclusion('color', 'red');\n *\n * helper.isExcludeRefined('color'); // true\n * helper.isExcludeRefined('color', 'blue') // false\n * helper.isExcludeRefined('color', 'red') // true\n */\nAlgoliaSearchHelper.prototype.isExcluded = function (facet, value) {\n  return this.state.isExcludeRefined(facet, value);\n};\n\n// eslint-disable-next-line valid-jsdoc\n/**\n * @deprecated since 2.4.0, see {@link AlgoliaSearchHelper#hasRefinements}\n */\nAlgoliaSearchHelper.prototype.isDisjunctiveRefined = function (facet, value) {\n  return this.state.isDisjunctiveFacetRefined(facet, value);\n};\n\n/**\n * Check if the string is a currently filtering tag.\n * @param {string} tag tag to check\n * @return {boolean} true if the tag is currently refined\n */\nAlgoliaSearchHelper.prototype.hasTag = function (tag) {\n  return this.state.isTagRefined(tag);\n};\n\n// eslint-disable-next-line valid-jsdoc\n/**\n * @deprecated since 2.4.0, see {@link AlgoliaSearchHelper#hasTag}\n */\nAlgoliaSearchHelper.prototype.isTagRefined = function () {\n  return this.hasTagRefinements.apply(this, arguments);\n};\n\n/**\n * Get the name of the currently used index.\n * @return {string} name of the index\n * @example\n * helper.setIndex('highestPrice_products').getIndex();\n * // returns 'highestPrice_products'\n */\nAlgoliaSearchHelper.prototype.getIndex = function () {\n  return this.state.index;\n};\n\nfunction getCurrentPage() {\n  return this.state.page;\n}\n\n/**\n * Get the currently selected page\n * @deprecated\n * @return {number} the current page\n */\nAlgoliaSearchHelper.prototype.getCurrentPage = getCurrentPage;\n/**\n * Get the currently selected page\n * @function\n * @return {number} the current page\n */\nAlgoliaSearchHelper.prototype.getPage = getCurrentPage;\n\n/**\n * Get all the tags currently set to filters the results.\n *\n * @return {string[]} The list of tags currently set.\n */\nAlgoliaSearchHelper.prototype.getTags = function () {\n  return this.state.tagRefinements;\n};\n\n/**\n * Get the list of refinements for a given attribute. This method works with\n * conjunctive, disjunctive, excluding and numerical filters.\n *\n * See also SearchResults#getRefinements\n *\n * @param {string} facetName attribute name used for faceting\n * @return {Array.<FacetRefinement|NumericRefinement>} All Refinement are objects that contain a value, and\n * a type. Numeric also contains an operator.\n * @example\n * helper.addNumericRefinement('price', '>', 100);\n * helper.getRefinements('price');\n * // [\n * //   {\n * //     \"value\": [\n * //       100\n * //     ],\n * //     \"operator\": \">\",\n * //     \"type\": \"numeric\"\n * //   }\n * // ]\n * @example\n * helper.addFacetRefinement('color', 'blue');\n * helper.addFacetExclusion('color', 'red');\n * helper.getRefinements('color');\n * // [\n * //   {\n * //     \"value\": \"blue\",\n * //     \"type\": \"conjunctive\"\n * //   },\n * //   {\n * //     \"value\": \"red\",\n * //     \"type\": \"exclude\"\n * //   }\n * // ]\n * @example\n * helper.addDisjunctiveFacetRefinement('material', 'plastic');\n * // [\n * //   {\n * //     \"value\": \"plastic\",\n * //     \"type\": \"disjunctive\"\n * //   }\n * // ]\n */\nAlgoliaSearchHelper.prototype.getRefinements = function (facetName) {\n  var refinements = [];\n\n  if (this.state.isConjunctiveFacet(facetName)) {\n    var conjRefinements = this.state.getConjunctiveRefinements(facetName);\n\n    conjRefinements.forEach(function (r) {\n      refinements.push({\n        value: r,\n        type: 'conjunctive',\n      });\n    });\n\n    var excludeRefinements = this.state.getExcludeRefinements(facetName);\n\n    excludeRefinements.forEach(function (r) {\n      refinements.push({\n        value: r,\n        type: 'exclude',\n      });\n    });\n  } else if (this.state.isDisjunctiveFacet(facetName)) {\n    var disjunctiveRefinements =\n      this.state.getDisjunctiveRefinements(facetName);\n\n    disjunctiveRefinements.forEach(function (r) {\n      refinements.push({\n        value: r,\n        type: 'disjunctive',\n      });\n    });\n  }\n\n  var numericRefinements = this.state.getNumericRefinements(facetName);\n\n  Object.keys(numericRefinements).forEach(function (operator) {\n    var value = numericRefinements[operator];\n\n    refinements.push({\n      value: value,\n      operator: operator,\n      type: 'numeric',\n    });\n  });\n\n  return refinements;\n};\n\n/**\n * Return the current refinement for the (attribute, operator)\n * @param {string} attribute attribute in the record\n * @param {string} operator operator applied on the refined values\n * @return {Array.<number|number[]>} refined values\n */\nAlgoliaSearchHelper.prototype.getNumericRefinement = function (\n  attribute,\n  operator\n) {\n  return this.state.getNumericRefinement(attribute, operator);\n};\n\n/**\n * Get the current breadcrumb for a hierarchical facet, as an array\n * @param  {string} facetName Hierarchical facet name\n * @return {array.<string>} the path as an array of string\n */\nAlgoliaSearchHelper.prototype.getHierarchicalFacetBreadcrumb = function (\n  facetName\n) {\n  return this.state.getHierarchicalFacetBreadcrumb(facetName);\n};\n\n// /////////// PRIVATE\n\n/**\n * Perform the underlying queries\n * @private\n * @param {object} options options for the query\n * @param {boolean} [options.onlyWithDerivedHelpers=false] if true, only the derived helpers will be queried\n * @return {undefined} does not return anything\n * @fires search\n * @fires result\n * @fires error\n */\nAlgoliaSearchHelper.prototype._search = function (options) {\n  var state = this.state;\n  var states = [];\n  var mainQueries = [];\n\n  if (!options.onlyWithDerivedHelpers) {\n    mainQueries = requestBuilder._getQueries(state.index, state);\n\n    states.push({\n      state: state,\n      queriesCount: mainQueries.length,\n      helper: this,\n    });\n\n    this.emit('search', {\n      state: state,\n      results: this.lastResults,\n    });\n  }\n\n  var derivedQueries = this.derivedHelpers.map(function (derivedHelper) {\n    var derivedState = derivedHelper.getModifiedState(state);\n    var derivedStateQueries = derivedState.index\n      ? requestBuilder._getQueries(derivedState.index, derivedState)\n      : [];\n\n    states.push({\n      state: derivedState,\n      queriesCount: derivedStateQueries.length,\n      helper: derivedHelper,\n    });\n\n    derivedHelper.emit('search', {\n      state: derivedState,\n      results: derivedHelper.lastResults,\n    });\n\n    return derivedStateQueries;\n  });\n\n  var queries = Array.prototype.concat.apply(mainQueries, derivedQueries);\n\n  var queryId = this._queryId++;\n  this._currentNbQueries++;\n\n  if (!queries.length) {\n    return Promise.resolve({ results: [] }).then(\n      this._dispatchAlgoliaResponse.bind(this, states, queryId)\n    );\n  }\n\n  try {\n    this.client\n      .search(queries)\n      .then(this._dispatchAlgoliaResponse.bind(this, states, queryId))\n      .catch(this._dispatchAlgoliaError.bind(this, queryId));\n  } catch (error) {\n    // If we reach this part, we're in an internal error state\n    this.emit('error', {\n      error: error,\n    });\n  }\n\n  return undefined;\n};\n\n/**\n * Perform the underlying queries\n * @private\n * @param {boolean} [options.onlyWithDerivedHelpers=false] if true, only the derived helpers will be queried\n * @return {undefined} does not return anything\n * @fires search\n * @fires result\n * @fires error\n */\nAlgoliaSearchHelper.prototype._runComposition = function () {\n  var state = this.state;\n  var states = [];\n  var mainQueries = [];\n\n  var derivedQueries = this.derivedHelpers.map(function (derivedHelper) {\n    var derivedState = derivedHelper.getModifiedState(state);\n    var derivedStateQueries =\n      requestBuilder._getCompositionQueries(derivedState);\n\n    states.push({\n      state: derivedState,\n      queriesCount: derivedStateQueries.length,\n      helper: derivedHelper,\n    });\n\n    derivedHelper.emit('search', {\n      state: derivedState,\n      results: derivedHelper.lastResults,\n    });\n\n    return derivedStateQueries;\n  });\n\n  var queries = Array.prototype.concat.apply(mainQueries, derivedQueries);\n\n  var queryId = this._queryId++;\n  this._currentNbQueries++;\n\n  if (!queries.length) {\n    return Promise.resolve({ results: [] }).then(\n      this._dispatchAlgoliaResponse.bind(this, states, queryId)\n    );\n  }\n\n  if (queries.length > 1) {\n    throw new Error('Only one query is allowed when using a composition.');\n  }\n\n  var query = queries[0];\n\n  try {\n    this.client\n      .search(query)\n      .then(this._dispatchAlgoliaResponse.bind(this, states, queryId))\n      .catch(this._dispatchAlgoliaError.bind(this, queryId));\n  } catch (error) {\n    // If we reach this part, we're in an internal error state\n    this.emit('error', {\n      error: error,\n    });\n  }\n\n  return undefined;\n};\n\nAlgoliaSearchHelper.prototype._recommend = function () {\n  var searchState = this.state;\n  var recommendState = this.recommendState;\n  var index = this.getIndex();\n  var states = [{ state: recommendState, index: index, helper: this }];\n  var ids = recommendState.params.map(function (param) {\n    return param.$$id;\n  });\n\n  this.emit('fetch', {\n    recommend: {\n      state: recommendState,\n      results: this.lastRecommendResults,\n    },\n  });\n\n  var cache = this._recommendCache;\n\n  var derivedQueries = this.derivedHelpers.map(function (derivedHelper) {\n    var derivedIndex = derivedHelper.getModifiedState(searchState).index;\n    if (!derivedIndex) {\n      return [];\n    }\n\n    // Contrary to what is done when deriving the search state, we don't want to\n    // provide the current recommend state to the derived helper, as it would\n    // inherit unwanted queries. We instead provide an empty recommend state.\n    var derivedState = derivedHelper.getModifiedRecommendState(\n      new RecommendParameters()\n    );\n    states.push({\n      state: derivedState,\n      index: derivedIndex,\n      helper: derivedHelper,\n    });\n\n    ids = Array.prototype.concat.apply(\n      ids,\n      derivedState.params.map(function (param) {\n        return param.$$id;\n      })\n    );\n\n    derivedHelper.emit('fetch', {\n      recommend: {\n        state: derivedState,\n        results: derivedHelper.lastRecommendResults,\n      },\n    });\n\n    return derivedState._buildQueries(derivedIndex, cache);\n  });\n\n  var queries = Array.prototype.concat.apply(\n    this.recommendState._buildQueries(index, cache),\n    derivedQueries\n  );\n\n  if (queries.length === 0) {\n    return;\n  }\n\n  if (\n    queries.length > 0 &&\n    typeof this.client.getRecommendations === 'undefined'\n  ) {\n    // eslint-disable-next-line no-console\n    console.warn(\n      'Please update algoliasearch/lite to the latest version in order to use recommend widgets.'\n    );\n    return;\n  }\n\n  var queryId = this._recommendQueryId++;\n  this._currentNbRecommendQueries++;\n\n  try {\n    this.client\n      .getRecommendations(queries)\n      .then(this._dispatchRecommendResponse.bind(this, queryId, states, ids))\n      .catch(this._dispatchRecommendError.bind(this, queryId));\n  } catch (error) {\n    // If we reach this part, we're in an internal error state\n    this.emit('error', {\n      error: error,\n    });\n  }\n\n  return;\n};\n\n/**\n * Transform the responses as sent by the server and transform them into a user\n * usable object that merge the results of all the batch requests. It will dispatch\n * over the different helper + derived helpers (when there are some).\n * @private\n * @param {array.<{SearchParameters, AlgoliaQueries, AlgoliaSearchHelper}>} states state used to generate the request\n * @param {number} queryId id of the current request\n * @param {object} content content of the response\n * @return {undefined}\n */\nAlgoliaSearchHelper.prototype._dispatchAlgoliaResponse = function (\n  states,\n  queryId,\n  content\n) {\n  // eslint-disable-next-line consistent-this\n  var self = this;\n\n  // @TODO remove the number of outdated queries discarded instead of just one\n\n  if (queryId < this._lastQueryIdReceived) {\n    // Outdated answer\n    return;\n  }\n\n  this._currentNbQueries -= queryId - this._lastQueryIdReceived;\n  this._lastQueryIdReceived = queryId;\n\n  if (this._currentNbQueries === 0) this.emit('searchQueueEmpty');\n\n  var results = content.results.slice();\n  var rawContent = Object.keys(content).reduce(function (value, key) {\n    if (key !== 'results') value[key] = content[key];\n    return value;\n  }, {});\n\n  if (Object.keys(rawContent).length <= 0) {\n    rawContent = undefined;\n  }\n\n  states.forEach(function (s) {\n    var state = s.state;\n    var queriesCount = s.queriesCount;\n    var helper = s.helper;\n    var specificResults = results.splice(0, queriesCount);\n\n    if (!state.index) {\n      helper.emit('result', {\n        results: null,\n        state: state,\n      });\n      return;\n    }\n\n    helper.lastResults = new SearchResults(\n      state,\n      specificResults,\n      self._searchResultsOptions\n    );\n    if (rawContent !== undefined) helper.lastResults._rawContent = rawContent;\n\n    helper.emit('result', {\n      results: helper.lastResults,\n      state: state,\n    });\n  });\n};\n\nAlgoliaSearchHelper.prototype._dispatchRecommendResponse = function (\n  queryId,\n  states,\n  ids,\n  content\n) {\n  // @TODO remove the number of outdated queries discarded instead of just one\n\n  if (queryId < this._lastRecommendQueryIdReceived) {\n    // Outdated answer\n    return;\n  }\n\n  this._currentNbRecommendQueries -=\n    queryId - this._lastRecommendQueryIdReceived;\n  this._lastRecommendQueryIdReceived = queryId;\n\n  if (this._currentNbRecommendQueries === 0) this.emit('recommendQueueEmpty');\n\n  var cache = this._recommendCache;\n\n  var idsMap = {};\n  ids\n    .filter(function (id) {\n      return cache[id] === undefined;\n    })\n    .forEach(function (id, index) {\n      if (!idsMap[id]) idsMap[id] = [];\n\n      idsMap[id].push(index);\n    });\n\n  Object.keys(idsMap).forEach(function (id) {\n    var indices = idsMap[id];\n    var firstResult = content.results[indices[0]];\n    if (indices.length === 1) {\n      cache[id] = firstResult;\n      return;\n    }\n    cache[id] = Object.assign({}, firstResult, {\n      hits: sortAndMergeRecommendations(\n        indices.map(function (idx) {\n          return content.results[idx].hits;\n        })\n      ),\n    });\n  });\n\n  var results = {};\n  ids.forEach(function (id) {\n    results[id] = cache[id];\n  });\n\n  states.forEach(function (s) {\n    var state = s.state;\n    var helper = s.helper;\n\n    if (!s.index) {\n      // eslint-disable-next-line no-warning-comments\n      // TODO: emit \"result\" event when events for Recommend are implemented\n      helper.emit('recommend:result', {\n        results: null,\n        state: state,\n      });\n      return;\n    }\n\n    helper.lastRecommendResults = new RecommendResults(state, results);\n\n    // eslint-disable-next-line no-warning-comments\n    // TODO: emit \"result\" event when events for Recommend are implemented\n    helper.emit('recommend:result', {\n      recommend: {\n        results: helper.lastRecommendResults,\n        state: state,\n      },\n    });\n  });\n};\n\nAlgoliaSearchHelper.prototype._dispatchAlgoliaError = function (\n  queryId,\n  error\n) {\n  if (queryId < this._lastQueryIdReceived) {\n    // Outdated answer\n    return;\n  }\n\n  this._currentNbQueries -= queryId - this._lastQueryIdReceived;\n  this._lastQueryIdReceived = queryId;\n\n  this.emit('error', {\n    error: error,\n  });\n\n  if (this._currentNbQueries === 0) this.emit('searchQueueEmpty');\n};\n\nAlgoliaSearchHelper.prototype._dispatchRecommendError = function (\n  queryId,\n  error\n) {\n  if (queryId < this._lastRecommendQueryIdReceived) {\n    // Outdated answer\n    return;\n  }\n\n  this._currentNbRecommendQueries -=\n    queryId - this._lastRecommendQueryIdReceived;\n  this._lastRecommendQueryIdReceived = queryId;\n\n  this.emit('error', {\n    error: error,\n  });\n\n  if (this._currentNbRecommendQueries === 0) this.emit('recommendQueueEmpty');\n};\n\nAlgoliaSearchHelper.prototype.containsRefinement = function (\n  query,\n  facetFilters,\n  numericFilters,\n  tagFilters\n) {\n  return (\n    query ||\n    facetFilters.length !== 0 ||\n    numericFilters.length !== 0 ||\n    tagFilters.length !== 0\n  );\n};\n\n/**\n * Test if there are some disjunctive refinements on the facet\n * @private\n * @param {string} facet the attribute to test\n * @return {boolean} true if there are refinements on this attribute\n */\nAlgoliaSearchHelper.prototype._hasDisjunctiveRefinements = function (facet) {\n  return (\n    this.state.disjunctiveRefinements[facet] &&\n    this.state.disjunctiveRefinements[facet].length > 0\n  );\n};\n\nAlgoliaSearchHelper.prototype._change = function (event) {\n  var state = event.state;\n  var isPageReset = event.isPageReset;\n\n  if (state !== this.state) {\n    this.state = state;\n\n    this.emit('change', {\n      state: this.state,\n      results: this.lastResults,\n      isPageReset: isPageReset,\n    });\n  }\n};\n\nAlgoliaSearchHelper.prototype._recommendChange = function (event) {\n  var state = event.state;\n\n  if (state !== this.recommendState) {\n    this.recommendState = state;\n\n    // eslint-disable-next-line no-warning-comments\n    // TODO: emit \"change\" event when events for Recommend are implemented\n    this.emit('recommend:change', {\n      search: {\n        results: this.lastResults,\n        state: this.state,\n      },\n      recommend: {\n        results: this.lastRecommendResults,\n        state: this.recommendState,\n      },\n    });\n  }\n};\n\n/**\n * Clears the cache of the underlying Algolia client.\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n */\nAlgoliaSearchHelper.prototype.clearCache = function () {\n  if (this.client.clearCache) this.client.clearCache();\n  return this;\n};\n\n/**\n * Updates the internal client instance. If the reference of the clients\n * are equal then no update is actually done.\n * @param  {AlgoliaSearch} newClient an AlgoliaSearch client\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n */\nAlgoliaSearchHelper.prototype.setClient = function (newClient) {\n  if (this.client === newClient) return this;\n\n  if (typeof newClient.addAlgoliaAgent === 'function') {\n    newClient.addAlgoliaAgent('JS Helper (' + version + ')');\n  }\n  this.client = newClient;\n\n  return this;\n};\n\n/**\n * Gets the instance of the currently used client.\n * @return {AlgoliaSearch} the currently used client\n */\nAlgoliaSearchHelper.prototype.getClient = function () {\n  return this.client;\n};\n\n/**\n * Creates an derived instance of the Helper. A derived helper\n * is a way to request other indices synchronised with the lifecycle\n * of the main Helper. This mechanism uses the multiqueries feature\n * of Algolia to aggregate all the requests in a single network call.\n *\n * This method takes a function that is used to create a new SearchParameter\n * that will be used to create requests to Algolia. Those new requests\n * are created just before the `search` event. The signature of the function\n * is `SearchParameters -> SearchParameters`.\n *\n * This method returns a new DerivedHelper which is an EventEmitter\n * that fires the same `search`, `result` and `error` events. Those\n * events, however, will receive data specific to this DerivedHelper\n * and the SearchParameters that is returned by the call of the\n * parameter function.\n * @param {function} fn SearchParameters -> SearchParameters\n * @param {function} recommendFn RecommendParameters -> RecommendParameters\n * @return {DerivedHelper} a new DerivedHelper\n */\nAlgoliaSearchHelper.prototype.derive = function (fn, recommendFn) {\n  var derivedHelper = new DerivedHelper(this, fn, recommendFn);\n  this.derivedHelpers.push(derivedHelper);\n  return derivedHelper;\n};\n\n/**\n * This method detaches a derived Helper from the main one. Prefer using the one from the\n * derived helper itself, to remove the event listeners too.\n * @private\n * @param  {DerivedHelper} derivedHelper the derived helper to detach\n * @return {undefined} nothing is returned\n * @throws Error\n */\nAlgoliaSearchHelper.prototype.detachDerivedHelper = function (derivedHelper) {\n  var pos = this.derivedHelpers.indexOf(derivedHelper);\n  if (pos === -1) throw new Error('Derived helper already detached');\n  this.derivedHelpers.splice(pos, 1);\n};\n\n/**\n * This method returns true if there is currently at least one on-going search.\n * @return {boolean} true if there is a search pending\n */\nAlgoliaSearchHelper.prototype.hasPendingRequests = function () {\n  return this._currentNbQueries > 0;\n};\n\n/**\n * @typedef AlgoliaSearchHelper.NumericRefinement\n * @type {object}\n * @property {number[]} value the numbers that are used for filtering this attribute with\n * the operator specified.\n * @property {string} operator the faceting data: value, number of entries\n * @property {string} type will be 'numeric'\n */\n\n/**\n * @typedef AlgoliaSearchHelper.FacetRefinement\n * @type {object}\n * @property {string} value the string use to filter the attribute\n * @property {string} type the type of filter: 'conjunctive', 'disjunctive', 'exclude'\n */\n\nmodule.exports = AlgoliaSearchHelper;\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 5130, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5135, "column": 0}, "map": {"version":3,"sources":["file:///root/webmakerr/storefront/node_modules/algoliasearch-helper/index.js"],"sourcesContent":["'use strict';\n\nvar AlgoliaSearchHelper = require('./src/algoliasearch.helper');\nvar RecommendParameters = require('./src/RecommendParameters');\nvar RecommendResults = require('./src/RecommendResults');\nvar SearchParameters = require('./src/SearchParameters');\nvar SearchResults = require('./src/SearchResults');\n\n/**\n * The algoliasearchHelper module is the function that will let its\n * contains everything needed to use the Algoliasearch\n * Helper. It is a also a function that instanciate the helper.\n * To use the helper, you also need the Algolia JS client v3.\n * @example\n * //using the UMD build\n * var client = algoliasearch('latency', '6be0576ff61c053d5f9a3225e2a90f76');\n * var helper = algoliasearchHelper(client, 'bestbuy', {\n *   facets: ['shipping'],\n *   disjunctiveFacets: ['category']\n * });\n * helper.on('result', function(event) {\n *   console.log(event.results);\n * });\n * helper\n *   .toggleFacetRefinement('category', 'Movies & TV Shows')\n *   .toggleFacetRefinement('shipping', 'Free shipping')\n *   .search();\n * @example\n * // The helper is an event emitter using the node API\n * helper.on('result', updateTheResults);\n * helper.once('result', updateTheResults);\n * helper.removeListener('result', updateTheResults);\n * helper.removeAllListeners('result');\n * @module algoliasearchHelper\n * @param  {AlgoliaSearch} client an AlgoliaSearch client\n * @param  {string} index the name of the index to query\n * @param  {SearchParameters|object} opts an object defining the initial config of the search. It doesn't have to be a {SearchParameters}, just an object containing the properties you need from it.\n * @param {SearchResultsOptions|object} searchResultsOptions an object defining the options to use when creating the search results.\n * @return {AlgoliaSearchHelper} The helper instance\n */\nfunction algoliasearchHelper(client, index, opts, searchResultsOptions) {\n  return new AlgoliaSearchHelper(client, index, opts, searchResultsOptions);\n}\n\n/**\n * The version currently used\n * @member module:algoliasearchHelper.version\n * @type {number}\n */\nalgoliasearchHelper.version = require('./src/version');\n\n/**\n * Constructor for the Helper.\n * @member module:algoliasearchHelper.AlgoliaSearchHelper\n * @type {AlgoliaSearchHelper}\n */\nalgoliasearchHelper.AlgoliaSearchHelper = AlgoliaSearchHelper;\n\n/**\n * Constructor for the object containing all the parameters of the search.\n * @member module:algoliasearchHelper.SearchParameters\n * @type {SearchParameters}\n */\nalgoliasearchHelper.SearchParameters = SearchParameters;\n\n/**\n * Constructor for the object containing all the parameters for Recommend.\n * @member module:algoliasearchHelper.RecommendParameters\n * @type {RecommendParameters}\n */\nalgoliasearchHelper.RecommendParameters = RecommendParameters;\n\n/**\n * Constructor for the object containing the results of the search.\n * @member module:algoliasearchHelper.SearchResults\n * @type {SearchResults}\n */\nalgoliasearchHelper.SearchResults = SearchResults;\n\n/**\n * Constructor for the object containing the results for Recommend.\n * @member module:algoliasearchHelper.RecommendResults\n * @type {RecommendResults}\n */\nalgoliasearchHelper.RecommendResults = RecommendResults;\n\nmodule.exports = algoliasearchHelper;\n"],"names":[],"mappings":"AAAA;AAEA,IAAI;AACJ,IAAI;AACJ,IAAI;AACJ,IAAI;AACJ,IAAI;AAEJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA+BC,GACD,SAAS,oBAAoB,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,oBAAoB;IACpE,OAAO,IAAI,oBAAoB,QAAQ,OAAO,MAAM;AACtD;AAEA;;;;CAIC,GACD,oBAAoB,OAAO;AAE3B;;;;CAIC,GACD,oBAAoB,mBAAmB,GAAG;AAE1C;;;;CAIC,GACD,oBAAoB,gBAAgB,GAAG;AAEvC;;;;CAIC,GACD,oBAAoB,mBAAmB,GAAG;AAE1C;;;;CAIC,GACD,oBAAoB,aAAa,GAAG;AAEpC;;;;CAIC,GACD,oBAAoB,gBAAgB,GAAG;AAEvC,OAAO,OAAO,GAAG","ignoreList":[0]}},
    {"offset": {"line": 5206, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}