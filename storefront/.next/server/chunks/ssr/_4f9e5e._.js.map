{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///root/webmakerr/storefront/src/components/sections/OrderConfirmedSection/OrderConfirmedSection.tsx"],"sourcesContent":["import OrderDetails from \"@/components/organisms/OrderDefails/OrderDetails\"\nimport OrderShipping from \"@/components/organisms/OrderDefails/OrderShipping\"\nimport OrderTotals from \"@/components/organisms/OrderDefails/OrderTotals\"\nimport OrderItems from \"@/components/organisms/OrderItems/OrderItems\"\nimport { HttpTypes } from \"@medusajs/types\"\nimport { Heading, Text } from \"@medusajs/ui\"\n\nexport const OrderConfirmedSection = ({\n  order,\n}: {\n  order: HttpTypes.StoreOrder\n}) => {\n  return (\n    <div className=\"py-6\">\n      <div className=\"content-container flex flex-col justify-center items-center gap-y-10 max-w-4xl h-full w-full mx-auto\">\n        <div\n          className=\"flex flex-col gap-4 max-w-4xl h-full bg-white w-full py-10\"\n          data-testid=\"order-complete-container\"\n        >\n          <div className=\"text-center w-full\">\n            <Heading\n              level=\"h1\"\n              className=\"flex flex-col gap-y-3 text-ui-fg-base text-3xl mb-4\"\n            >\n              <span>Thank you!</span>\n              <span>Your order was placed successfully.</span>\n            </Heading>\n\n            <Text>\n              We have sent the order confirmation details to{\" \"}\n              <span\n                className=\"text-ui-fg-medium-plus font-semibold\"\n                data-testid=\"order-email\"\n              >\n                {order.email}\n              </span>\n              .\n            </Text>\n          </div>\n          {/* <OrderDetails order={order} />\n          <OrderItems order={order} />\n          <OrderTotals totals={order} />\n          <OrderShipping order={order} /> */}\n          {/*<PaymentDetails order={order} />\n          <Help /> */}\n        </div>\n      </div>\n    </div>\n  )\n}\n"],"names":[],"mappings":";;;;AAKA;AAAA;;;AAEO,MAAM,wBAAwB,CAAC,EACpC,KAAK,EAGN;IACC,qBACE,8OAAC;QAAI,WAAU;kBACb,cAAA,8OAAC;YAAI,WAAU;sBACb,cAAA,8OAAC;gBACC,WAAU;gBACV,eAAY;0BAEZ,cAAA,8OAAC;oBAAI,WAAU;;sCACb,8OAAC,mLAAA,CAAA,UAAO;4BACN,OAAM;4BACN,WAAU;;8CAEV,8OAAC;8CAAK;;;;;;8CACN,8OAAC;8CAAK;;;;;;;;;;;;sCAGR,8OAAC,6KAAA,CAAA,OAAI;;gCAAC;gCAC2C;8CAC/C,8OAAC;oCACC,WAAU;oCACV,eAAY;8CAEX,MAAM,KAAK;;;;;;gCACP;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAcrB"}},
    {"offset": {"line": 92, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 98, "column": 0}, "map": {"version":3,"sources":["file:///root/webmakerr/storefront/src/lib/data/orders.ts"],"sourcesContent":["\"use server\"\n\nimport { SellerProps } from \"@/types/seller\"\nimport { sdk } from \"../config\"\nimport medusaError from \"../helpers/medusa-error\"\nimport { getAuthHeaders, getCacheOptions } from \"./cookies\"\nimport { HttpTypes } from \"@medusajs/types\"\n\nexport const retrieveOrderSet = async (id: string) => {\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  return sdk.client\n    .fetch<any>(`/store/order-set/${id}`, {\n      method: \"GET\",\n      headers,\n      cache: \"no-cache\",\n    })\n    .then(({ order_set }) => order_set)\n    .catch((err) => medusaError(err))\n}\n\nexport const retrieveOrder = async (id: string) => {\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  const next = {\n    ...(await getCacheOptions(\"orders\")),\n  }\n\n  return sdk.client\n    .fetch<HttpTypes.StoreOrderResponse & { seller: SellerProps }>(\n      `/store/orders/${id}`,\n      {\n        method: \"GET\",\n        query: {\n          fields:\n            \"*payment_collections.payments,*items,*items.metadata,*items.variant,*items.product,*seller,*order_set\",\n        },\n        headers,\n        next,\n        cache: \"force-cache\",\n      }\n    )\n    .then(({ order }) => order)\n    .catch((err) => medusaError(err))\n}\n\nexport const createReturnRequest = async (data: any) => {\n  const headers = {\n    ...(await getAuthHeaders()),\n    \"Content-Type\": \"application/json\",\n    \"x-publishable-api-key\": process.env\n      .NEXT_PUBLIC_MEDUSA_PUBLISHABLE_KEY as string,\n  }\n\n  const response = await fetch(\n    `${process.env.MEDUSA_BACKEND_URL}/store/return-request`,\n    {\n      method: \"POST\",\n      headers,\n      body: JSON.stringify(data),\n    }\n  )\n    .then(async (res) => await res.json())\n    .catch((err) => medusaError(err))\n\n  return response\n}\n\nexport const getReturns = async () => {\n  const headers = await getAuthHeaders()\n\n  return sdk.client\n    .fetch<{\n      order_return_requests: Array<any>\n    }>(`/store/return-request`, {\n      method: \"GET\",\n      headers,\n      cache: \"force-cache\",\n      query: { fields: \"*line_items.reason_id\" },\n    })\n    .then((res) => res)\n    .catch((err) => medusaError(err))\n}\n\nexport const retriveReturnMethods = async (order_id: string) => {\n  const headers = await getAuthHeaders()\n\n  return sdk.client\n    .fetch<{\n      shipping_options: Array<any>\n    }>(`/store/shipping-options/return?order_id=${order_id}`, {\n      method: \"GET\",\n      headers,\n      cache: \"no-cache\",\n    })\n    .then(({ shipping_options }) => shipping_options)\n    .catch(() => [])\n}\n\nexport const listOrders = async (\n  limit: number = 10,\n  offset: number = 0,\n  filters?: Record<string, any>\n) => {\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  const next = {\n    ...(await getCacheOptions(\"orders\")),\n  }\n\n  return sdk.client\n    .fetch<{\n      orders: Array<\n        HttpTypes.StoreOrder & {\n          seller: { id: string; name: string; reviews?: any[] }\n          reviews: any[]\n        }\n      >\n    }>(`/store/orders`, {\n      method: \"GET\",\n      query: {\n        limit,\n        offset,\n        order: \"-created_at\",\n        fields:\n          \"*items,+items.metadata,*items.variant,*items.product,*seller,*reviews,*order_set\",\n        ...filters,\n      },\n      headers,\n      next,\n      cache: \"no-cache\",\n    })\n    .then(({ orders }) => orders)\n    .catch((err) => medusaError(err))\n}\n\nexport const createTransferRequest = async (\n  state: {\n    success: boolean\n    error: string | null\n    order: HttpTypes.StoreOrder | null\n  },\n  formData: FormData\n): Promise<{\n  success: boolean\n  error: string | null\n  order: HttpTypes.StoreOrder | null\n}> => {\n  const id = formData.get(\"order_id\") as string\n\n  if (!id) {\n    return { success: false, error: \"Order ID is required\", order: null }\n  }\n\n  const headers = await getAuthHeaders()\n\n  return await sdk.store.order\n    .requestTransfer(\n      id,\n      {},\n      {\n        fields: \"id, email\",\n      },\n      headers\n    )\n    .then(({ order }) => ({ success: true, error: null, order }))\n    .catch((err) => ({ success: false, error: err.message, order: null }))\n}\n\nexport const acceptTransferRequest = async (id: string, token: string) => {\n  const headers = await getAuthHeaders()\n\n  return await sdk.store.order\n    .acceptTransfer(id, { token }, {}, headers)\n    .then(({ order }) => ({ success: true, error: null, order }))\n    .catch((err) => ({ success: false, error: err.message, order: null }))\n}\n\nexport const declineTransferRequest = async (id: string, token: string) => {\n  const headers = await getAuthHeaders()\n\n  return await sdk.store.order\n    .declineTransfer(id, { token }, {}, headers)\n    .then(({ order }) => ({ success: true, error: null, order }))\n    .catch((err) => ({ success: false, error: err.message, order: null }))\n}\n\nexport const retrieveReturnReasons = async () => {\n  const headers = await getAuthHeaders()\n\n  return sdk.client\n    .fetch<{\n      return_reasons: Array<HttpTypes.StoreReturnReason>\n    }>(`/store/return-reasons`, {\n      method: \"GET\",\n      headers,\n      cache: \"force-cache\",\n    })\n    .then(({ return_reasons }) => return_reasons)\n    .catch((err) => medusaError(err))\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 282, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 288, "column": 0}, "map": {"version":3,"sources":["file:///root/webmakerr/storefront/src/app/%5Blocale%5D/%28main%29/order/%5Bid%5D/confirmed/page.tsx"],"sourcesContent":["import { OrderConfirmedSection } from \"@/components/sections/OrderConfirmedSection/OrderConfirmedSection\"\nimport { retrieveOrder } from \"@/lib/data/orders\"\nimport { Metadata } from \"next\"\nimport { notFound } from \"next/navigation\"\n\ntype Props = {\n  params: Promise<{ id: string }>\n}\nexport const metadata: Metadata = {\n  title: \"Order Confirmed\",\n  description: \"You purchase was successful\",\n}\n\nexport default async function OrderConfirmedPage(props: Props) {\n  const params = await props.params\n  const order = await retrieveOrder(params.id).catch(() => null)\n\n  if (!order) {\n    return notFound()\n  }\n\n  return (\n    <main className=\"container\">\n      <OrderConfirmedSection order={order} />\n    </main>\n  )\n}\n"],"names":[],"mappings":";;;;;AAAA;AACA;AAEA;AAAA;;;;;AAKO,MAAM,WAAqB;IAChC,OAAO;IACP,aAAa;AACf;AAEe,eAAe,mBAAmB,KAAY;IAC3D,MAAM,SAAS,MAAM,MAAM,MAAM;IACjC,MAAM,QAAQ,MAAM,CAAA,GAAA,4HAAA,CAAA,gBAAa,AAAD,EAAE,OAAO,EAAE,EAAE,KAAK,CAAC,IAAM;IAEzD,IAAI,CAAC,OAAO;QACV,OAAO,CAAA,GAAA,qLAAA,CAAA,WAAQ,AAAD;IAChB;IAEA,qBACE,8OAAC;QAAK,WAAU;kBACd,cAAA,8OAAC,gLAAA,CAAA,wBAAqB;YAAC,OAAO;;;;;;;;;;;AAGpC"}},
    {"offset": {"line": 326, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 338, "column": 0}, "map": {"version":3,"sources":["file:///root/webmakerr/storefront/src/lib/data/reviews.ts"],"sourcesContent":["\"use server\"\nimport { revalidatePath } from \"next/cache\"\nimport { sdk } from \"../config\"\nimport { getAuthHeaders } from \"./cookies\"\nimport { HttpTypes } from \"@medusajs/types\"\n\nexport type Review = {\n  id: string\n  seller: {\n    id: string\n    name: string\n    photo: string\n  }\n  reference: string\n  customer_note: string\n  rating: number\n  updated_at: string\n}\n\nexport type Order = HttpTypes.StoreOrder & {\n  seller: { id: string; name: string; reviews?: any[] }\n  reviews: any[]\n}\n\nconst getReviews = async () => {\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  const reviews = await sdk.client.fetch(\"/store/reviews\", {\n    headers,\n    query: { fields: \"*seller,+customer.id,+order_id\" },\n    method: \"GET\",\n  })\n\n  return reviews as { reviews: Review[] }\n}\n\nconst createReview = async (review: any) => {\n  const headers = {\n    ...(await getAuthHeaders()),\n    \"Content-Type\": \"application/json\",\n    \"x-publishable-api-key\": process.env\n      .NEXT_PUBLIC_MEDUSA_PUBLISHABLE_KEY as string,\n  }\n\n  const response = await fetch(\n    `${process.env.MEDUSA_BACKEND_URL}/store/reviews`,\n    {\n      headers,\n      method: \"POST\",\n      body: JSON.stringify(review),\n    }\n  ).then((res) => {\n    revalidatePath(\"/user/reviews\")\n    revalidatePath(\"/user/reviews/written\")\n    return res\n  })\n\n  return response.json()\n}\n\nexport { getReviews, createReview }\n"],"names":[],"mappings":";;;;;;AACA;AACA;AACA;;;;;;;AAqBA,MAAM,aAAa;IACjB,MAAM,UAAU;QACd,GAAI,MAAM,CAAA,GAAA,6HAAA,CAAA,iBAAc,AAAD,GAAG;IAC5B;IAEA,MAAM,UAAU,MAAM,oHAAA,CAAA,MAAG,CAAC,MAAM,CAAC,KAAK,CAAC,kBAAkB;QACvD;QACA,OAAO;YAAE,QAAQ;QAAiC;QAClD,QAAQ;IACV;IAEA,OAAO;AACT;AAEA,MAAM,eAAe,OAAO;IAC1B,MAAM,UAAU;QACd,GAAI,MAAM,CAAA,GAAA,6HAAA,CAAA,iBAAc,AAAD,GAAG;QAC1B,gBAAgB;QAChB,uBAAuB;IAEzB;IAEA,MAAM,WAAW,MAAM,MACrB,GAAG,QAAQ,GAAG,CAAC,kBAAkB,CAAC,cAAc,CAAC,EACjD;QACE;QACA,QAAQ;QACR,MAAM,KAAK,SAAS,CAAC;IACvB,GACA,IAAI,CAAC,CAAC;QACN,CAAA,GAAA,6HAAA,CAAA,iBAAc,AAAD,EAAE;QACf,CAAA,GAAA,6HAAA,CAAA,iBAAc,AAAD,EAAE;QACf,OAAO;IACT;IAEA,OAAO,SAAS,IAAI;AACtB;;;;IAES,uCAAQ,GAAR;IAAY,uCAAU,GAAV;;AAAZ,+OAAA;AAAY,+OAAA"}},
    {"offset": {"line": 391, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 397, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 444, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}