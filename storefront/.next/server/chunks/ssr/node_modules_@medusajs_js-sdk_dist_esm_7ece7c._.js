module.exports = {

"[project]/node_modules/@medusajs/js-sdk/dist/esm/admin/api-key.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "ApiKey": (()=>ApiKey)
});
var __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
class ApiKey {
    /**
     * @ignore
     */ constructor(client){
        this.client = client;
    }
    /**
     * This methods retrieves a paginated list of API keys. It sends a request to the
     * [List API Keys](https://docs.medusajs.com/api/admin#api-keys_getapikeys) API route.
     *
     * @param queryParams - Filters and pagination configurations.
     * @param headers - Headers to pass in the request.
     * @returns The paginated list of API keys.
     *
     * @example
     * To retrieve the list of API keys:
     *
     * ```ts
     * sdk.admin.apiKey.list()
     * .then(({ api_keys, count, limit, offset }) => {
     *   console.log(api_keys)
     * })
     * ```
     *
     * To configure the pagination, pass the `limit` and `offset` query parameters.
     *
     * For example, to retrieve only 10 items and skip 10 items:
     *
     * ```ts
     * sdk.admin.apiKey.list({
     *   limit: 10,
     *   offset: 10
     * })
     * .then(({ api_keys, count, limit, offset }) => {
     *   console.log(api_keys)
     * })
     * ```
     *
     * Using the `fields` query parameter, you can specify the fields and relations to retrieve
     * in each API key:
     *
     * ```ts
     * sdk.admin.apiKey.list({
     *   fields: "id,*sales_channels"
     * })
     * .then(({ api_keys, count, limit, offset }) => {
     *   console.log(api_keys)
     * })
     * ```
     *
     * Learn more about the `fields` property in the [API reference](https://docs.medusajs.com/api/store#select-fields-and-relations).
     */ list(queryParams, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/api-keys`, {
                query: queryParams,
                headers
            });
        });
    }
    /**
     * This method creates an API key. It sends a request to the [Create API Key](https://docs.medusajs.com/api/admin#api-keys_postapikeys)
     * API route.
     *
     * @param body - The API key's details.
     * @param query - Configure the fields to retrieve in the created API key.
     * @param headers - Headers to pass in the request
     * @returns The created API key
     *
     * @example
     * sdk.admin.apiKey.create({
     *   title: "Development",
     *   type: "publishable"
     * })
     * .then(({ api_key }) => {
     *   console.log(api_key)
     * })
     */ create(body, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/api-keys`, {
                method: "POST",
                headers,
                body,
                query
            });
        });
    }
    /**
     * This method revokes an API key. It sends a request to the
     * [Revoke API Key](https://docs.medusajs.com/api/admin#api-keys_postapikeysidrevoke) API route.
     *
     * @param id - The API key's ID.
     * @param headers - Headers to pass in the request.
     * @returns The API key's details.
     *
     * @example
     * sdk.admin.apiKey.revoke("apk_123")
     * .then(({ api_key }) => {
     *   console.log(api_key)
     * })
     */ revoke(id, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/api-keys/${id}/revoke`, {
                method: "POST",
                headers
            });
        });
    }
    /**
     * This method retrieves an API key's details. It sends a request to the
     * [Get API key](https://docs.medusajs.com/api/admin#api-keys_getapikeysid) API route.
     *
     * @param id - The API key's ID.
     * @param headers - Headers to pass in the request.
     * @returns The API key's details.
     *
     * @example
     * sdk.admin.apiKey.retrieve("apk_123")
     * .then(({ api_key }) => {
     *   console.log(api_key)
     * })
     */ retrieve(id, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/api-keys/${id}`, {
                headers
            });
        });
    }
    /**
     * This method updates an API key's details. It sends a request to the
     * [Update API Key](https://docs.medusajs.com/api/admin#api-keys_postapikeysid) API route.
     *
     * @param id - The API key's ID.
     * @param body - The data to update in the API key.
     * @param query - Configure the fields to retrieve in the API key.
     * @param headers - Headers to pass in the request.
     * @returns The API key's details.
     *
     * @example
     * sdk.admin.apiKey.update("apk_123", {
     *   title: "Development"
     * })
     * .then(({ api_key }) => {
     *   console.log(api_key)
     * })
     */ update(id, body, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/api-keys/${id}`, {
                method: "POST",
                headers,
                body,
                query
            });
        });
    }
    /**
     * This method deletes an API key by its ID. It sends a request to the
     * [Delete API Key](https://docs.medusajs.com/api/admin#api-keys_deleteapikeysid) API route.
     *
     * @param id - The API key's ID.
     * @param headers - Headers to pass in the request.
     * @returns The deletion's details.
     *
     * @example
     * sdk.admin.apiKey.delete("apk_123")
     * .then(({ deleted }) => {
     *   console.log(deleted)
     * })
     */ delete(id, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/api-keys/${id}`, {
                method: "DELETE",
                headers
            });
        });
    }
    /**
     * This method manages the sales channels associated with a publishable API key to either add
     * or remove associations. It sends a request to the [Manage Sales Channels](https://docs.medusajs.com/api/admin#api-keys_postapikeysidsaleschannels)
     * API route.
     *
     * @param id - The API key's ID.
     * @param body - The sales channels to add or remove from the API key.
     * @param headers - Headers to pass in the request.
     * @returns The API key's details.
     *
     * @example
     * sdk.admin.apiKey.batchSalesChannels("apk_123", {
     *   add: ["sc_123"],
     *   remove: ["sc_321"]
     * })
     * .then(({ api_key }) => {
     *   console.log(api_key)
     * })
     */ batchSalesChannels(id, body, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/api-keys/${id}/sales-channels`, {
                method: "POST",
                headers,
                body
            });
        });
    }
} //# sourceMappingURL=api-key.js.map
}}),
"[project]/node_modules/@medusajs/js-sdk/dist/esm/admin/campaign.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "Campaign": (()=>Campaign)
});
var __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
class Campaign {
    /**
     * @ignore
     */ constructor(client){
        this.client = client;
    }
    /**
     * This method retrieves a campaign by its ID. It sends a request to the
     * [Get Campaign](https://docs.medusajs.com/api/admin#campaigns_getcampaignsid) API route.
     *
     * @param id - The campaign's ID.
     * @param query - Configure the fields to retrieve in the campaign.
     * @param headers - Headers to pass in the request
     * @returns The campaign's details.
     *
     * @example
     * To retrieve a campaign by its ID:
     *
     * ```ts
     * sdk.admin.campaign.retrieve("procamp_123")
     * .then(({ campaign }) => {
     *   console.log(campaign)
     * })
     * ```
     *
     * To specify the fields and relations to retrieve:
     *
     * ```ts
     * sdk.admin.campaign.retrieve("procamp_123", {
     *   fields: "id,*budget"
     * })
     * .then(({ campaign }) => {
     *   console.log(campaign)
     * })
     * ```
     *
     * Learn more about the `fields` property in the [API reference](https://docs.medusajs.com/api/store#select-fields-and-relations).
     */ retrieve(id, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/campaigns/${id}`, {
                headers,
                query
            });
        });
    }
    /**
     * This method retrieves a paginated list of campaigns. It sends a request to the
     * [List Campaigns](https://docs.medusajs.com/api/admin#campaigns_getcampaigns) API route.
     *
     * @param query - Filters and pagination configurations.
     * @param headers - Headers to pass in the request.
     * @returns The paginated list of campaigns.
     *
     * @example
     * To retrieve the list of campaigns:
     *
     * ```ts
     * sdk.admin.campaign.list()
     * .then(({ campaigns, count, limit, offset }) => {
     *   console.log(campaigns)
     * })
     * ```
     *
     * To configure the pagination, pass the `limit` and `offset` query parameters.
     *
     * For example, to retrieve only 10 items and skip 10 items:
     *
     * ```ts
     * sdk.admin.campaign.list({
     *   limit: 10,
     *   offset: 10
     * })
     * .then(({ campaigns, count, limit, offset }) => {
     *   console.log(campaigns)
     * })
     * ```
     *
     * Using the `fields` query parameter, you can specify the fields and relations to retrieve
     * in each campaign:
     *
     * ```ts
     * sdk.admin.campaign.list({
     *   fields: "id,*budget"
     * })
     * .then(({ campaigns, count, limit, offset }) => {
     *   console.log(campaigns)
     * })
     * ```
     *
     * Learn more about the `fields` property in the [API reference](https://docs.medusajs.com/api/store#select-fields-and-relations).
     */ list(query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/campaigns`, {
                headers,
                query
            });
        });
    }
    /**
     * This method creates a campaign. It sends a request to the
     * [Create Campaign](https://docs.medusajs.com/api/admin#campaigns_postcampaigns) API route.
     *
     * @param payload - The details of the campaign to create.
     * @param headers - Headers to pass in the request
     * @returns The campaign's details.
     *
     * @example
     * sdk.admin.campaign.create({
     *   name: "Summer Campaign"
     * })
     * .then(({ campaign }) => {
     *   console.log(campaign)
     * })
     */ create(payload, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/campaigns`, {
                method: "POST",
                headers,
                body: payload
            });
        });
    }
    /**
     * This method updates a campaign. It sends a request to the
     * [Update Campaign](https://docs.medusajs.com/api/admin#campaigns_postcampaignsid) API route.
     *
     * @param id - The campaign's ID.
     * @param payload - The data to update in the campaign.
     * @param headers - Headers to pass in the request
     * @returns The campaign's details.
     *
     * @example
     * sdk.admin.campaign.update("procamp_123", {
     *   name: "Summer Campaign"
     * })
     * .then(({ campaign }) => {
     *   console.log(campaign)
     * })
     */ update(id, payload, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/campaigns/${id}`, {
                method: "POST",
                headers,
                body: payload
            });
        });
    }
    /**
     * This method deletes a campaign by its ID. It sends a request to the
     * [Delete Campaign](https://docs.medusajs.com/api/admin#campaigns_deletecampaignsid) API route.
     *
     * @param id - The campaign's ID.
     * @param headers - Headers to pass in the request
     * @returns The deletion's details.
     *
     * @example
     * sdk.admin.campaign.delete("procamp_123")
     * .then(({ deleted }) => {
     *   console.log(deleted)
     * })
     */ delete(id, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/campaigns/${id}`, {
                method: "DELETE",
                headers
            });
        });
    }
    /**
     * This method manages the promotions of a campaign to either add or remove the association between them.
     * It sends a request to the [Manage Promotions](https://docs.medusajs.com/api/admin#campaigns_postcampaignsidpromotions)
     * API route.
     *
     * @param id - The campaign's ID.
     * @param payload - The promotions to add or remove associations to them.
     * @param headers - Headers to pass in the request
     * @returns The campaign's details.
     */ batchPromotions(id, payload, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/campaigns/${id}/promotions`, {
                method: "POST",
                headers,
                body: payload
            });
        });
    }
} //# sourceMappingURL=campaign.js.map
}}),
"[project]/node_modules/@medusajs/js-sdk/dist/esm/admin/claim.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "Claim": (()=>Claim)
});
var __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
class Claim {
    /**
     * @ignore
     */ constructor(client){
        this.client = client;
    }
    /**
     * This method retrieves a paginated list of claims. It sends a request to the
     * [List Claims](https://docs.medusajs.com/api/admin#claims_getclaims) API route.
     *
     * @param query - Filters and pagination configurations.
     * @param headers - Headers to pass in the request.
     * @returns The paginated list of claims.
     *
     * @example
     * To retrieve the list of claims:
     *
     * ```ts
     * sdk.admin.claim.list()
     * .then(({ claims, count, limit, offset }) => {
     *   console.log(claims)
     * })
     * ```
     *
     * To configure the pagination, pass the `limit` and `offset` query parameters.
     *
     * For example, to retrieve only 10 items and skip 10 items:
     *
     * ```ts
     * sdk.admin.claim.list({
     *   limit: 10,
     *   offset: 10
     * })
     * .then(({ claims, count, limit, offset }) => {
     *   console.log(claims)
     * })
     * ```
     *
     * Using the `fields` query parameter, you can specify the fields and relations to retrieve
     * in each claim:
     *
     * ```ts
     * sdk.admin.claim.list({
     *   fields: "id,*additional_items"
     * })
     * .then(({ claims, count, limit, offset }) => {
     *   console.log(claims)
     * })
     * ```
     *
     * Learn more about the `fields` property in the [API reference](https://docs.medusajs.com/api/store#select-fields-and-relations).
     */ list(query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/claims`, {
                query,
                headers
            });
        });
    }
    /**
     * This method retrieves a claim. It sends a request to the
     * [Get Claim](https://docs.medusajs.com/api/admin#claims_getclaimsid) API route.
     *
     * @param id - The claim's ID.
     * @param query - Configure the fields to retrieve in the claim.
     * @param headers - Headers to pass in the request
     * @returns The claim's details.
     *
     * @example
     * To retrieve a claim by its ID:
     *
     * ```ts
     * sdk.admin.claim.retrieve("claim_123")
     * .then(({ claim }) => {
     *   console.log(claim)
     * })
     * ```
     *
     * To specify the fields and relations to retrieve:
     *
     * ```ts
     * sdk.admin.claim.retrieve("claim_123", {
     *   fields: "id,*additional_items"
     * })
     * .then(({ claim }) => {
     *   console.log(claim)
     * })
     * ```
     *
     * Learn more about the `fields` property in the [API reference](https://docs.medusajs.com/api/store#select-fields-and-relations).
     */ retrieve(id, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/claims/${id}`, {
                query,
                headers
            });
        });
    }
    /**
     * This method creates a claim. It sends a request to the
     * [Create Claim](https://docs.medusajs.com/api/admin#claims_postclaims) API route.
     *
     * @param body - The claim's details.
     * @param query - Configure the fields to retrieve in the claim.
     * @param headers - Headers to pass in the request
     * @returns The claim and order's details.
     *
     * @example
     * sdk.admin.claim.create({
     *   type: "refund",
     *   order_id: "order_123",
     * })
     * .then(({ claim }) => {
     *   console.log(claim)
     * })
     */ create(body, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/claims`, {
                method: "POST",
                headers,
                body,
                query
            });
        });
    }
    /**
     * This method cancels a claim. It sends a request to the
     * [Cancel Claim](https://docs.medusajs.com/api/admin#claims_postclaimsidcancel) API route.
     *
     * @param id - The claim's ID.
     * @param query - Configure the fields to retrieve in the claim.
     * @param headers - Headers to pass in the request
     * @returns The claim's details.
     *
     * @example
     * sdk.admin.claim.cancel("claim_123")
     * .then(({ claim }) => {
     *   console.log(claim)
     * })
     */ cancel(id, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/claims/${id}/cancel`, {
                method: "POST",
                headers,
                query
            });
        });
    }
    /**
     * This method adds items to the claim. It sends a request to the
     * [Add Items](https://docs.medusajs.com/api/admin#claims_postclaimsidclaimitems) API route.
     *
     * @param id - The ID of the claim to add the items to.
     * @param body - The items' details.
     * @param query - Configure the fields to retrieve in the claim.
     * @param headers - Headers to pass in the request
     * @returns The claim's details with a preview of the order when the claim is applied.
     *
     * @example
     * sdk.admin.claim.addItems("claim_123", {
     *   items: [
     *     {
     *       id: "orli_123",
     *       quantity: 1
     *     }
     *   ]
     * })
     * .then(({ claim }) => {
     *   console.log(claim)
     * })
     */ addItems(id, body, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/claims/${id}/claim-items`, {
                method: "POST",
                headers,
                body,
                query
            });
        });
    }
    /**
     * This method updates a claim item by the ID of the item's `WRITE_OFF_ITEM` action. It
     * sends a request to the [Update Claim Item](https://docs.medusajs.com/api/admin#claims_postclaimsidclaimitemsaction_id) API route.
     *
     * Every item has an `actions` property, whose value is an array of actions.
     * You can check the action's name using its `action` property, and use the value of the `id` property.
     *
     * @param id - The claim's ID.
     * @param actionId - The id of the order item's `WRITE_OFF_ITEM` action.
     * @param body - The details to update.
     * @param query - Configure the fields to retrieve in the claim.
     * @param headers - Headers to pass in the request
     * @returns The claim's details with a preview of the order when the claim is applied.
     *
     * @example
     * sdk.admin.claim.updateItem(
     *   "claim_123",
     *   "ordchact_123",
     *   {
     *     quantity: 1
     *   }
     *   )
     * .then(({ claim }) => {
     *   console.log(claim)
     * })
     */ updateItem(id, actionId, body, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/claims/${id}/claim-items/${actionId}`, {
                method: "POST",
                headers,
                body,
                query
            });
        });
    }
    /**
     * This method removes a claim item from a claim by the ID of the item's `WRITE_OFF_ITEM` action.
     * It sends a request to the [Remove Claim Item](https://docs.medusajs.com/api/admin#claims_deleteclaimsidclaimitemsaction_id)
     * API route.
     *
     * Every item has an `actions` property, whose value is an array of actions.
     * You can check the action's name using its `action` property, and use the value of the `id` property.
     *
     * @param id - The claim's ID.
     * @param actionId - The id of the order item's `WRITE_OFF_ITEM` action.
     * @param query - Configure the fields to retrieve in the claim.
     * @param headers - Headers to pass in the request
     * @returns The claim's details with a preview of the order when the claim is applied.
     *
     * @example
     * sdk.admin.claim.removeItem(
     *   "claim_123",
     *   "ordchact_123",
     *   )
     * .then(({ claim }) => {
     *   console.log(claim)
     * })
     */ removeItem(id, actionId, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/claims/${id}/claim-items/${actionId}`, {
                method: "DELETE",
                headers,
                query
            });
        });
    }
    /**
     * This method adds inbound (or return) items to the claim. These inbound items will have a `RETURN_ITEM` action.
     *
     * This method sends a request to the [Add Inbound Items](https://docs.medusajs.com/api/admin#claims_postclaimsidinbounditems)
     * API route.
     *
     * @param id - The ID of the claim to add the inbound items to.
     * @param body - The inbound items' details.
     * @param query - Configure the fields to retrieve in the return.
     * @param headers - Headers to pass in the request
     * @returns The details of the return associated with the claim, with a preview of the order when the claim is applied.
     *
     * @example
     * sdk.admin.claim.addInboundItems(
     *   "claim_123",
     *   {
     *     items: [
     *       {
     *         id: "orli_123",
     *         quantity: 1
     *       }
     *     ]
     *   },
     *   )
     * .then(({ return: returnData }) => {
     *   console.log(returnData)
     * })
     */ addInboundItems(id, body, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/claims/${id}/inbound/items`, {
                method: "POST",
                headers,
                body,
                query
            });
        });
    }
    /**
     * This method updates an inbound (or return) item of a claim using the ID of the item's `RETURN_ITEM` action.
     * It sends a request to the [Update Inbound Item](https://docs.medusajs.com/api/admin#claims_postclaimsidinbounditemsaction_id)
     * API route.
     *
     * Every item has an `actions` property, whose value is an array of actions.
     * You can check the action's name using its `action` property, and use the value of the `id` property.
     *
     * @param id - The claim's ID.
     * @param actionId - The id of the return item's `RETURN_ITEM` action.
     * @param body - The details to update in the inbound item.
     * @param query - Configure the fields to retrieve in the return.
     * @param headers - Headers to pass in the request
     * @returns The details of the return associated wth the claim, with a preview of the order when the claim is applied.
     *
     * @example
     * sdk.admin.claim.updateInboundItem(
     *   "claim_123",
     *   "ordchact_123",
     *   {
     *     quantity: 1
     *   },
     *   )
     * .then(({ return: returnData }) => {
     *   console.log(returnData)
     * })
     */ updateInboundItem(id, actionId, body, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/claims/${id}/inbound/items/${actionId}`, {
                method: "POST",
                headers,
                body,
                query
            });
        });
    }
    /**
     * This method removes an inbound (or return) item from a claim using the ID of the item's `RETURN_ITEM` action.
     * It sends a request to the [Remove Inbound Item](https://docs.medusajs.com/api/admin#claims_deleteclaimsidinbounditemsaction_id)
     * API route.
     *
     * Every item has an `actions` property, whose value is an array of actions.
     * You can check the action's name using its `action` property, and use the value of the `id` property.
     *
     * @param id - The claim's ID.
     * @param actionId - The ID of the return item's `RETURN_ITEM` action.
     * @param query - Configure the fields to retrieve in the return.
     * @param headers - Headers to pass in the request
     * @returns The details of the return associated wth the claim, with a preview of the order when the claim is applied.
     *
     * @example
     * sdk.admin.claim.removeInboundItem(
     *   "claim_123",
     *   "ordchact_123",
     *   )
     * .then(({ return: returnData }) => {
     *   console.log(returnData)
     * })
     */ removeInboundItem(id, actionId, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/claims/${id}/inbound/items/${actionId}`, {
                method: "DELETE",
                headers,
                query
            });
        });
    }
    /**
     * This method adds an inbound (or return) shipping method to a claim.
     * The inbound shipping method will have a `SHIPPING_ADD` action.
     *
     * This method sends a request to the [Add Inbound Shipping](https://docs.medusajs.com/api/admin#claims_postclaimsidinboundshippingmethod)
     * API route.
     *
     * @param id - The claim's ID.
     * @param body - The shipping method's details.
     * @param query - Configure the fields to retrieve in the return.
     * @param headers - Headers to pass in the request
     * @returns The details of the return associated wth the claim, with a preview of the order when the claim is applied.
     *
     * @example
     * sdk.admin.claim.addInboundShipping(
     *   "claim_123",
     *   {
     *     shipping_option_id: "so_123",
     *     custom_amount: 10
     *   },
     *   )
     * .then(({ return: returnData }) => {
     *   console.log(returnData)
     * })
     */ addInboundShipping(id, body, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/claims/${id}/inbound/shipping-method`, {
                method: "POST",
                headers,
                body,
                query
            });
        });
    }
    /**
     * This method updates a shipping method for returning items in the claim using the ID of the method's `SHIPPING_ADD` action.
     * It sends a request to the [Update Inbound Shipping](https://docs.medusajs.com/api/admin#claims_postclaimsidinboundshippingmethodaction_id)
     * API route.
     *
     * Every shipping method has an `actions` property, whose value is an array of actions.
     * You can check the action's name using its `action` property, and use the value of the `id` property.
     *
     * @param id - The claim's ID.
     * @param actionId - The id of the shipping method's `SHIPPING_ADD` action.
     * @param body - The details to update in the shipping method
     * @param query - Configure the fields to retrieve in the claim.
     * @param headers - Headers to pass in the request
     * @returns The details of the claim, with a preview of the order when the claim is applied.
     *
     * @example
     * sdk.admin.claim.updateInboundShipping(
     *   "claim_123",
     *   "ordchact_123",
     *   {
     *     custom_amount: 10
     *   },
     *   )
     * .then(({ claim }) => {
     *   console.log(claim)
     * })
     */ updateInboundShipping(id, actionId, body, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/claims/${id}/inbound/shipping-method/${actionId}`, {
                method: "POST",
                headers,
                body,
                query
            });
        });
    }
    /**
     * This method deletes a shipping method for returning items in the claim using the ID of the method's `SHIPPING_ADD` action.
     * It sends a request to the [Remove Inbound Shipping](https://docs.medusajs.com/api/admin#claims_deleteclaimsidinboundshippingmethodaction_id)
     * API route.
     *
     * Every shipping method has an `actions` property, whose value is an array of actions.
     * You can check the action's name using its `action` property, and use the value of the `id` property.
     *
     * @param id - The claim's ID.
     * @param actionId - The id of the shipping method's `SHIPPING_ADD` action.
     * @param query - Configure the fields to retrieve in the return.
     * @param headers - Headers to pass in the request
     * @returns The details of the return associated wth the claim, with a preview of the order when the claim is applied.
     *
     * @example
     * sdk.admin.claim.deleteInboundShipping(
     *   "claim_123",
     *   "ordchact_123",
     *   )
     * .then(({ return: returnData }) => {
     *   console.log(returnData)
     * })
     */ deleteInboundShipping(id, actionId, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/claims/${id}/inbound/shipping-method/${actionId}`, {
                method: "DELETE",
                headers,
                query
            });
        });
    }
    /**
     * This method adds outbound (or new) items to a claim. These outbound items will have an `ITEM_ADD` action.
     * It sends a request to the [Add Outbound Items](https://docs.medusajs.com/api/admin#claims_postclaimsidoutbounditems)
     * API route.
     *
     * @param id - The ID of the claim to add the outbound items to.
     * @param body - The items' details.
     * @param query - Configure the fields to retrieve in the claim.
     * @param headers - Headers to pass in the request
     * @returns The details of the claim, with a preview of the order when the claim is applied.
     *
     * @example
     * sdk.admin.claim.addOutboundItems(
     *   "claim_123",
     *   {
     *     items: [{
     *       id: "orli_123",
     *       quantity: 1
     *     }]
     *   },
     *   )
     * .then(({ claim }) => {
     *   console.log(claim)
     * })
     */ addOutboundItems(id, body, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/claims/${id}/outbound/items`, {
                method: "POST",
                headers,
                body,
                query
            });
        });
    }
    /**
     * This method updates an outbound (or new) item of a claim using the ID of the item's `ITEM_ADD` action.
     * It sends a request to the [Update Outbound Item](https://docs.medusajs.com/api/admin#claims_postclaimsidoutbounditemsaction_id)
     * API route.
     *
     * Every item has an `actions` property, whose value is an array of actions.
     * You can check the action's name using its `action` property, and use the value of the `id` property.
     *
     * @param id - The claim's ID.
     * @param actionId - The id of the new claim item's `ITEM_ADD` action.
     * @param body - The item's details.
     * @param query - Configure the fields to retrieve in the claim.
     * @param headers - Headers to pass in the request
     * @returns The details of the claim, with a preview of the order when the claim is applied.
     *
     * @example
     * sdk.admin.claim.updateOutboundItem(
     *   "claim_123",
     *   "ordchact_123",
     *   {
     *     quantity: 1
     *   },
     *   )
     * .then(({ claim }) => {
     *   console.log(claim)
     * })
     */ updateOutboundItem(id, actionId, body, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/claims/${id}/outbound/items/${actionId}`, {
                method: "POST",
                headers,
                body,
                query
            });
        });
    }
    /**
     * This method removes an outbound (or new) item from a claim using the ID of the item's `ITEM_ADD` action.
     * It sends a request to the [Remove Outbound Item](https://docs.medusajs.com/api/admin#claims_deleteclaimsidoutbounditemsaction_id)
     * API route.
     *
     * Every item has an `actions` property, whose value is an array of actions.
     * You can check the action's name using its `action` property, and use the value of the `id` property.
     *
     * @param id - The claim's ID.
     * @param actionId - The id of the new claim item's `ITEM_ADD` action.
     * @param query - Configure the fields to retrieve in the claim.
     * @param headers - Headers to pass in the request
     * @returns The details of the claim, with a preview of the order when the claim is applied.
     *
     * @example
     * sdk.admin.claim.removeOutboundItem(
     *   "claim_123",
     *   "ordchact_123",
     * )
     * .then(({ claim }) => {
     *   console.log(claim)
     * })
     */ removeOutboundItem(id, actionId, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/claims/${id}/outbound/items/${actionId}`, {
                method: "DELETE",
                headers,
                query
            });
        });
    }
    /**
     * This method adds outbound an outbound shipping method to a claim.
     * The outbound shipping method will have a `SHIPPING_ADD` action.
     *
     * This method sends a request to the
     * [Add Outbound Shipping](https://docs.medusajs.com/api/admin#claims_postclaimsidoutboundshippingmethod)
     * API route.
     *
     * @param id - The claim's ID.
     * @param body - The shipping method's details.
     * @param query - Configure the fields to retrieve in the claim.
     * @param headers - Headers to pass in the request
     * @returns The details of the claim, with a preview of the order when the claim is applied.
     *
     * @example
     *    * sdk.admin.claim.addOutboundShipping(
     *   "claim_123",
     *   {
     *     shipping_option_id: "so_123",
     *     custom_amount: 10
     *   },
     * )
     * .then(({ claim }) => {
     *   console.log(claim)
     * })
     */ addOutboundShipping(id, body, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/claims/${id}/outbound/shipping-method`, {
                method: "POST",
                headers,
                body,
                query
            });
        });
    }
    /**
     * This method updates the shipping method for delivering outbound items in a claim using the ID of the method's `SHIPPING_ADD` action.
     * It sends a request to the [Update Outbound Shipping](https://docs.medusajs.com/api/admin#claims_postclaimsidoutboundshippingmethodaction_id)
     * API route.
     *
     * Every shipping method has an `actions` property, whose value is an array of actions.
     * You can check the action's name using its `action` property, and use the value of the `id` property.
     *
     * @param id - The claim's ID.
     * @param actionId - The id of the shipping method's `SHIPPING_ADD` action.
     * @param body - The shipping method's details.
     * @param query - Configure the fields to retrieve in the claim.
     * @param headers - Headers to pass in the request
     * @returns The details of the claim, with a preview of the order when the claim is applied.
     *
     * @example
     * sdk.admin.claim.updateOutboundShipping(
     *   "claim_123",
     *   "ordchact_123",
     *   {
     *     custom_amount: 10
     *   },
     * )
     * .then(({ claim }) => {
     *   console.log(claim)
     * })
     */ updateOutboundShipping(id, actionId, body, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/claims/${id}/outbound/shipping-method/${actionId}`, {
                method: "POST",
                headers,
                body,
                query
            });
        });
    }
    /**
     * This method deletes the shipping method for delivering outbound items in the claim using the ID of the method's `SHIPPING_ADD` action.
     *
     * Every shipping method has an `actions` property, whose value is an array of actions.
     * You can check the action's name using its `action` property, and use the value of the `id` property.
     *
     * @param id - The claim's ID.
     * @param actionId - The id of the shipping method's `SHIPPING_ADD` action.
     * @param query - Configure the fields to retrieve in the claim.
     * @param headers - Headers to pass in the request
     * @returns The details of the claim, with a preview of the order when the claim is applied.
     *
     * @example
     * sdk.admin.claim.deleteOutboundShipping(
     *   "claim_123",
     *   "ordchact_123",
     * )
     * .then(({ claim }) => {
     *   console.log(claim)
     * })
     */ deleteOutboundShipping(id, actionId, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/claims/${id}/outbound/shipping-method/${actionId}`, {
                method: "DELETE",
                headers,
                query
            });
        });
    }
    /**
     * This method confirms a claim request, applying its changes on the associated order.
     * It sends a request to the [Confirm Claim Request](https://docs.medusajs.com/api/admin#claims_postclaimsidrequest)
     * API route.
     *
     * @param id - The claim's ID.
     * @param body - The confirmation details.
     * @param query - Configure the fields to retrieve in the claim.
     * @param headers - Headers to pass in the request
     * @returns The details of the claim and its associated return, with a preview of the order when the claim is applied.
     *
     * @example
     * sdk.admin.claim.request(
     *   "claim_123",
     *   {},
     * )
     * .then(({ claim }) => {
     *   console.log(claim)
     * })
     */ request(id, body, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/claims/${id}/request`, {
                method: "POST",
                headers,
                body,
                query
            });
        });
    }
    /**
     * This method cancels a requested claim. It sends a request to the
     * [Cancel Claim Request](https://docs.medusajs.com/api/admin#claims_deleteclaimsidrequest)
     * API route.
     *
     * @param id - The claim's ID.
     * @param query - Configure the fields to retrieve in the claim.
     * @param headers - Headers to pass in the request
     * @returns The cancelation's details.
     *
     * @example
     * sdk.admin.claim.cancelRequest(
     *   "claim_123",
     * )
     * .then(({ deleted }) => {
     *   console.log(deleted)
     * })
     */ cancelRequest(id, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/claims/${id}/request`, {
                method: "DELETE",
                headers,
                query
            });
        });
    }
} //# sourceMappingURL=claim.js.map
}}),
"[project]/node_modules/@medusajs/js-sdk/dist/esm/admin/currency.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "Currency": (()=>Currency)
});
var __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
class Currency {
    /**
     * @ignore
     */ constructor(client){
        this.client = client;
    }
    /**
     * This method retrieves a paginated list of currencies. It sends a request to the
     * [List Currencies](https://docs.medusajs.com/api/admin#currencies_getcurrencies)
     * API route.
     *
     * @param query - Filters and pagination configurations.
     * @param headers - Headers to pass in the request.
     * @returns The paginated list of currencies.
     *
     * @example
     * To retrieve the list of currencies:
     *
     * ```ts
     * sdk.admin.currency.list()
     * .then(({ currencies, count, limit, offset }) => {
     *   console.log(currencies)
     * })
     * ```
     *
     * To configure the pagination, pass the `limit` and `offset` query parameters.
     *
     * For example, to retrieve only 10 items and skip 10 items:
     *
     * ```ts
     * sdk.admin.currency.list({
     *   limit: 10,
     *   offset: 10
     * })
     * .then(({ currencies, count, limit, offset }) => {
     *   console.log(currencies)
     * })
     * ```
     *
     * Using the `fields` query parameter, you can specify the fields and relations to retrieve
     * in each currency:
     *
     * ```ts
     * sdk.admin.currency.list({
     *   fields: "code,symbol"
     * })
     * .then(({ currencies, count, limit, offset }) => {
     *   console.log(currencies)
     * })
     * ```
     *
     * Learn more about the `fields` property in the [API reference](https://docs.medusajs.com/api/store#select-fields-and-relations).
     */ list(query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return this.client.fetch(`/admin/currencies`, {
                headers,
                query
            });
        });
    }
    /**
     * This method retrieves a currency by its code. It sends a request to the
     * [Get Currency](https://docs.medusajs.com/api/admin#currencies_getcurrenciescode) API route.
     *
     * @param code - The currency's code.
     * @param query - Configure the fields to retrieve in the currency.
     * @param headers - Headers to pass in the request
     * @returns The currency's details.
     *
     * @example
     * To retrieve a currency by its code:
     *
     * ```ts
     * sdk.admin.currency.retrieve("usd")
     * .then(({ currency }) => {
     *   console.log(currency)
     * })
     * ```
     *
     * To specify the fields and relations to retrieve:
     *
     * ```ts
     * sdk.admin.currency.retrieve("usd", {
     *   fields: "code,symbol"
     * })
     * .then(({ currency }) => {
     *   console.log(currency)
     * })
     * ```
     *
     * Learn more about the `fields` property in the [API reference](https://docs.medusajs.com/api/store#select-fields-and-relations).
     */ retrieve(code, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return this.client.fetch(`/admin/currencies/${code}`, {
                headers,
                query
            });
        });
    }
} //# sourceMappingURL=currency.js.map
}}),
"[project]/node_modules/@medusajs/js-sdk/dist/esm/admin/customer.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "Customer": (()=>Customer)
});
var __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
class Customer {
    /**
     * @ignore
     */ constructor(client){
        this.client = client;
    }
    /**
     * This method creates a customer. It sends a request to the
     * [Create Customer](https://docs.medusajs.com/api/admin#customers_postcustomers) API route.
     *
     * @param body - The customer's details.
     * @param query - Configure the fields to retrieve in the customer.
     * @param headers - Headers to pass in the request.
     * @returns The customer's details.
     *
     * @example
     * sdk.admin.customer.create({
     *   email: "customer@gmail.com"
     * })
     * .then(({ customer }) => {
     *   console.log(customer)
     * })
     */ create(body, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return this.client.fetch(`/admin/customers`, {
                method: "POST",
                headers,
                body,
                query
            });
        });
    }
    /**
     * This method updates a customer's details. It sends a request to the
     * [Update Customer](https://docs.medusajs.com/api/admin#customers_postcustomersid) API route.
     *
     * @param id - The customer's ID.
     * @param body - The details to update of the customer.
     * @param query - Configure the fields to retrieve in the customer.
     * @param headers - Headers to pass in the request.
     * @returns The customer's details.
     *
     * @example
     * sdk.admin.customer.update("cus_123", {
     *   first_name: "John"
     * })
     * .then(({ customer }) => {
     *   console.log(customer)
     * })
     */ update(id, body, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return this.client.fetch(`/admin/customers/${id}`, {
                method: "POST",
                headers,
                body,
                query
            });
        });
    }
    /**
     * This method retrieves a paginated list of customers. It sends a request to the
     * [List Customers](https://docs.medusajs.com/api/admin#customers_getcustomers)
     * API route.
     *
     * @param queryParams - Filters and pagination configurations.
     * @param headers - Headers to pass in the request.
     * @returns The paginated list of customers.
     *
     * @example
     * To retrieve the list of customers:
     *
     * ```ts
     * sdk.admin.customer.list()
     * .then(({ customers, count, limit, offset }) => {
     *   console.log(customers)
     * })
     * ```
     *
     * To configure the pagination, pass the `limit` and `offset` query parameters.
     *
     * For example, to retrieve only 10 items and skip 10 items:
     *
     * ```ts
     * sdk.admin.customer.list({
     *   limit: 10,
     *   offset: 10
     * })
     * .then(({ customers, count, limit, offset }) => {
     *   console.log(customers)
     * })
     * ```
     *
     * Using the `fields` query parameter, you can specify the fields and relations to retrieve
     * in each customer:
     *
     * ```ts
     * sdk.admin.customer.list({
     *   fields: "id,*groups"
     * })
     * .then(({ customers, count, limit, offset }) => {
     *   console.log(customers)
     * })
     * ```
     *
     * Learn more about the `fields` property in the [API reference](https://docs.medusajs.com/api/store#select-fields-and-relations).
     */ list(queryParams, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return this.client.fetch(`/admin/customers`, {
                headers,
                query: queryParams
            });
        });
    }
    /**
     * This method retrieves a customer by its ID. It sends a request to the
     * [Get Customer](https://docs.medusajs.com/api/admin#customers_getcustomersid)
     * API route.
     *
     * @param id - The customer's ID.
     * @param query - Configure the fields to retrieve in the customer.
     * @param headers - Headers to pass in the request.
     * @returns The customer's details.
     *
     * @example
     * To retrieve a customer by its ID:
     *
     * ```ts
     * sdk.admin.customer.retrieve("cus_123")
     * .then(({ customer }) => {
     *   console.log(customer)
     * })
     * ```
     *
     * To specify the fields and relations to retrieve:
     *
     * ```ts
     * sdk.admin.customer.retrieve("cus_123", {
     *   fields: "id,*groups"
     * })
     * .then(({ customer }) => {
     *   console.log(customer)
     * })
     * ```
     *
     * Learn more about the `fields` property in the [API reference](https://docs.medusajs.com/api/store#select-fields-and-relations).
     */ retrieve(id, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return this.client.fetch(`/admin/customers/${id}`, {
                query,
                headers
            });
        });
    }
    /**
     * This method deletes a customer by its ID. It sends a request to the
     * [Delete Customer](https://docs.medusajs.com/api/admin#customers_deletecustomersid)
     * API route.
     *
     * @param id - The customer's ID.
     * @param headers - Headers to pass in the request.
     * @returns The deletion's details.
     *
     * @example
     * sdk.admin.customer.delete("cus_123")
     * .then(({ deleted }) => {
     *   console.log(deleted)
     * })
     */ delete(id, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return this.client.fetch(`/admin/customers/${id}`, {
                method: "DELETE",
                headers
            });
        });
    }
    /**
     * This method manages customer groups for a customer.
     * It sends a request to the [Manage Customers](https://docs.medusajs.com/api/admin#customers_postcustomersidcustomergroups)
     * API route.
     *
     * @param id - The customer's ID.
     * @param body - The groups to add customer to or remove customer from.
     * @param headers - Headers to pass in the request
     * @returns The customers details.
     *
     * @example
     * sdk.admin.customer.batchCustomerGroups("cus_123", {
     *   add: ["cusgroup_123"],
     *   remove: ["cusgroup_321"]
     * })
     * .then(({ customer }) => {
     *   console.log(customer)
     * })
     */ batchCustomerGroups(id, body, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/customers/${id}/customer-groups`, {
                method: "POST",
                headers,
                body
            });
        });
    }
} //# sourceMappingURL=customer.js.map
}}),
"[project]/node_modules/@medusajs/js-sdk/dist/esm/admin/customer-group.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "CustomerGroup": (()=>CustomerGroup)
});
var __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
class CustomerGroup {
    /**
     * @ignore
     */ constructor(client){
        this.client = client;
    }
    /**
     * This method retrieves a customer group by its ID. It sends a request to the
     * [Get Customer Group](https://docs.medusajs.com/api/admin#customer-groups_getcustomergroupsid) API route.
     *
     * @param id - The customer group's ID.
     * @param query - Configure the fields to retrieve in the customer group.
     * @param headers - Headers to pass in the request
     * @returns The group's details.
     *
     * @example
     * To retrieve a customer group by its ID:
     *
     * ```ts
     * sdk.admin.customerGroup.retrieve("cusgroup_123")
     * .then(({ customer_group }) => {
     *   console.log(customer_group)
     * })
     * ```
     *
     * To specify the fields and relations to retrieve:
     *
     * ```ts
     * sdk.admin.customerGroup.retrieve("cusgroup_123", {
     *   fields: "id,*customer"
     * })
     * .then(({ customer_group }) => {
     *   console.log(customer_group)
     * })
     * ```
     *
     * Learn more about the `fields` property in the [API reference](https://docs.medusajs.com/api/store#select-fields-and-relations).
     */ retrieve(id, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/customer-groups/${id}`, {
                method: "GET",
                query,
                headers
            });
        });
    }
    /**
     * This method retrieves a paginated list of customer groups. It sends a request to the
     * [List Customer Groups](https://docs.medusajs.com/api/admin#customer-groups_getcustomergroups)
     * API route.
     *
     * @param query - Filters and pagination configurations.
     * @param headers - Headers to pass in the request.
     * @returns The paginated list of customer groups.
     *
     * @example
     * To retrieve the list of customer groups:
     *
     * ```ts
     * sdk.admin.customerGroup.list()
     * .then(({ customer_groups, count, limit, offset }) => {
     *   console.log(customer_groups)
     * })
     * ```
     *
     * To configure the pagination, pass the `limit` and `offset` query parameters.
     *
     * For example, to retrieve only 10 items and skip 10 items:
     *
     * ```ts
     * sdk.admin.customerGroup.list({
     *   limit: 10,
     *   offset: 10
     * })
     * .then(({ customer_groups, count, limit, offset }) => {
     *   console.log(customer_groups)
     * })
     * ```
     *
     * Using the `fields` query parameter, you can specify the fields and relations to retrieve
     * in each customer group:
     *
     * ```ts
     * sdk.admin.customerGroup.list({
     *   fields: "id,*customer"
     * })
     * .then(({ customer_groups, count, limit, offset }) => {
     *   console.log(customer_groups)
     * })
     * ```
     *
     * Learn more about the `fields` property in the [API reference](https://docs.medusajs.com/api/store#select-fields-and-relations).
     */ list(query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/customer-groups`, {
                method: "GET",
                headers,
                query
            });
        });
    }
    /**
     * This method creates a customer group. It sends a request to the
     * [Create Customer Group](https://docs.medusajs.com/api/admin#customer-groups_postcustomergroups)
     * API route.
     *
     * @param body - The customer group's details.
     * @param query - Configure the fields to retrieve in the customer group.
     * @param headers - Headers to pass in the request.
     * @returns The customer group's details.
     *
     * @example
     * sdk.admin.customerGroup.create({
     *   name: "VIP"
     * })
     * .then(({ customer_group }) => {
     *   console.log(customer_group)
     * })
     */ create(body, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/customer-groups`, {
                method: "POST",
                headers,
                body,
                query
            });
        });
    }
    /**
     * This method updates a customer group's details. It sends a request to the
     * [Update Customer](https://docs.medusajs.com/api/admin#customer-groups_postcustomergroupsid)
     * API route.
     *
     * @param id - The customer group's ID.
     * @param body - The details to update in the group.
     * @param query - Configure the fields to retrieve in the customer group.
     * @param headers - Headers to pass in the request.
     * @returns The customer group's details.
     *
     * @example
     * sdk.admin.customerGroup.update("cusgroup_123", {
     *   name: "VIP"
     * })
     * .then(({ customer_group }) => {
     *   console.log(customer_group)
     * })
     */ update(id, body, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/customer-groups/${id}`, {
                method: "POST",
                headers,
                body,
                query
            });
        });
    }
    /**
     * This method deletes a customer group. This method sends a request to the
     * [Delete Customer Group](https://docs.medusajs.com/api/admin#customer-groups_deletecustomergroupsid)
     * API route.
     *
     * @param id - The customer group's ID.
     * @param headers - Headers to pass in the request
     * @returns The deletion's details.
     *
     * @example
     * sdk.admin.customerGroup.delete("cusgroup_123")
     * .then(({ deleted }) => {
     *   console.log(deleted)
     * })
     */ delete(id, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/customer-groups/${id}`, {
                method: "DELETE",
                headers
            });
        });
    }
    /**
     * This method manages customers of a group to add or remove them from the group.
     * It sends a request to the [Manage Customers](https://docs.medusajs.com/api/admin#customer-groups_postcustomergroupsidcustomers)
     * API route.
     *
     * @param id - The group's ID.
     * @param body - The customers to add or remove from the group.
     * @param headers - Headers to pass in the request
     * @returns The customer group's details.
     *
     * @example
     * sdk.admin.customerGroup.batchCustomers("cusgroup_123", {
     *   add: ["cus_123"],
     *   remove: ["cus_321"]
     * })
     * .then(({ customer_group }) => {
     *   console.log(customer_group)
     * })
     */ batchCustomers(id, body, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/customer-groups/${id}/customers`, {
                method: "POST",
                headers,
                body
            });
        });
    }
} //# sourceMappingURL=customer-group.js.map
}}),
"[project]/node_modules/@medusajs/js-sdk/dist/esm/admin/exchange.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "Exchange": (()=>Exchange)
});
var __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
class Exchange {
    /**
     * @ignore
     */ constructor(client){
        this.client = client;
    }
    /**
     * This method retrieves a paginated list of exchanges. It sends a request to the
     * [List Exchanges](https://docs.medusajs.com/api/admin#exchanges_getexchanges)
     * API route.
     *
     * @param query - Filters and pagination configurations.
     * @param headers - Headers to pass in the request.
     * @returns The paginated list of exchanges.
     *
     * @example
     * To retrieve the list of exchanges:
     *
     * ```ts
     * sdk.admin.exchange.list()
     * .then(({ exchanges, count, limit, offset }) => {
     *   console.log(exchanges)
     * })
     * ```
     *
     * To configure the pagination, pass the `limit` and `offset` query parameters.
     *
     * For example, to retrieve only 10 items and skip 10 items:
     *
     * ```ts
     * sdk.admin.exchange.list({
     *   limit: 10,
     *   offset: 10
     * })
     * .then(({ exchanges, count, limit, offset }) => {
     *   console.log(exchanges)
     * })
     * ```
     *
     * Using the `fields` query parameter, you can specify the fields and relations to retrieve
     * in each exchange:
     *
     * ```ts
     * sdk.admin.exchange.list({
     *   fields: "id,*order"
     * })
     * .then(({ exchanges, count, limit, offset }) => {
     *   console.log(exchanges)
     * })
     * ```
     *
     * Learn more about the `fields` property in the [API reference](https://docs.medusajs.com/api/store#select-fields-and-relations).
     */ list(query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/exchanges`, {
                query,
                headers
            });
        });
    }
    /**
     * This method retrieves an exchange by its ID. It sends a request to the
     * [Get Exchange](https://docs.medusajs.com/api/admin#exchanges_getexchangesid)
     * API route.
     *
     * @param id - The exchange's ID.
     * @param query - Configure the fields to retrieve in the exchange.
     * @param headers - Headers to pass in the request.
     * @returns The exchange's details.
     *
     * @example
     * To retrieve an exchange by its ID:
     *
     * ```ts
     * sdk.admin.exchange.retrieve("exchange_123")
     * .then(({ exchange }) => {
     *   console.log(exchange)
     * })
     * ```
     *
     * To specify the fields and relations to retrieve:
     *
     * ```ts
     * sdk.admin.exchange.retrieve("exchange_123", {
     *   fields: "id,*order"
     * })
     * .then(({ exchange }) => {
     *   console.log(exchange)
     * })
     * ```
     *
     * Learn more about the `fields` property in the [API reference](https://docs.medusajs.com/api/store#select-fields-and-relations).
     */ retrieve(id, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/exchanges/${id}`, {
                query,
                headers
            });
        });
    }
    /**
     * This method creates an admin exchange. It sends a request to the
     * [Create Exchange](https://docs.medusajs.com/api/admin#exchanges_postexchanges) API route.
     *
     * @param body - The exchange's details.
     * @param query - Configure the fields to retrieve in the exchange.
     * @param headers - Headers to pass in the request.
     * @returns The exchange's details.
     *
     * @example
     * sdk.admin.exchange.create({
     *   order_id: "order_123"
     * })
     * .then(({ exchange }) => {
     *   console.log(exchange)
     * })
     */ create(body, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/exchanges`, {
                method: "POST",
                headers,
                body,
                query
            });
        });
    }
    /**
     * This method cancels an exchange. It sends a request to the
     * [Cancel Exchange](https://docs.medusajs.com/api/admin#exchanges_postexchangesidcancel) API route.
     *
     * @param id - The exchange's ID.
     * @param query - Configure the fields to retrieve in the exchange.
     * @param headers - Headers to pass in the request.
     * @returns The exchange's details.
     *
     * @example
     * sdk.admin.exchange.cancel("exchange_123")
     * .then(({ exchange }) => {
     *   console.log(exchange)
     * })
     */ cancel(id, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/exchanges/${id}/cancel`, {
                method: "POST",
                headers,
                query
            });
        });
    }
    /**
     * This method adds inbound (or return) items to an exchange. These inbound items will
     * have the action `RETURN_ITEM`.
     *
     * This method sends a request to the [Add Inbound Items](https://docs.medusajs.com/api/admin#exchanges_postexchangesidinbounditems)
     * API route.
     *
     * @param id - The exchange's ID.
     * @param body - The items to add.
     * @param query - Configure the fields to retrieve in the return.
     * @param headers - Headers to pass in the request.
     * @returns The details of the return associated with the exchange, with a preview of the order when the exchange is applied.
     *
     * @example
     * sdk.admin.exchange.addInboundItems("exchange_123", {
     *   items: [{
     *     id: "orli_123",
     *     quantity: 1
     *   }]
     * })
     * .then(({ return: returnData }) => {
     *   console.log(returnData)
     * })
     */ addInboundItems(id, body, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/exchanges/${id}/inbound/items`, {
                method: "POST",
                headers,
                body,
                query
            });
        });
    }
    /**
     * This method updates an inbound (or return) item from an exchange using the ID of
     * the item's `RETURN_ITEM` action.
     *
     * Every item has an `actions` property, whose value is an array of actions. You can
     * check the action's name using its `action` property, and use the value of the `id` property.
     *
     * This method sends a request to the [Update Inbound Item](https://docs.medusajs.com/api/admin#exchanges_postexchangesidinbounditemsaction_id)
     * API route.
     *
     * @param id - The exchange's ID.
     * @param actionId - The id of the return item's `RETURN_ITEM` action.
     * @param body - The details to update.
     * @param query - Configure the fields to retrieve in the return.
     * @param headers - Headers to pass in the request.
     * @returns The details of the return associated with the exchange, with a preview of the order when the exchange is applied.
     *
     * @example
     * sdk.admin.exchange.updateInboundItem(
     *   "exchange_123",
     *   "ordchact_123",
     *   {
     *     quantity: 1
     *   }
     * )
     * .then(({ return: returnData }) => {
     *   console.log(returnData)
     * })
     */ updateInboundItem(id, actionId, body, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/exchanges/${id}/inbound/items/${actionId}`, {
                method: "POST",
                headers,
                body,
                query
            });
        });
    }
    /**
     * This method removes an inbound (or return) item from an exchange using the ID of the
     * item's `RETURN_ITEM` action.
     *
     * Every item has an `actions` property, whose value is an array of actions.
     * You can check the action's name using its `action` property, and use the value of the `id` property.
     *
     * This method sends a request to the [Remove Inbound Item](https://docs.medusajs.com/api/admin#exchanges_deleteexchangesidinbounditemsaction_id)
     * API route.
     *
     * @param id - The exchange's ID.
     * @param actionId - The id of the return item's `RETURN_ITEM` action.
     * @param query - Configure the fields to retrieve in the return.
     * @param headers - Headers to pass in the request.
     * @returns The details of the return associated with the exchange, with a preview of the order when the exchange is applied.
     *
     * @example
     * sdk.admin.exchange.removeInboundItem(
     *   "exchange_123",
     *   "ordchact_123",
     * )
     * .then(({ return: returnData }) => {
     *   console.log(returnData)
     * })
     */ removeInboundItem(id, actionId, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/exchanges/${id}/inbound/items/${actionId}`, {
                method: "DELETE",
                headers,
                query
            });
        });
    }
    /**
     * This method adds an inbound (or return) shipping method to an exchange.
     * The inbound shipping method will have a `SHIPPING_ADD` action.
     *
     * This method sends a request to the [Add Inbound Shipping](https://docs.medusajs.com/api/admin#exchanges_postexchangesidinboundshippingmethod)
     * API route.
     *
     * This method sends a request to the [Add Inbound Shipping](https://docs.medusajs.com/api/admin#exchanges_postexchangesidinboundshippingmethod)
     * API route.
     *
     * @param id - The exchange's ID.
     * @param body - The shipping method's details.
     * @param query - Configure the fields to retrieve in the return.
     * @param headers - Headers to pass in the request.
     * @returns The details of the return associated with the exchange, with a preview of the order when the exchange is applied.
     *
     * @example
     * sdk.admin.exchange.addInboundShipping("exchange_123", {
     *   shipping_option_id: "so_123"
     * })
     * .then(({ return: returnData }) => {
     *   console.log(returnData)
     * })
     */ addInboundShipping(id, body, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/exchanges/${id}/inbound/shipping-method`, {
                method: "POST",
                headers,
                body,
                query
            });
        });
    }
    /**
     * This method updates the shipping method for returning items in the exchange using the ID
     * of the method's `SHIPPING_ADD` action.
     *
     * Every shipping method has an `actions` property, whose value is an array of actions.
     * You can check the action's name using its `action` property, and use the value of the `id` property.
     *
     * This method sends a request to the [Update Inbound Shipping](https://docs.medusajs.com/api/admin#exchanges_postexchangesidinboundshippingmethodaction_id)
     * API route.
     *
     * @param id - The exchange's ID.
     * @param actionId - The id of the shipping method's `SHIPPING_ADD` action.
     * @param body - The details to update.
     * @param query - Configure the fields to retrieve in the return.
     * @param headers - Headers to pass in the request.
     * @returns The details of the return associated with the exchange, with a preview of the order when the exchange is applied.
     *
     * @example
     * sdk.admin.exchange.updateInboundShipping(
     *   "exchange_123",
     *   "ordchact_123",
     *    {
     *     custom_amount: 10
     *   }
     * )
     * .then(({ return: returnData }) => {
     *   console.log(returnData)
     * })
     */ updateInboundShipping(id, actionId, body, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/exchanges/${id}/inbound/shipping-method/${actionId}`, {
                method: "POST",
                headers,
                body,
                query
            });
        });
    }
    /**
     * This method removes the shipping method for returning items in the exchange using the ID
     * of the method's `SHIPPING_ADD` action.
     *
     * Every shipping method has an `actions` property, whose value is an array of actions.
     * You can check the action's name using its `action` property, and use the value of the `id` property.
     *
     * This method sends a request to the [Remove Inbound Shipping](https://docs.medusajs.com/api/admin#exchanges_deleteexchangesidinboundshippingmethodaction_id)
     * API route.
     *
     * @param id - The exchange's ID.
     * @param actionId - The id of the shipping method's `SHIPPING_ADD` action.
     * @param query - Configure the fields to retrieve in the return.
     * @param headers - Headers to pass in the request.
     * @returns The details of the return associated with the exchange, with a preview of the order when the exchange is applied.
     *
     * @example
     * sdk.admin.exchange.deleteInboundShipping(
     *   "exchange_123",
     *   "ordchact_123",
     * )
     * .then(({ return: returnData }) => {
     *   console.log(returnData)
     * })
     */ deleteInboundShipping(id, actionId, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/exchanges/${id}/inbound/shipping-method/${actionId}`, {
                method: "DELETE",
                headers,
                query
            });
        });
    }
    /**
     * This method adds outbound (or new) items to an exchange.
     * These outbound items will have the action `ITEM_ADD`.
     *
     * This method sends a request to the [Add Outbound Items](https://docs.medusajs.com/api/admin#exchanges_postexchangesidoutbounditems)
     * API route.
     *
     * @param id - The exchange's ID.
     * @param body - The items to add.
     * @param query - Configure the fields to retrieve in the exchange.
     * @param headers - Headers to pass in the request
     * @returns The exchange's details with a preview of the order when the exchange is applied.
     *
     * @example
     * sdk.admin.exchange.addOutboundItems("exchange_123", {
     *   items: [{
     *     id: "variant_123",
     *     quantity: 1
     *   }]
     * })
     * .then(({ exchange }) => {
     *   console.log(exchange)
     * })
     */ addOutboundItems(id, body, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/exchanges/${id}/outbound/items`, {
                method: "POST",
                headers,
                body,
                query
            });
        });
    }
    /**
     * This method updates an outbound (or new) item from an exchange using the ID
     * of the item's `ITEM_ADD` action.
     *
     * Every item has an `actions` property, whose value is an array of actions.
     * You can check the action's name using its `action` property, and use the value of the `id` property.
     *
     * This method sends a request to the [Update Inbound Item](https://docs.medusajs.com/api/admin#exchanges_postexchangesidoutbounditemsaction_id)
     * API route.
     *
     * @param id - The exchange's ID.
     * @param actionId - The id of the new exchange item's `ITEM_ADD` action.
     * @param body - The item's details to update.
     * @param query - Configure the fields to retrieve in the exchange.
     * @param headers - Headers to pass in the request
     * @returns The exchange's details with a preview of the order when the exchange is applied.
     *
     * @example
     * sdk.admin.exchange.updateOutboundItem(
     *   "exchange_123",
     *   "ordchact_123",
     *   {
     *     quantity: 1
     *   }
     * )
     * .then(({ exchange }) => {
     *   console.log(exchange)
     * })
     */ updateOutboundItem(id, actionId, body, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/exchanges/${id}/outbound/items/${actionId}`, {
                method: "POST",
                headers,
                body,
                query
            });
        });
    }
    /**
     * This method removes an outbound (or new) item from an exchange using the ID
     * of the item's `ITEM_ADD` action.
     *
     * Every item has an `actions` property, whose value is an array of actions.
     * You can check the action's name using its `action` property, and use the value of the `id` property.
     *
     * This method sends a request to the [Update Outbound Item](https://docs.medusajs.com/api/admin#exchanges_deleteexchangesidoutbounditemsaction_id)
     * API route.
     *
     * @param id - The exchange's ID.
     * @param actionId - The id of the new exchange item's `ITEM_ADD` action.
     * @param query - Configure the fields to retrieve in the exchange.
     * @param headers - Headers to pass in the request
     * @returns The exchange's details with a preview of the order when the exchange is applied.
     *
     * @example
     * sdk.admin.exchange.removeOutboundItem(
     *   "exchange_123",
     *   "ordchact_123",
     * )
     * .then(({ exchange }) => {
     *   console.log(exchange)
     * })
     */ removeOutboundItem(id, actionId, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/exchanges/${id}/outbound/items/${actionId}`, {
                method: "DELETE",
                headers,
                query
            });
        });
    }
    /**
     * This method adds an outbound shipping method to an exchange. The outbound shipping method
     * will have a `SHIPPING_ADD` action.
     *
     * This method sends a request to the [Add Outbound Shipping](https://docs.medusajs.com/api/admin#exchanges_postexchangesidoutboundshippingmethod)
     * API route.
     *
     * @param id - The exchange's ID.
     * @param body - The shipping method's details.
     * @param query - Configure the fields to retrieve in the exchange.
     * @param headers - Headers to pass in the request
     * @returns The exchange's details with a preview of the order when the exchange is applied.
     *
     * @example
     * sdk.admin.exchange.addOutboundShipping("exchange_123", {
     *   shipping_option_id: "so_123"
     * })
     * .then(({ exchange }) => {
     *   console.log(exchange)
     * })
     */ addOutboundShipping(id, body, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/exchanges/${id}/outbound/shipping-method`, {
                method: "POST",
                headers,
                body,
                query
            });
        });
    }
    /**
     * This method updates the shipping method for delivering outbound items in the exchange using
     * the ID of the method's `SHIPPING_ADD` action.
     *
     * Every shipping method has an `actions` property, whose value is an array of actions.
     * You can check the action's name using its `action` property, and use the value of the `id` property.
     *
     * This method sends a request to the [Update Outbound Shipping](https://docs.medusajs.com/api/admin#exchanges_postexchangesidoutboundshippingmethodaction_id)
     * API route.
     *
     * @param id - The exchange's ID.
     * @param actionId - The id of the shipping method's `SHIPPING_ADD` action.
     * @param body - The details to update.
     * @param query - Configure the fields to retrieve in the exchange.
     * @param headers - Headers to pass in the request
     * @returns The exchange's details with a preview of the order when the exchange is applied.
     *
     * @example
     * sdk.admin.exchange.updateOutboundShipping(
     *   "exchange_123",
     *   "ordchact_123",
     *   {
     *     custom_amount: 10
     *   }
     * )
     * .then(({ exchange }) => {
     *   console.log(exchange)
     * })
     */ updateOutboundShipping(id, actionId, body, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/exchanges/${id}/outbound/shipping-method/${actionId}`, {
                method: "POST",
                headers,
                body,
                query
            });
        });
    }
    /**
     * This method removes the shipping method for delivering outbound items in the exchange using
     * the ID of the method's `SHIPPING_ADD` action.
     *
     * Every shipping method has an `actions` property, whose value is an array of actions.
     * You can check the action's name using its `action` property, and use the value of the `id` property.
     *
     * This method sends a request to the [Remove Outbound Shipping](https://docs.medusajs.com/api/admin#exchanges_deleteexchangesidoutboundshippingmethodaction_id)
     * API route.
     *
     * @param id - The exchange's ID.
     * @param actionId - The id of the shipping method's `SHIPPING_ADD` action.
     * @param query - Configure the fields to retrieve in the exchange.
     * @param headers - Headers to pass in the request
     * @returns The exchange's details with a preview of the order when the exchange is applied.
     *
     * @example
     * sdk.admin.exchange.deleteOutboundShipping(
     *   "exchange_123",
     *   "ordchact_123",
     * )
     * .then(({ exchange }) => {
     *   console.log(exchange)
     * })
     */ deleteOutboundShipping(id, actionId, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/exchanges/${id}/outbound/shipping-method/${actionId}`, {
                method: "DELETE",
                headers,
                query
            });
        });
    }
    /**
     * This method confirms an exchange request, applying its changes on the associated order.
     *
     * This method sends a request to the [Confirm Exchange](https://docs.medusajs.com/api/admin#exchanges_postexchangesidrequest)
     * API route.
     *
     * @param id - The exchange's ID.
     * @param body - The confirmation's details.
     * @param query - Configure the fields to retrieve in the exchange.
     * @param headers - Headers to pass in the request
     * @returns The exchange and associated return's details with a preview of the order when the exchange is applied.
     *
     * @example
     * sdk.admin.exchange.request("exchange_123", {})
     * .then(({ exchange }) => {
     *   console.log(exchange)
     * })
     */ request(id, body, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/exchanges/${id}/request`, {
                method: "POST",
                headers,
                body,
                query
            });
        });
    }
    /**
     * This method cancels an exchange request. It sends a request to the
     * [Cancel Exchange Request](https://docs.medusajs.com/api/admin#exchanges_deleteexchangesidrequest)
     * API route.
     *
     * @param id - The exchange's ID.
     * @param query - Configure the fields to retrieve in the exchange.
     * @param headers - Headers to pass in the request
     * @returns The cancelation's details.
     *
     * @example
     * sdk.admin.exchange.cancel("exchange_123")
     * .then(({ deleted }) => {
     *   console.log(deleted)
     * })
     */ cancelRequest(id, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/exchanges/${id}/request`, {
                method: "DELETE",
                headers,
                query
            });
        });
    }
} //# sourceMappingURL=exchange.js.map
}}),
"[project]/node_modules/@medusajs/js-sdk/dist/esm/admin/fulfillment.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "Fulfillment": (()=>Fulfillment)
});
var __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
class Fulfillment {
    /**
     * @ignore
     */ constructor(client){
        this.client = client;
    }
    /**
     * This method creates a fulfillment. It sends a request to the
     * [Create Fulfillment](https://docs.medusajs.com/api/admin#fulfillments_postfulfillments)
     * API route.
     *
     * @param body - The fulfillment's details.
     * @param query - Configure the fields to retrieve in the fulfillment.
     * @param headers - Headers to pass in the request.
     * @returns The fulfillment's details.
     *
     * @example
     * sdk.admin.fulfillment.create({
     *   location_id: "sloc_123",
     *   provider_id: "my_fulfillment",
     *   delivery_address: {
     *     country_code: "us"
     *   },
     *   items: [
     *     {
     *       title: "Shirt",
     *       sku: "SHIRT",
     *       quantity: 1,
     *       barcode: "123"
     *     }
     *   ],
     *   labels: [],
     *   order: {},
     *   order_id: "order_123"
     * })
     * .then(({ fulfillment }) => {
     *   console.log(fulfillment)
     * })
     */ create(body, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/fulfillments`, {
                method: "POST",
                headers,
                body,
                query
            });
        });
    }
    /**
     * This method cancels a fulfillment. It sends a request to the
     * [Cancel Fulfillment](https://docs.medusajs.com/api/admin#fulfillments_postfulfillmentsidcancel)
     * API route.
     *
     * @param id - The fulfillment's ID.
     * @param query - Configure the fields to retrieve in the fulfillment.
     * @param headers - Headers to pass in the request.
     * @returns The fulfillment's details.
     *
     * @example
     * sdk.admin.fulfillment.cancel("ful_123")
     * .then(({ fulfillment }) => {
     *   console.log(fulfillment)
     * })
     */ cancel(id, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/fulfillments/${id}`, {
                method: "POST",
                body: {},
                headers,
                query
            });
        });
    }
    /**
     * This method creates a shipment for a fulfillment. It sends a request to the
     * [Create Shipment](https://docs.medusajs.com/api/admin#fulfillments_postfulfillmentsidshipment)
     * API route.
     *
     * @param id - The fulfillment's ID.
     * @param body - The shipment's details.
     * @param query - Configure the fields to retrieve in the fulfillment.
     * @param headers - Headers to pass in the request.
     * @returns The fulfillment's details.
     *
     * @example
     * sdk.admin.fulfillment.createShipment("ful_123", {
     *   labels: [
     *     {
     *       tracking_number: "123",
     *       tracking_url: "example.com",
     *       label_url: "example.com"
     *     }
     *   ]
     * })
     * .then(({ fulfillment }) => {
     *   console.log(fulfillment)
     * })
     */ createShipment(id, body, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/fulfillments/${id}/shipment`, {
                method: "POST",
                headers,
                body,
                query
            });
        });
    }
} //# sourceMappingURL=fulfillment.js.map
}}),
"[project]/node_modules/@medusajs/js-sdk/dist/esm/admin/fulfillment-provider.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "FulfillmentProvider": (()=>FulfillmentProvider)
});
var __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
class FulfillmentProvider {
    /**
     * @ignore
     */ constructor(client){
        this.client = client;
    }
    /**
     * This method retrieves a paginated list of fulfillment providers. It sends a request to the
     * [List Fulfillment Providers](https://docs.medusajs.com/api/admin#fulfillment-providers_getfulfillmentproviders)
     * API route.
     *
     * @param query - Filters and pagination configurations.
     * @param headers - Headers to pass in the request.
     * @returns The paginated list of providers.
     *
     * @example
     * To retrieve the list of fulfillment providers:
     *
     * ```ts
     * sdk.admin.fulfillmentProvider.list()
     * .then(({ fulfillment_providers, count, limit, offset }) => {
     *   console.log(fulfillment_providers)
     * })
     * ```
     *
     * To configure the pagination, pass the `limit` and `offset` query parameters.
     *
     * For example, to retrieve only 10 items and skip 10 items:
     *
     * ```ts
     * sdk.admin.fulfillmentProvider.list({
     *   limit: 10,
     *   offset: 10
     * })
     * .then(({ fulfillment_providers, count, limit, offset }) => {
     *   console.log(fulfillment_providers)
     * })
     * ```
     *
     * Using the `fields` query parameter, you can specify the fields and relations to retrieve
     * in each fulfillment provider:
     *
     * ```ts
     * sdk.admin.fulfillmentProvider.list({
     *   fields: "id"
     * })
     * .then(({ fulfillment_providers, count, limit, offset }) => {
     *   console.log(fulfillment_providers)
     * })
     * ```
     *
     * Learn more about the `fields` property in the [API reference](https://docs.medusajs.com/api/store#select-fields-and-relations).
     */ list(query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/fulfillment-providers`, {
                method: "GET",
                headers,
                query
            });
        });
    }
    /**
     * This method retrieves a list of fulfillment options for a given fulfillment provider. It sends a request to the
     * [List Fulfillment Options](https://docs.medusajs.com/api/admin#fulfillment-providers_getfulfillmentprovideroptions)
     * API route.
     *
     * @param id - The ID of the fulfillment provider.
     * @param headers - Headers to pass in the request.
     * @returns The list of fulfillment options.
     */ listFulfillmentOptions(id, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/fulfillment-providers/${id}/options`, {
                method: "GET",
                headers
            });
        });
    }
} //# sourceMappingURL=fulfillment-provider.js.map
}}),
"[project]/node_modules/@medusajs/js-sdk/dist/esm/admin/fulfillment-set.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "FulfillmentSet": (()=>FulfillmentSet)
});
var __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
class FulfillmentSet {
    /**
     * @ignore
     */ constructor(client){
        this.client = client;
    }
    /**
     * This method deletes a fulfillment set. It sends a request to the
     * [Delete Fulfillment Set](https://docs.medusajs.com/api/admin#fulfillment-sets_deletefulfillmentsetsid)
     * API route.
     *
     * @param id - The fulfillment set's ID.
     * @param headers - Headers to pass in the request.
     * @returns The deletion's details.
     *
     * @example
     * sdk.admin.fulfillmentSet.delete("fset_123")
     * .then(({ deleted }) => {
     *   console.log(deleted)
     * })
     */ delete(id, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/fulfillment-sets/${id}`, {
                method: "DELETE",
                headers
            });
        });
    }
    /**
     * This method adds a service zone to a fulfillment set. It uses the
     * [Add Service Zone](https://docs.medusajs.com/api/admin#fulfillment-sets_postfulfillmentsetsidservicezones)
     * API route.
     *
     * @param id - The fulfillment set's ID.
     * @param body - The service zone's details.
     * @param query - Configure the fields to retrieve in the fulfillment set.
     * @param headers - Headers to pass in the request.
     * @returns The fulfillment set's details.
     *
     * @example
     * sdk.admin.fulfillmentSet.createServiceZone("fset_123", {
     *   name: "Europe Service Zone",
     *   geo_zones: [{
     *     type: "country",
     *     country_code: "us"
     *   }]
     * })
     * .then(({ fulfillment_set }) => {
     *   console.log(fulfillment_set)
     * })
     */ createServiceZone(id, body, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/fulfillment-sets/${id}/service-zones`, {
                method: "POST",
                headers,
                body,
                query
            });
        });
    }
    /**
     * This method retrieves a fulfillment set's service zone's details. It sends a request to the
     * [Get Service Zone](https://docs.medusajs.com/api/admin#fulfillment-sets_getfulfillmentsetsidservicezoneszone_id)
     * API route.
     *
     * @param fulfillmentSetId - The fulfillment set's ID.
     * @param serviceZoneId - The service zone's ID.
     * @param query - Configure the fields to retrieve in the service zone.
     * @param headers - Headers to pass in the request.
     * @returns The service zone's details.
     *
     * @example
     * To retrieve a fulfillment set's service zone by its ID:
     *
     * ```ts
     * sdk.admin.fulfillmentSet.retrieveServiceZone(
     *   "fset_123",
     *   "serzo_123"
     * )
     * .then(({ service_zone }) => {
     *   console.log(service_zone)
     * })
     * ```
     *
     * To specify the fields and relations to retrieve:
     *
     * ```ts
     * sdk.admin.fulfillmentSet.retrieveServiceZone(
     *   "fset_123",
     *   "serzo_123",
     *   {
     *     fields: "id,*geo_zones"
     *   }
     * )
     * .then(({ service_zone }) => {
     *   console.log(service_zone)
     * })
     * ```
     *
     * Learn more about the `fields` property in the [API reference](https://docs.medusajs.com/api/store#select-fields-and-relations).
     */ retrieveServiceZone(fulfillmentSetId, serviceZoneId, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/fulfillment-sets/${fulfillmentSetId}/service-zones/${serviceZoneId}`, {
                method: "GET",
                headers,
                query
            });
        });
    }
    /**
     * This method updates a service zone in a fulfillment set. It sends a request to the
     * [Update Service Zone](https://docs.medusajs.com/api/admin#fulfillment-sets_postfulfillmentsetsidservicezoneszone_id)
     * API route.
     *
     * @param fulfillmentSetId - The fulfillment set's ID.
     * @param serviceZoneId - The service zone's ID.
     * @param body - The data to update in the service zone.
     * @param query - Configure the fields to retrieve in the fulfillment set.
     * @param headers - Headers to pass in the request.
     * @returns The fulfillment set's details.
     *
     * @example
     * sdk.admin.fulfillmentSet.updateServiceZone(
     *   "fset_123",
     *   "serzo_123",
     *   {
     *     name: "Europe Service Zone",
     *   }
     * )
     * .then(({ fulfillment_set }) => {
     *   console.log(fulfillment_set)
     * })
     */ updateServiceZone(fulfillmentSetId, serviceZoneId, body, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/fulfillment-sets/${fulfillmentSetId}/service-zones/${serviceZoneId}`, {
                method: "POST",
                headers,
                body,
                query
            });
        });
    }
    /**
     * This method deletes a service zone in a fulfillment set. It sends a request to the
     * [Remove Service Zone](https://docs.medusajs.com/api/admin#fulfillment-sets_deletefulfillmentsetsidservicezoneszone_id)
     * API route.
     *
     * @param fulfillmentSetId - The fulfullment set's ID.
     * @param serviceZoneId - The service zone's ID.
     * @param headers - Headers to pass in the request.
     * @returns The deletion's details.
     *
     * @example
     * sdk.admin.fulfillmentSet.deleteServiceZone(
     *   "fset_123",
     *   "serzo_123",
     * )
     * .then(({ deleted, parent: fulfillmentSet }) => {
     *   console.log(deleted, fulfillmentSet)
     * })
     */ deleteServiceZone(fulfillmentSetId, serviceZoneId, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/fulfillment-sets/${fulfillmentSetId}/service-zones/${serviceZoneId}`, {
                method: "DELETE",
                headers
            });
        });
    }
} //# sourceMappingURL=fulfillment-set.js.map
}}),
"[project]/node_modules/@medusajs/js-sdk/dist/esm/admin/inventory-item.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "InventoryItem": (()=>InventoryItem)
});
var __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
class InventoryItem {
    /**
     * @ignore
     */ constructor(client){
        this.client = client;
    }
    /**
     * This method creates an inventory item. It sends a request to the
     * [Create Inventory Item](https://docs.medusajs.com/api/admin#inventory-items_postinventoryitems)
     * API route.
     *
     * @param body - The inventory item's details.
     * @param query - Configure the fields to retrieve in the inventory item.
     * @param headers - Headers to pass in the request.
     * @returns The inventory item's details.
     *
     * @example
     * sdk.admin.inventoryItem.create({
     *   sku: "SHIRT"
     * })
     * .then(({ inventory_item }) => {
     *   console.log(inventory_item)
     * })
     */ create(body, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/inventory-items`, {
                method: "POST",
                headers,
                body,
                query
            });
        });
    }
    /**
     * This method updates an inventory level. It sends a request to the
     * [Update Inventory Item](https://docs.medusajs.com/api/admin#inventory-items_postinventoryitemsid)
     * API route.
     *
     * @param id - The inventory item's ID.
     * @param body - The data to update.
     * @param query - Configure the fields to retrieve in the inventory item.
     * @param headers - Headers to pass in the request.
     * @returns The inventory item's details.
     *
     * @example
     * sdk.admin.inventoryItem.update("iitem_123", {
     *   sku: "SHIRT"
     * })
     * .then(({ inventory_item }) => {
     *   console.log(inventory_item)
     * })
     */ update(id, body, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/inventory-items/${id}`, {
                method: "POST",
                headers,
                body,
                query
            });
        });
    }
    /**
     * This method retrieves a paginated list of inventory items. It sends a request to the
     * [List Inventory Items](https://docs.medusajs.com/api/admin#inventory-items_getinventoryitems)
     * API route.
     *
     * @param query - Filters and pagination configurations.
     * @param headers - Headers to pass in the request.
     * @returns The paginated list of inventory items.
     *
     * @example
     * To retrieve the list of inventory items:
     *
     * ```ts
     * sdk.admin.inventoryItem.list()
     * .then(({ inventory_items, count, limit, offset }) => {
     *   console.log(inventory_items)
     * })
     * ```
     *
     * To configure the pagination, pass the `limit` and `offset` query parameters.
     *
     * For example, to retrieve only 10 items and skip 10 items:
     *
     * ```ts
     * sdk.admin.inventoryItem.list({
     *   limit: 10,
     *   offset: 10
     * })
     * .then(({ inventory_items, count, limit, offset }) => {
     *   console.log(inventory_items)
     * })
     * ```
     *
     * Using the `fields` query parameter, you can specify the fields and relations to retrieve
     * in each inventory item:
     *
     * ```ts
     * sdk.admin.inventoryItem.list({
     *   fields: "id,*location_levels"
     * })
     * .then(({ inventory_items, count, limit, offset }) => {
     *   console.log(inventory_items)
     * })
     * ```
     *
     * Learn more about the `fields` property in the [API reference](https://docs.medusajs.com/api/store#select-fields-and-relations).
     */ list(query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/inventory-items`, {
                query,
                headers
            });
        });
    }
    /**
     * This method retrieves an inventory item by its ID. It sends a request to the
     * [Get Inventory Item](https://docs.medusajs.com/api/admin#inventory-items_getinventoryitemsid) API route.
     *
     * @param id - The inventory item's ID.
     * @param query - Configure the fields to retrieve in the inventory item.
     * @param headers - Headers to pass in the request
     * @returns The inventory item's details.
     *
     * @example
     * To retrieve an inventory item by its ID:
     *
     * ```ts
     * sdk.admin.inventoryItem.retrieve("iitem_123")
     * .then(({ inventory_item }) => {
     *   console.log(inventory_item)
     * })
     * ```
     *
     * To specify the fields and relations to retrieve:
     *
     * ```ts
     * sdk.admin.inventoryItem.retrieve("iitem_123", {
     *   fields: "id,*location_levels"
     * })
     * .then(({ inventory_item }) => {
     *   console.log(inventory_item)
     * })
     * ```
     *
     * Learn more about the `fields` property in the [API reference](https://docs.medusajs.com/api/store#select-fields-and-relations).
     */ retrieve(id, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/inventory-items/${id}`, {
                query,
                headers
            });
        });
    }
    /**
     * This method deletes an inventory item. This sends a request to the
     * [Delete Inventory Item](https://docs.medusajs.com/api/admin#inventory-items_deleteinventoryitemsid)
     * API route.
     *
     * @param id - The inventory item's ID.
     * @param headers - Headers to pass in the request
     * @returns The deletion's details.
     *
     * @example
     * sdk.admin.inventoryItem.delete("iitem_123")
     * .then(({ deleted }) => {
     *   console.log(deleted)
     * })
     */ delete(id, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/inventory-items/${id}`, {
                method: "DELETE",
                headers
            });
        });
    }
    /**
     * This method retrieves a paginated list of inventory levels that belong to an inventory item.
     * It sends a request to the [List Inventory Items](https://docs.medusajs.com/api/admin#inventory-items_getinventoryitems)
     * API route.
     *
     * @param id - The inventory item's ID.
     * @param query - Filters and pagination configurations.
     * @param headers - Headers to pass in the request.
     * @returns The paginated list of inventory levels.
     *
     * @example
     * To retrieve the list of inventory levels:
     *
     * ```ts
     * sdk.admin.inventoryItem.listLevels("iitem_123")
     * .then(({ inventory_levels, count, limit, offset }) => {
     *   console.log(inventory_levels)
     * })
     * ```
     *
     * To configure the pagination, pass the `limit` and `offset` query parameters.
     *
     * For example, to retrieve only 10 items and skip 10 items:
     *
     * ```ts
     * sdk.admin.inventoryItem.listLevels("iitem_123", {
     *   limit: 10,
     *   offset: 10
     * })
     * .then(({ inventory_levels, count, limit, offset }) => {
     *   console.log(inventory_levels)
     * })
     * ```
     *
     * Using the `fields` query parameter, you can specify the fields and relations to retrieve
     * in each inventory level:
     *
     * ```ts
     * sdk.admin.inventoryItem.listLevels("iitem_123", {
     *   fields: "id,*inventory_item"
     * })
     * .then(({ inventory_levels, count, limit, offset }) => {
     *   console.log(inventory_levels)
     * })
     * ```
     *
     * Learn more about the `fields` property in the [API reference](https://docs.medusajs.com/api/store#select-fields-and-relations).
     */ listLevels(id, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/inventory-items/${id}/location-levels`, {
                query,
                headers
            });
        });
    }
    /**
     * This method updates the inventory level of the specified inventory item and
     * stock location.
     *
     * This method sends a request to the
     * [Update Inventory Level](https://docs.medusajs.com/api/admin#inventory-items_postinventoryitemsidlocationlevelslocation_id)
     * API route.
     *
     * @param id - The inventory item's ID.
     * @param locationId - The stock location's ID.
     * @param body - The details to update.
     * @param query - Configure the fields to retrieve in the inventory item.
     * @param headers - Headers to pass in the request
     * @returns The inventory item's details.
     *
     * @example
     * sdk.admin.inventoryItem.updateLevel(
     *   "iitem_123",
     *   "sloc_123",
     *   {
     *     stocked_quantity: 10
     *   }
     * )
     * .then(({ inventory_item }) => {
     *   console.log(inventory_item)
     * })
     */ updateLevel(id, locationId, body, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/inventory-items/${id}/location-levels/${locationId}`, {
                method: "POST",
                headers,
                body,
                query
            });
        });
    }
    /**
     * This method deletes an inventory level associated with an inventory item
     * and a stock location.
     *
     * This method sends a request to the
     * [Remove Inventory Level](https://docs.medusajs.com/api/admin#inventory-items_deleteinventoryitemsidlocationlevelslocation_id)
     * API route.
     *
     * @param id - The inventory item's ID.
     * @param locationId - The stock location's ID.
     * @param headers - Headers to pass in the request
     * @returns The deletion's details.
     *
     * @example
     * sdk.admin.inventoryItem.deleteLevel(
     *   "iitem_123",
     *   "sloc_123",
     * )
     * .then(({ deleted, parent: inventoryItem }) => {
     *   console.log(deleted, inventoryItem)
     * })
     */ deleteLevel(id, locationId, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/inventory-items/${id}/location-levels/${locationId}`, {
                method: "DELETE",
                headers
            });
        });
    }
    /**
     * This method manages the inventory levels of an inventory item. It sends a request to the
     * [Manage Inventory Levels](https://docs.medusajs.com/api/admin#inventory-items_postinventoryitemsidlocationlevelsbatch)
     * API route.
     *
     * @deprecated Use `batchInventoryItemLocationLevels` instead.
     *
     * @param id - The inventory item's ID.
     * @param body - The inventory levels to create or delete.
     * @param query - Configure the fields to retrieve in the inventory item.
     * @param headers - Headers to pass in the request
     * @returns The inventory item's details.
     *
     * @example
     * sdk.admin.inventoryItem.batchUpdateLevels("iitem_123", {
     *   create: [{
     *     location_id: "sloc_123",
     *     stocked_quantity: 10
     *   }],
     *   delete: ["ilvl_123"]
     * })
     * .then(({ created, updated, deleted }) => {
     *   console.log(created, updated, deleted)
     * })
     */ batchUpdateLevels(id, body, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/inventory-items/${id}/location-levels/batch`, {
                method: "POST",
                headers,
                body,
                query
            });
        });
    }
    /**
     * This method manages the inventory levels of an inventory item. It sends a request to the
     * [Manage Inventory Levels](https://docs.medusajs.com/api/admin#inventory-items_postinventoryitemsidlocationlevelsbatch)
     * API route.
     *
     * @param id - The inventory item's ID.
     * @param body - The inventory levels to create, update or delete, and an optional `force` flag.
     * @param headers - Headers to pass in the request
     * @returns The inventory item's details.
     *
     * @example
     * sdk.admin.inventoryItem.batchInventoryItemLocationLevels("iitem_123", {
     *   create: [{
     *     location_id: "sloc_123",
     *     stocked_quantity: 10
     *   }],
     *   delete: ["ilvl_123"]
     * })
     * .then(({ created, updated, deleted }) => {
     *   console.log(created, updated, deleted)
     * })
     */ batchInventoryItemLocationLevels(id, body, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/inventory-items/${id}/location-levels/batch`, {
                method: "POST",
                headers,
                body
            });
        });
    }
    /**
     * This method manages the inventory levels of multiple inventory items.
     *
     * @param body - The inventory levels to create, update or delete, and an optional `force` flag.
     * @param headers - Headers to pass in the request
     * @returns The inventory item's details.
     *
     * @example
     * sdk.admin.inventoryItem.batchInventoryItemsLocationLevels({
     *   create: [{
     *     inventory_item_id: "iitem_123",
     *     location_id: "sloc_123",
     *     stocked_quantity: 10
     *   }],
     *   delete: ["ilvl_123"]
     * })
     * .then(({ created, updated, deleted }) => {
     *   console.log(created, updated, deleted)
     * })
     */ batchInventoryItemsLocationLevels(body, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/inventory-items/location-levels/batch`, {
                method: "POST",
                headers,
                body
            });
        });
    }
} //# sourceMappingURL=inventory-item.js.map
}}),
"[project]/node_modules/@medusajs/js-sdk/dist/esm/admin/invite.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "Invite": (()=>Invite)
});
var __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = this && this.__rest || function(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++){
        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
};
class Invite {
    /**
     * @ignore
     */ constructor(client){
        this.client = client;
    }
    /**
     * This method accepts an invite. It requires sending a previous request to
     * the {@link Auth.register}.
     *
     * This method sends a request to the [Accept Invite]
     * (https://docs.medusajs.com/api/admin#invites_postinvitesaccept)
     * API route.
     *
     * @param input - The details of the user to create.
     * @param query - Configure the fields to retrieve in the user.
     * @param headers - Headers to pass in the request
     * @returns The user's details.
     *
     * @example
     * const token = await sdk.auth.register("user", "emailpass", {
     *   email: "user@gmail.com",
     *   password: "supersecret"
     * })
     *
     * sdk.admin.invite.accept(
     *   {
     *     email: "user@gmail.com",
     *     first_name: "John",
     *     last_name: "Smith",
     *     invite_token: "12345..."
     *   },
     *   {
     *     Authorization: `Bearer ${token}`
     *   }
     * )
     * .then(({ user }) => {
     *   console.log(user)
     * })
     */ accept(input, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            const { invite_token } = input, rest = __rest(input, [
                "invite_token"
            ]);
            return yield this.client.fetch(`/admin/invites/accept?token=${input.invite_token}`, {
                method: "POST",
                headers,
                body: rest,
                query
            });
        });
    }
    /**
     * This method creates an invite. It sends a request to the
     * [Create Invite](https://docs.medusajs.com/api/admin#invites_postinvites)
     * API route.
     *
     * @param body - The invite's details.
     * @param query - Configure the fields to retrieve in the invite.
     * @param headers - Headers to pass in the request
     * @returns The invite's details.
     *
     * @example
     * sdk.admin.invite.create({
     *   email: "user@gmail.com",
     * })
     * .then(({ invite }) => {
     *   console.log(invite)
     * })
     */ create(body, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/invites`, {
                method: "POST",
                headers,
                body,
                query
            });
        });
    }
    /**
     * This method retrieves an invite by its ID. It sends a request to the
     * [Get Invite](https://docs.medusajs.com/api/admin#invites_getinvitesid)
     * API route.
     *
     * @param id - The invite's ID.
     * @param query - Configure the fields to retrieve in the invite.
     * @param headers - Headers to pass in the request
     * @returns The invite's details.
     *
     * @example
     * To retrieve an invite its ID:
     *
     * ```ts
     * sdk.admin.invite.retrieve("invite_123")
     * .then(({ invite }) => {
     *   console.log(invite)
     * })
     * ```
     *
     * To specify the fields and relations to retrieve:
     *
     * ```ts
     * sdk.admin.invite.retrieve("invite_123", {
     *   fields: "id,email"
     * })
     * .then(({ invite }) => {
     *   console.log(invite)
     * })
     * ```
     *
     * Learn more about the `fields` property in the [API reference](https://docs.medusajs.com/api/store#select-fields-and-relations).
     */ retrieve(id, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/invites/${id}`, {
                headers,
                query
            });
        });
    }
    /**
     * This method retrieves a paginated list of invites. It sends a request to the
     * [List Invites](https://docs.medusajs.com/api/admin#invites_getinvites)
     * API route.
     *
     * @param queryParams - Filters and pagination configurations.
     * @param headers - Headers to pass in the request.
     * @returns The paginated list of invites.
     *
     * @example
     * To retrieve the list of invites:
     *
     * ```ts
     * sdk.admin.invite.list()
     * .then(({ invites, count, limit, offset }) => {
     *   console.log(invites)
     * })
     * ```
     *
     * To configure the pagination, pass the `limit` and `offset` query parameters.
     *
     * For example, to retrieve only 10 items and skip 10 items:
     *
     * ```ts
     * sdk.admin.invite.list({
     *   limit: 10,
     *   offset: 10
     * })
     * .then(({ invites, count, limit, offset }) => {
     *   console.log(invites)
     * })
     * ```
     *
     * Using the `fields` query parameter, you can specify the fields and relations to retrieve
     * in each invite:
     *
     * ```ts
     * sdk.admin.invite.list({
     *   fields: "id,email"
     * })
     * .then(({ invites, count, limit, offset }) => {
     *   console.log(invites)
     * })
     * ```
     *
     * Learn more about the `fields` property in the [API reference](https://docs.medusajs.com/api/store#select-fields-and-relations).
     */ list(queryParams, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/invites`, {
                headers,
                query: queryParams
            });
        });
    }
    /**
     * This method refreshes the token of an invite. It sends a request to the
     * [Refresh Invite Token](https://docs.medusajs.com/api/admin#invites_postinvitesidresend)
     * API route.
     *
     * @param id - The invite's ID.
     * @param headers - Headers to pass in the request.
     * @returns The invite's details.
     *
     * @example
     * sdk.admin.invite.resend("invite_123")
     * .then(({ invite }) => {
     *   console.log(invite)
     * })
     */ resend(id, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/invites/${id}/resend`, {
                method: "POST",
                headers
            });
        });
    }
    /**
     * This method deletes an invite. It sends a request to the
     * [Delete Invite](https://docs.medusajs.com/api/admin#invites_deleteinvitesid)
     * API route.
     *
     * @param id - The invite's ID.
     * @param headers - Headers to pass in the request.
     * @returns The deletion's details.
     *
     * @example
     * sdk.admin.invite.delete("invite_123")
     * .then(({ deleted }) => {
     *   console.log(deleted)
     * })
     */ delete(id, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/invites/${id}`, {
                method: "DELETE",
                headers
            });
        });
    }
} //# sourceMappingURL=invite.js.map
}}),
"[project]/node_modules/@medusajs/js-sdk/dist/esm/admin/notification.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "Notification": (()=>Notification)
});
var __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
class Notification {
    /**
     * @ignore
     */ constructor(client){
        this.client = client;
    }
    /**
     * This method retrieves a notification's details. It sends a request to the
     * [Get Notification](https://docs.medusajs.com/api/admin#notifications_getnotificationsid)
     * API route.
     *
     * @param id - The notification's ID.
     * @param query - Configure the fields to retrieve in the notification.
     * @param headers - Headers to pass in the request
     * @returns The notification's details.
     *
     * @example
     * To retrieve a notification by its ID:
     *
     * ```ts
     * sdk.admin.notification.retrieve("notif_123")
     * .then(({ notification }) => {
     *   console.log(notification)
     * })
     * ```
     *
     * To specify the fields and relations to retrieve:
     *
     * ```ts
     * sdk.admin.notification.retrieve("notif_123", {
     *   fields: "id,to"
     * })
     * .then(({ notification }) => {
     *   console.log(notification)
     * })
     * ```
     *
     * Learn more about the `fields` property in the [API reference](https://docs.medusajs.com/api/store#select-fields-and-relations).
     */ retrieve(id, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/notifications/${id}`, {
                method: "GET",
                headers,
                query
            });
        });
    }
    /**
     * This method retrieves a paginated list of notifications. It sends a request to the
     * [List Notifications](https://docs.medusajs.com/api/admin#notifications_getnotifications)
     * API route.
     *
     * @param query - Filters and pagination configurations.
     * @param headers - Headers to pass in the request.
     * @returns The paginated list of notifications.
     *
     * @example
     * To retrieve the list of notifications:
     *
     * ```ts
     * sdk.admin.notification.list()
     * .then(({ notifications, count, limit, offset }) => {
     *   console.log(notifications)
     * })
     * ```
     *
     * To configure the pagination, pass the `limit` and `offset` query parameters.
     *
     * For example, to retrieve only 10 items and skip 10 items:
     *
     * ```ts
     * sdk.admin.notification.list({
     *   limit: 10,
     *   offset: 10
     * })
     * .then(({ notifications, count, limit, offset }) => {
     *   console.log(notifications)
     * })
     * ```
     *
     * Using the `fields` query parameter, you can specify the fields and relations to retrieve
     * in each notification:
     *
     * ```ts
     * sdk.admin.notification.list({
     *   fields: "id,to"
     * })
     * .then(({ notifications, count, limit, offset }) => {
     *   console.log(notifications)
     * })
     * ```
     *
     * Learn more about the `fields` property in the [API reference](https://docs.medusajs.com/api/store#select-fields-and-relations).
     */ list(query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/notifications`, {
                method: "GET",
                headers,
                query
            });
        });
    }
} //# sourceMappingURL=notification.js.map
}}),
"[project]/node_modules/@medusajs/js-sdk/dist/esm/admin/order.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "Order": (()=>Order)
});
var __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
class Order {
    /**
     * @ignore
     */ constructor(client){
        this.client = client;
    }
    /**
     * This method retrieves an order by its ID. It sends a request to the
     * [Get Order](https://docs.medusajs.com/api/admin#orders_getordersid)
     * API route.
     *
     * @param id - The order's ID.
     * @param query - Configure the fields to retrieve in the order.
     * @param headers - Headers to pass in the request
     * @returns The order's details.
     *
     * @example
     * To retrieve an order by its ID:
     *
     * ```ts
     * sdk.admin.order.retrieve("order_123")
     * .then(({ order }) => {
     *   console.log(order)
     * })
     * ```
     *
     * To specify the fields and relations to retrieve:
     *
     * ```ts
     * sdk.admin.order.retrieve("order_123", {
     *   fields: "id,*items"
     * })
     * .then(({ order }) => {
     *   console.log(order)
     * })
     * ```
     *
     * Learn more about the `fields` property in the [API reference](https://docs.medusajs.com/api/store#select-fields-and-relations).
     */ retrieve(id, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/orders/${id}`, {
                query,
                headers
            });
        });
    }
    /**
     * This method updates an order. It sends a request to the
     * [Update Order Email](https://docs.medusajs.com/api/admin#orders_postordersid)
     * API route.
     *
     * @param id - The order's ID.
     * @param body - The update details.
     * @param headers - Headers to pass in the request
     * @returns The order's details.
     *
     * @example
     * sdk.admin.order.update(
     *   "order_123",
     *   {
     *     email: "new_email@example.com",
     *     shipping_address: {
     *       first_name: "John",
     *       last_name: "Doe",
     *       address_1: "123 Main St",
     *     }
     *   }
     * )
     * .then(({ order }) => {
     *   console.log(order)
     * })
     */ update(id, body, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/orders/${id}`, {
                method: "POST",
                headers,
                body
            });
        });
    }
    /**
     * This method retrieves the preview of an order based on its last associated change. It sends a request to the
     * [Get Order Preview](https://docs.medusajs.com/api/admin#orders_getordersidpreview) API route.
     *
     * @param id - The order's ID.
     * @param query - Query parameters.
     * @param headers - Headers to pass in the request
     * @returns The order preview's details.
     *
     * @example
     * sdk.admin.order.retrievePreview("order_123")
     * .then(({ order }) => {
     *   console.log(order)
     * })
     */ retrievePreview(id, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/orders/${id}/preview`, {
                query,
                headers
            });
        });
    }
    /**
     * This method retrieves a paginated list of orders. It sends a request to the
     * [List Orders](https://docs.medusajs.com/api/admin#orders_getorders) API route.
     *
     * @param queryParams - Filters and pagination configurations.
     * @param headers - Headers to pass in the request.
     * @returns The paginated list of orders.
     *
     * @example
     * To retrieve the list of orders:
     *
     * ```ts
     * sdk.admin.order.list()
     * .then(({ orders, count, limit, offset }) => {
     *   console.log(orders)
     * })
     * ```
     *
     * To configure the pagination, pass the `limit` and `offset` query parameters.
     *
     * For example, to retrieve only 10 items and skip 10 items:
     *
     * ```ts
     * sdk.admin.order.list({
     *   limit: 10,
     *   offset: 10
     * })
     * .then(({ orders, count, limit, offset }) => {
     *   console.log(orders)
     * })
     * ```
     *
     * Using the `fields` query parameter, you can specify the fields and relations to retrieve
     * in each order:
     *
     * ```ts
     * sdk.admin.order.list({
     *   fields: "id,*items"
     * })
     * .then(({ orders, count, limit, offset }) => {
     *   console.log(orders)
     * })
     * ```
     *
     * Learn more about the `fields` property in the [API reference](https://docs.medusajs.com/api/store#select-fields-and-relations).
     */ list(queryParams, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/orders`, {
                query: queryParams,
                headers
            });
        });
    }
    /**
     * This method cancels an order. It sends a request to the
     * [Cancel Order](https://docs.medusajs.com/api/admin#orders_postordersidcancel)
     * API route.
     *
     * @param id - The order's ID.
     * @param headers - Headers to pass in the request.
     * @returns The order's details.
     *
     * @example
     * sdk.admin.order.cancel("order_123")
     * .then(({ order }) => {
     *   console.log(order)
     * })
     */ cancel(id, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/orders/${id}/cancel`, {
                method: "POST",
                headers
            });
        });
    }
    /**
     * This method requests an order transfer. It sends a request to the
     * [Request Order Transfer](https://docs.medusajs.com/api/admin#orders_postordersidrequesttransfer)
     * API route.
     *
     * @param id - The order's ID.
     * @param headers - Headers to pass in the request.
     * @param body - The transfer's details - the id of the next owner.
     * @returns The order's details.
     *
     * @example
     * sdk.admin.order.requestTransfer("order_123", {
     *   customer_id: "cus_123",
     *   internal_note: "Internal note",
     * })
     * .then(({ order }) => {
     *   console.log(order)
     * })
     */ requestTransfer(id, body, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/orders/${id}/transfer`, {
                method: "POST",
                headers,
                body
            });
        });
    }
    /**
     * This method cancels an order transfer request. It sends a request to the
     * [Cancel Order Transfer Request](https://docs.medusajs.com/api/admin#orders_postordersidcanceltransferrequest)
     * API route.
     *
     * @param id - The order's ID.
     * @param headers - Headers to pass in the request.
     * @returns The order's details.
     *
     * @example
     * sdk.admin.order.cancelTransfer("order_123")
     * .then(({ order }) => {
     *   console.log(order)
     * })
     */ cancelTransfer(id, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/orders/${id}/transfer/cancel`, {
                method: "POST",
                headers
            });
        });
    }
    /**
     * This method creates a fulfillment for an order. It sends a request to the
     * [Create Fulfillment](https://docs.medusajs.com/api/admin#orders_postordersidfulfillments)
     * API route.
     *
     * @param id - The order's ID.
     * @param body - The fulfillment's details.
     * @param query - Configure the fields to retrieve in the order.
     * @param headers - Headers to pass in the request
     * @returns The order's details.
     *
     * @example
     * sdk.admin.order.createFulfillment("order_123", {
     *   items: [
     *     {
     *       id: "orli_123",
     *       quantity: 1
     *     }
     *   ]
     * })
     * .then(({ order }) => {
     *   console.log(order)
     * })
     */ createFulfillment(id, body, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/orders/${id}/fulfillments`, {
                method: "POST",
                headers,
                body,
                query
            });
        });
    }
    /**
     * This method cancels an order's fulfillment. It sends a request to the
     * [Cancel Fulfillment](https://docs.medusajs.com/api/admin#orders_postordersidfulfillmentsfulfillment_idcancel)
     * API route.
     *
     * @param id - The order's ID.
     * @param fulfillmentId - The ID of the fulfillment to cancel.
     * @param body - The cancelation's details.
     * @param headers - Headers to pass in the request
     * @returns The order's details.
     *
     * @example
     * sdk.admin.order.cancelFulfillment(
     *   "order_123",
     *   "ful_123",
     *   {
     *     no_notification: false
     *   }
     * )
     * .then(({ order }) => {
     *   console.log(order)
     * })
     */ cancelFulfillment(id, fulfillmentId, body, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/orders/${id}/fulfillments/${fulfillmentId}/cancel`, {
                method: "POST",
                headers,
                body
            });
        });
    }
    /**
     * This method creates a shipment for an order's fulfillment. It sends a request to the
     * [Create Shipment](https://docs.medusajs.com/api/admin#orders_postordersidfulfillmentsfulfillment_idshipments)
     * API route.
     *
     * @param id - The order's ID.
     * @param fulfillmentId - The ID of the fulfillment.
     * @param body - The shipment's details.
     * @param query - Configure the fields to retrieve in the order.
     * @param headers - Headers to pass in the request
     * @returns The order's details.
     *
     * @example
     * sdk.admin.order.createShipment(
     *   "order_123",
     *   "ful_123",
     *   {
     *     items: [
     *       {
     *         id: "fulit_123",
     *         quantity: 1
     *       }
     *     ]
     *   }
     * )
     * .then(({ order }) => {
     *   console.log(order)
     * })
     */ createShipment(id, fulfillmentId, body, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/orders/${id}/fulfillments/${fulfillmentId}/shipments`, {
                method: "POST",
                headers,
                body,
                query
            });
        });
    }
    /**
     * This method marks an order's fulfillment as delivered. It sends a request to the
     * [Mark Delivered ](https://docs.medusajs.com/api/admin#orders_postordersidfulfillmentsfulfillment_idmarkasdelivered)
     * API route.
     *
     * @param id - The order's ID.
     * @param fulfillmentId - The fulfillment's ID.
     * @param query - Configure the fields to retrieve in the order.
     * @param headers - Headers to pass in the request
     * @returns The order's details.
     *
     * @example
     * sdk.admin.order.markAsDelivered(
     *   "order_123",
     *   "ful_123",
     * )
     * .then(({ order }) => {
     *   console.log(order)
     * })
     */ markAsDelivered(id, fulfillmentId, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/orders/${id}/fulfillments/${fulfillmentId}/mark-as-delivered`, {
                method: "POST",
                headers,
                query
            });
        });
    }
    /**
     * This method retrieves a list of changes made on an order, including returns, exchanges, etc...
     *
     * This method sends a request to the [List Changes](https://docs.medusajs.com/api/admin#orders_getordersidchanges)
     * API route.
     *
     * @param id - The order's ID.
     * @param queryParams - Configure the fields to retrieve in each order change.
     * @param headers - Headers to pass in the request
     * @returns The list of order changes.
     *
     * @example
     * sdk.admin.order.listChanges("order_123")
     * .then(({ order_changes }) => {
     *   console.log(order_changes)
     * })
     */ listChanges(id, queryParams, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/orders/${id}/changes`, {
                query: queryParams,
                headers
            });
        });
    }
    /**
     * This method retrieves the order's line items. It sends a request to the
     * [List Line Items](https://docs.medusajs.com/api/admin#orders_getordersidlineitems)
     * API routes.
     *
     * @param id - The order's ID.
     * @param queryParams - Configure the fields to retrieve in each line item.
     * @param headers - Headers to pass in the request
     * @returns The list of line items.
     *
     * @example
     * sdk.admin.order.listLineItems("order_123")
     * .then(({ order_items }) => {
     *   console.log(order_items)
     * })
     */ listLineItems(id, queryParams, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/orders/${id}/line-items`, {
                query: queryParams,
                headers
            });
        });
    }
} //# sourceMappingURL=order.js.map
}}),
"[project]/node_modules/@medusajs/js-sdk/dist/esm/admin/order-edit.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "OrderEdit": (()=>OrderEdit)
});
var __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
class OrderEdit {
    /**
     * @ignore
     */ constructor(client){
        this.client = client;
    }
    /**
     * This method creates an order edit request. It sends a HTTP request to the
     * [Create Order Edit](https://docs.medusajs.com/api/admin#order-edits_postorderedits)
     * API route.
     *
     * @param body - The order edit's details.
     * @param query - Configure the fields to retrieve in the order edit.
     * @param headers - Headers to pass in the request.
     * @returns The order edit's details.
     *
     * @example
     * sdk.admin.orderEdit.initiateRequest({
     *   order_id: "order_123"
     * })
     * .then(({ order_change }) => {
     *   console.log(order_change)
     * })
     */ initiateRequest(body, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/order-edits`, {
                method: "POST",
                headers,
                body,
                query
            });
        });
    }
    /**
     * This method changes an order edit to requested. It sends a request to the
     * [Request Order Edit](https://docs.medusajs.com/api/admin#order-edits_postordereditsidrequest)
     * API route.
     *
     * @param id - The order edit's ID.
     * @param query - Configure the fields to retrieve in the order preview.
     * @param headers - Headers to pass in the request.
     * @returns The order preview's details.
     *
     * @example
     * sdk.admin.orderEdit.request("ordch_123")
     * .then(({ order_preview }) => {
     *   console.log(order_preview)
     * })
     */ request(id, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/order-edits/${id}/request`, {
                method: "POST",
                headers,
                query
            });
        });
    }
    /**
     * This method confirms an order edit and applies it on the order. It sends a request
     * to the [Confirm Order Edit](https://docs.medusajs.com/api/admin#order-edits_postordereditsidconfirm)
     * API route.
     *
     * @param id - The order edit's ID.
     * @param query - Configure the fields to retrieve in the order preview.
     * @param headers - Headers to pass in the request.
     * @returns The order preview's details.
     *
     * @example
     * sdk.admin.orderEdit.confirm("ordch_123")
     * .then(({ order_preview }) => {
     *   console.log(order_preview)
     * })
     */ confirm(id, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/order-edits/${id}/confirm`, {
                method: "POST",
                headers,
                query
            });
        });
    }
    /**
     * This method cancels a requested order edit. It sends a request to the
     * [Cancel Order Edit](https://docs.medusajs.com/api/admin#order-edits_deleteordereditsid)
     * API route.
     *
     * @param id - The order edit's ID.
     * @param query - Query parameters
     * @param headers - Headers to pass in the request.
     * @returns The deletion's details.
     *
     * @example
     * sdk.admin.orderEdit.cancelRequest("ordch_123")
     * .then(({ deleted }) => {
     *   console.log(deleted)
     * })
     */ cancelRequest(id, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/order-edits/${id}`, {
                method: "DELETE",
                headers,
                query
            });
        });
    }
    /**
     * This method adds items to an order edit. These items will have the action `ITEM_ADD`.
     *
     * The method sends a request to the [Add Items](https://docs.medusajs.com/api/admin#order-edits_postordereditsiditems)
     * API route.
     *
     * @param id - The order edit's ID.
     * @param body - The items to add.
     * @param query - Configure the fields to retrieve in the order preview.
     * @param headers - Headers to pass in the request.
     * @returns The order preview's details.
     *
     * @example
     * sdk.admin.orderEdit.addItems("ordch_123", {
     *   items: [
     *     {
     *       variant_id: "variant_123",
     *       quantity: 1
     *     }
     *   ]
     * })
     * .then(({ order_preview }) => {
     *   console.log(order_preview)
     * })
     */ addItems(id, body, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/order-edits/${id}/items`, {
                method: "POST",
                headers,
                body,
                query
            });
        });
    }
    /**
     * This method updates the quantity and other details of an item in an order. It sends a request to the
     * [Update Item Quantity](https://docs.medusajs.com/api/admin#order-edits_postordereditsiditemsitemitem_id)
     * API route.
     *
     * @param id - The order edit's ID.
     * @param itemId - The item's ID in the order.
     * @param body - The data to edit in the item.
     * @param query - Configure the fields to retrieve in the order preview.
     * @param headers - Headers to pass in the request.
     * @returns The order preview's details.
     *
     * @example
     * sdk.admin.orderEdit.updateOriginalItem(
     *   "ordch_123",
     *   "orli_123",
     *   {
     *     quantity: 1
     *   }
     * )
     * .then(({ order_preview }) => {
     *   console.log(order_preview)
     * })
     */ updateOriginalItem(id, itemId, body, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/order-edits/${id}/items/item/${itemId}`, {
                method: "POST",
                headers,
                body,
                query
            });
        });
    }
    /**
     * This method updates an added item in the order edit by the ID of the item's `ITEM_ADD` action.
     *
     * Every item has an `actions` property, whose value is an array of actions.
     * You can check the action's name using its `action` property, and use the value of the `id` property.
     *
     * It sends a request
     * to the [Update Item](https://docs.medusajs.com/api/admin#order-edits_postordereditsiditemsaction_id)
     * API route.
     *
     * @param id - The order edit's ID.
     * @param actionId - The id of the new item's `ITEM_ADD` action.
     * @param body - The data to update.
     * @param query - Configure the fields to retrieve in the order preview.
     * @param headers - Headers to pass in the request.
     * @returns The order preview's details.
     *
     * @example
     * sdk.admin.orderEdit.updateAddedItem(
     *   "ordch_123",
     *   "orli_123",
     *   {
     *     quantity: 1
     *   }
     * )
     * .then(({ order_preview }) => {
     *   console.log(order_preview)
     * })
     */ updateAddedItem(id, actionId, body, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/order-edits/${id}/items/${actionId}`, {
                method: "POST",
                headers,
                body,
                query
            });
        });
    }
    /**
     * This method removes an added item in the order edit by the ID of the item's `ITEM_ADD` action.
     *
     * Every item has an `actions` property, whose value is an array of actions.
     * You can check the action's name using its `action` property, and use the value of the `id` property.
     *
     * @param id - The order edit's ID.
     * @param actionId - The id of the new item's `ITEM_ADD` action.
     * @param query - Configure the fields to retrieve in the order preview.
     * @param headers - Headers to pass in the request.
     * @returns The order preview's details.
     *
     * @example
     * sdk.admin.orderEdit.removeAddedItem(
     *   "ordch_123",
     *   "orli_123",
     * )
     * .then(({ order_preview }) => {
     *   console.log(order_preview)
     * })
     */ removeAddedItem(id, actionId, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/order-edits/${id}/items/${actionId}`, {
                method: "DELETE",
                headers,
                query
            });
        });
    }
} //# sourceMappingURL=order-edit.js.map
}}),
"[project]/node_modules/@medusajs/js-sdk/dist/esm/admin/payment.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "Payment": (()=>Payment)
});
var __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
class Payment {
    /**
     * @ignore
     */ constructor(client){
        this.client = client;
    }
    /**
     * This method retrieves a paginated list of payments. It sends a request to the
     * [List Payments](https://docs.medusajs.com/api/admin#payments_getpayments) API route.
     *
     * @param query  - Filters and pagination configurations.
     * @param headers - Headers to pass in the request.
     * @returns The paginated list of payments.
     *
     * @example
     * To retrieve the list of payments:
     *
     * ```ts
     * sdk.admin.payment.list()
     * .then(({ payments, count, limit, offset }) => {
     *   console.log(payments)
     * })
     * ```
     *
     * To configure the pagination, pass the `limit` and `offset` query parameters.
     *
     * For example, to retrieve only 10 items and skip 10 items:
     *
     * ```ts
     * sdk.admin.payment.list({
     *   limit: 10,
     *   offset: 10
     * })
     * .then(({ payments, count, limit, offset }) => {
     *   console.log(payments)
     * })
     * ```
     *
     * Using the `fields` query parameter, you can specify the fields and relations to retrieve
     * in each payment:
     *
     * ```ts
     * sdk.admin.payment.list({
     *   fields: "id,*payment_collection"
     * })
     * .then(({ payments, count, limit, offset }) => {
     *   console.log(payments)
     * })
     * ```
     *
     * Learn more about the `fields` property in the [API reference](https://docs.medusajs.com/api/store#select-fields-and-relations).
     */ list(query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/payments`, {
                query,
                headers
            });
        });
    }
    /**
     * This method retrieves a paginated list of payment providers. It sends a request to the
     * [List Payment Providers](https://docs.medusajs.com/api/admin#payments_getpaymentspaymentproviders) API route.
     *
     * @param query - Filters and pagination configurations.
     * @param headers - Headers to pass in the request.
     * @returns The paginated list of payment providers.
     *
     * @example
     * To retrieve the list of payment providers:
     *
     * ```ts
     * sdk.admin.payment.listPaymentProviders()
     * .then(({ payment_providers, count, limit, offset }) => {
     *   console.log(payment_providers)
     * })
     * ```
     *
     * To configure the pagination, pass the `limit` and `offset` query parameters.
     *
     * For example, to retrieve only 10 items and skip 10 items:
     *
     * ```ts
     * sdk.admin.payment.listPaymentProviders({
     *   limit: 10,
     *   offset: 10
     * })
     * .then(({ payment_providers, count, limit, offset }) => {
     *   console.log(payment_providers)
     * })
     * ```
     *
     * Using the `fields` query parameter, you can specify the fields and relations to retrieve
     * in each payment provider:
     *
     * ```ts
     * sdk.admin.payment.listPaymentProviders({
     *   fields: "id,is_enabled"
     * })
     * .then(({ payment_providers, count, limit, offset }) => {
     *   console.log(payment_providers)
     * })
     * ```
     *
     * Learn more about the `fields` property in the [API reference](https://docs.medusajs.com/api/store#select-fields-and-relations).
     */ listPaymentProviders(query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/payments/payment-providers`, {
                query,
                headers
            });
        });
    }
    /**
     * This method retrieves a payment's details. It sends a request to the
     * [Get Payment](https://docs.medusajs.com/api/admin#payments_getpaymentsid)
     * API route.
     *
     * @param id - The payment's ID.
     * @param query - Configure the fields to retrieve in the payment.
     * @param headers - Headers to pass in the request
     * @returns The payment's details.
     *
     * @example
     * To retrieve a payment by its ID:
     *
     * ```ts
     * sdk.admin.payment.retrieve("pay_123")
     * .then(({ payment }) => {
     *   console.log(payment)
     * })
     * ```
     *
     * To specify the fields and relations to retrieve:
     *
     * ```ts
     * sdk.admin.payment.retrieve("pay_123", {
     *   fields: "id,*payment_collection"
     * })
     * .then(({ payment }) => {
     *   console.log(payment)
     * })
     * ```
     *
     * Learn more about the `fields` property in the [API reference](https://docs.medusajs.com/api/store#select-fields-and-relations).
     */ retrieve(id, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/payments/${id}`, {
                query,
                headers
            });
        });
    }
    /**
     * This method captures a payment. It sends a request to the
     * [Capture Payment](https://docs.medusajs.com/api/admin#payments_postpaymentsidcapture) API route.
     *
     * The API route uses the `capturePayment` method of the payment provider associated with the payment's collection.
     *
     * @param id - The payment's ID.
     * @param body - The capture's details.
     * @param query - Configure the fields to retrieve in the payment.
     * @param headers - Headers to pass in the request
     * @returns The payment's details.
     *
     * @example
     * sdk.admin.payment.capture("paycol_123", {})
     * .then(({ payment }) => {
     *   console.log(payment)
     * })
     */ capture(id, body, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/payments/${id}/capture`, {
                method: "POST",
                headers,
                body,
                query
            });
        });
    }
    /**
     * This method refunds a payment. It sends a request to the
     * [Refund Payment](https://docs.medusajs.com/api/admin#payments_postpaymentsidrefund) API route.
     *
     * The API route uses the `refundPayment` method of the payment provider associated with the payment's collection.
     *
     * @param id - The payment's ID.
     * @param body - The refund's details.
     * @param query - Configure the fields to retrieve in the payment.
     * @param headers - Headers to pass in the request
     * @returns The payment's details.
     *
     * @example
     * sdk.admin.payment.refund("paycol_123", {})
     * .then(({ payment }) => {
     *   console.log(payment)
     * })
     */ refund(id, body, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/payments/${id}/refund`, {
                method: "POST",
                headers,
                body,
                query
            });
        });
    }
} //# sourceMappingURL=payment.js.map
}}),
"[project]/node_modules/@medusajs/js-sdk/dist/esm/admin/payment-collection.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "PaymentCollection": (()=>PaymentCollection)
});
var __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
class PaymentCollection {
    /**
     * @ignore
     */ constructor(client){
        this.client = client;
    }
    /**
     * This method creates a payment collection. It sends a request to the
     * [Create Payment Collection](https://docs.medusajs.com/api/admin#payment-collections_postpaymentcollections)
     * API route.
     *
     * @param body - The details of the payment collection to create.
     * @param query - Configure the fields to retrieve in the payment collection.
     * @param headers - Headers to pass in the request
     * @returns The payment collection's details.
     *
     * @example
     * sdk.admin.paymentCollection.create({
     *   order_id: "order_123"
     * })
     * .then(({ payment_collection }) => {
     *   console.log(payment_collection)
     * })
     */ create(body, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/payment-collections`, {
                method: "POST",
                headers,
                body,
                query
            });
        });
    }
    /**
     * This method deletes a payment collection. It sends a request to the
     * [Delete Payment Collection](https://docs.medusajs.com/api/admin#payment-collections_deletepaymentcollectionsid)
     * API route.
     *
     * @param id - The payment collection's ID.
     * @param headers - Headers to pass in the request
     * @returns The deletion's details.
     *
     * @example
     * sdk.admin.paymentCollection.delete("paycol_123")
     * .then(({ deleted }) => {
     *   console.log(deleted)
     * })
     */ delete(id, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/payment-collections/${id}`, {
                method: "DELETE",
                headers
            });
        });
    }
    /**
     * This method marks a payment collection as paid. It sends a request to the
     * [Mark as Paid](https://docs.medusajs.com/api/admin#payment-collections_postpaymentcollectionsidmarkaspaid)
     * API route.
     *
     * The API route creates and authorizes a payment session, then capture its payment,
     * using the manual payment provider.
     *
     * @param id - The payment collection to mark as paid.
     * @param body - The details to mark the payment collection as paid.
     * @param query - Configure the fields to retrieve in the payment collection.
     * @param headers - Headers to pass in the request.
     * @returns The payment collection's details.
     *
     * @example
     * sdk.admin.paymentCollection.markAsPaid("paycol_123", {
     *   order_id: "order_123"
     * })
     * .then(({ payment_collection }) => {
     *   console.log(payment_collection)
     * })
     */ markAsPaid(id, body, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/payment-collections/${id}/mark-as-paid`, {
                method: "POST",
                headers,
                body,
                query
            });
        });
    }
} //# sourceMappingURL=payment-collection.js.map
}}),
"[project]/node_modules/@medusajs/js-sdk/dist/esm/admin/price-list.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "PriceList": (()=>PriceList)
});
var __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
class PriceList {
    /**
     * @ignore
     */ constructor(client){
        this.client = client;
    }
    /**
     * This method retrieves a price list. It sends a request to the
     * [Get Price List](https://docs.medusajs.com/v2/api/admin#price-lists_getpricelistsid)
     * API route.
     *
     * @param id - The price list's ID.
     * @param query - Configure the fields to retrieve in the price list.
     * @param headers - Headers to pass in the request
     * @returns The price list's details.
     *
     * @example
     * To retrieve a price list by its ID:
     *
     * ```ts
     * sdk.admin.priceList.retrieve("plist_123")
     * .then(({ price_list }) => {
     *   console.log(price_list)
     * })
     * ```
     *
     * To specify the fields and relations to retrieve:
     *
     * ```ts
     * sdk.admin.priceList.retrieve("plist_123", {
     *   fields: "id,*prices"
     * })
     * .then(({ price_list }) => {
     *   console.log(price_list)
     * })
     * ```
     *
     * Learn more about the `fields` property in the [API reference](https://docs.medusajs.com/v2/api/store#select-fields-and-relations).
     */ retrieve(id, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return this.client.fetch(`/admin/price-lists/${id}`, {
                method: "GET",
                headers,
                query
            });
        });
    }
    /**
     * This method retrieves a paginated list of price lists. It sends a request to the
     * [List Price Lists](https://docs.medusajs.com/v2/api/admin#price-lists_getpricelists) API route.
     *
     * @param query - Filters and pagination configurations.
     * @param headers - Headers to pass in the request.
     * @returns The paginated list of price lists.
     *
     * @example
     * To retrieve the list of price lists:
     *
     * ```ts
     * sdk.admin.priceList.list()
     * .then(({ price_lists, count, limit, offset }) => {
     *   console.log(price_lists)
     * })
     * ```
     *
     * To configure the pagination, pass the `limit` and `offset` query parameters.
     *
     * For example, to retrieve only 10 items and skip 10 items:
     *
     * ```ts
     * sdk.admin.priceList.list({
     *   limit: 10,
     *   offset: 10
     * })
     * .then(({ price_lists, count, limit, offset }) => {
     *   console.log(price_lists)
     * })
     * ```
     *
     * Using the `fields` query parameter, you can specify the fields and relations to retrieve
     * in each price list:
     *
     * ```ts
     * sdk.admin.priceList.list({
     *   fields: "id,*prices"
     * })
     * .then(({ price_lists, count, limit, offset }) => {
     *   console.log(price_lists)
     * })
     * ```
     *
     * Learn more about the `fields` property in the [API reference](https://docs.medusajs.com/v2/api/store#select-fields-and-relations).
     */ list(query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return this.client.fetch(`/admin/price-lists`, {
                method: "GET",
                headers,
                query
            });
        });
    }
    /**
     * This method creates a price list. It sends a request to the
     * [Create Price List](https://docs.medusajs.com/v2/api/admin#price-lists_postpricelists)
     * API route.
     *
     * @param body - The details of the price list to create.
     * @param query - Configure the fields to retrieve in the price list.
     * @param headers - Headers to pass in the request
     * @returns The price list's details.
     *
     * @example
     * sdk.admin.priceList.create({
     *   title: "My Price List",
     *   status: "active",
     *   type: "sale",
     *   prices: [
     *     {
     *       variant_id: "variant_123",
     *       amount: 10,
     *       currency_code: "usd",
     *       rules: {
     *         region_id: "reg_123"
     *       }
     *     }
     *   ]
     * })
     * .then(({ price_list }) => {
     *   console.log(price_list)
     * })
     */ create(body, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return this.client.fetch(`/admin/price-lists`, {
                method: "POST",
                headers,
                body,
                query
            });
        });
    }
    /**
     * This method updates a price list. It sends a request to the
     * [Update Price List](https://docs.medusajs.com/v2/api/admin#price-lists_postpricelistsid)
     * API route.
     *
     * @param id - The price list's ID.
     * @param body - The data to update in the price list.
     * @param query - Configure the fields to retrieve in the price list.
     * @param headers - Headers to pass in the request
     * @returns The price list's details.
     *
     * @example
     * sdk.admin.priceList.update("plist_123", {
     *   title: "My Price List",
     * })
     * .then(({ price_list }) => {
     *   console.log(price_list)
     * })
     */ update(id, body, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return this.client.fetch(`/admin/price-lists/${id}`, {
                method: "POST",
                headers,
                body,
                query
            });
        });
    }
    /**
     * This method deletes a price list. It sends a request to the
     * [Delete Price List](https://docs.medusajs.com/v2/api/admin#price-lists_deletepricelistsid)
     * API route.
     *
     * @param id - The price list's ID.
     * @param headers - Headers to pass in the request
     * @returns The deletion's details.
     *
     * @example
     * sdk.admin.priceList.delete("plist_123")
     * .then(({ deleted }) => {
     *   console.log(deleted)
     * })
     */ delete(id, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return this.client.fetch(`/admin/price-lists/${id}`, {
                method: "DELETE",
                headers
            });
        });
    }
    /**
     * This method manages the prices of a price list to create, update, or delete them.
     * It sends a request to the [Manage Prices](https://docs.medusajs.com/v2/api/admin#price-lists_postpricelistsidpricesbatch)
     * API route.
     *
     * @param id - The price list's ID.
     * @param body - The prices to create, update, or delete.
     * @param query - Configure the fields to retrieve in the price list.
     * @param headers - Headers to pass in the request
     * @returns The price list's details.
     *
     * @example
     * sdk.admin.priceList.batchPrices("plist_123", {
     *   create: [{
     *     variant_id: "variant_123",
     *     currency_code: "usd",
     *     amount: 10,
     *     rules: {
     *       region_id: "reg_123"
     *     }
     *   }],
     *   update: [{
     *     id: "price_123",
     *     variant_id: "variant_123",
     *     amount: 20,
     *   }],
     *   delete: ["price_123"]
     * })
     * .then(({ created, updated, deleted }) => {
     *   console.log(created, updated, deleted)
     * })
     */ batchPrices(id, body, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return this.client.fetch(`/admin/price-lists/${id}/prices/batch`, {
                method: "POST",
                headers,
                body,
                query
            });
        });
    }
    /**
     * This method removes products from a price list. It sends a request to the
     * [Remove Product](https://docs.medusajs.com/v2/api/admin#price-lists_postpricelistsidproducts)
     * API route.
     *
     * @param id - The price list's ID.
     * @param body - The details of the products to remove.
     * @param query - Configure the fields to retrieve in the price list.
     * @param headers - Headers to pass in the request
     * @returns The price list's details.
     *
     * @example
     * sdk.admin.priceList.linkProducts("plist_123", {
     *   remove: ["prod_123"]
     * })
     * .then(({ price_list }) => {
     *   console.log(price_list)
     * })
     */ linkProducts(id, body, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return this.client.fetch(`/admin/price-lists/${id}/products`, {
                method: "POST",
                headers,
                body,
                query
            });
        });
    }
} //# sourceMappingURL=price-list.js.map
}}),
"[project]/node_modules/@medusajs/js-sdk/dist/esm/admin/price-preference.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "PricePreference": (()=>PricePreference)
});
var __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
class PricePreference {
    /**
     * @ignore
     */ constructor(client){
        this.client = client;
    }
    /**
     * This method retrieves a price preference. It sends a request to the
     * [Get Price Preference](https://docs.medusajs.com/api/admin#price-preferences_getpricepreferencesid)
     * API route.
     *
     * @param id - The price preference's ID.
     * @param query - Configure the fields to retrieve in the price preference.
     * @param headers - Headers to pass in the request
     * @returns The price preference's details.
     *
     * @example
     * To retrieve a price preference by its ID:
     *
     * ```ts
     * sdk.admin.pricePreference.retrieve("prpref_123")
     * .then(({ price_preference }) => {
     *   console.log(price_preference)
     * })
     * ```
     *
     * To specify the fields and relations to retrieve:
     *
     * ```ts
     * sdk.admin.pricePreference.retrieve("prpref_123", {
     *   fields: "id,is_tax_inclusive"
     * })
     * .then(({ price_preference }) => {
     *   console.log(price_preference)
     * })
     * ```
     *
     * Learn more about the `fields` property in the [API reference](https://docs.medusajs.com/api/store#select-fields-and-relations).
     */ retrieve(id, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return this.client.fetch(`/admin/price-preferences/${id}`, {
                method: "GET",
                headers,
                query
            });
        });
    }
    /**
     * This method retrieves a paginated list of price preferences. It sends a request to the
     * [List Price Preferences](https://docs.medusajs.com/api/admin#price-preferences_getpricepreferences) API route.
     *
     * @param query - Filters and pagination configurations.
     * @param headers - Headers to pass in the request.
     * @returns The paginated list of price preferences.
     *
     * @example
     * To retrieve the list of price preferences:
     *
     * ```ts
     * sdk.admin.pricePreference.list()
     * .then(({ price_preferences, count, limit, offset }) => {
     *   console.log(price_preferences)
     * })
     * ```
     *
     * To configure the pagination, pass the `limit` and `offset` query parameters.
     *
     * For example, to retrieve only 10 items and skip 10 items:
     *
     * ```ts
     * sdk.admin.pricePreference.list({
     *   limit: 10,
     *   offset: 10
     * })
     * .then(({ price_preferences, count, limit, offset }) => {
     *   console.log(price_preferences)
     * })
     * ```
     *
     * Using the `fields` query parameter, you can specify the fields and relations to retrieve
     * in each price preference:
     *
     * ```ts
     * sdk.admin.pricePreference.list({
     *   fields: "id,is_tax_inclusive"
     * })
     * .then(({ price_preferences, count, limit, offset }) => {
     *   console.log(price_preferences)
     * })
     * ```
     *
     * Learn more about the `fields` property in the [API reference](https://docs.medusajs.com/api/store#select-fields-and-relations).
     */ list(query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return this.client.fetch(`/admin/price-preferences`, {
                method: "GET",
                headers,
                query
            });
        });
    }
    /**
     * This method creates a price preference. It sends a request to the
     * [Create Price Preference](https://docs.medusajs.com/api/admin#price-preferences_postpricepreferences)
     * API route.
     *
     * @param body - The details of the price preference to create.
     * @param query - Configure the fields to retrieve in the price preference.
     * @param headers - Headers to pass in the request
     * @returns The price preference's details.
     *
     * @example
     * sdk.admin.pricePreference.create({
     *   attribute: "region_id",
     *   value: "region_123",
     *   is_tax_inclusive: true
     * })
     * .then(({ price_preference }) => {
     *   console.log(price_preference)
     * })
     */ create(body, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return this.client.fetch(`/admin/price-preferences`, {
                method: "POST",
                headers,
                body,
                query
            });
        });
    }
    /**
     * This method updates a price preference. It sends a request to the
     * [Update Price Preference](https://docs.medusajs.com/api/admin#price-preferences_postpricepreferencesid)
     * API route.
     *
     * @param id - The price preference's ID.
     * @param body - The data to update in the price preference.
     * @param query - Configure the fields to retrieve in the price preference.
     * @param headers - Headers to pass in the request
     * @returns The price preference's details.
     *
     * @example
     * sdk.admin.pricePreference.update("prpref_123", {
     *   is_tax_inclusive: true
     * })
     * .then(({ price_preference }) => {
     *   console.log(price_preference)
     * })
     */ update(id, body, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return this.client.fetch(`/admin/price-preferences/${id}`, {
                method: "POST",
                headers,
                body,
                query
            });
        });
    }
    /**
     * This method deletes a price preference. It sends a request to the
     * [Delete Price Preference](https://docs.medusajs.com/api/admin#price-preferences_deletepricepreferencesid)
     * API route.
     *
     * @param id - The price preference's ID.
     * @param headers - Headers to pass in the request
     * @returns The deletion's details.
     *
     * @example
     * sdk.admin.pricePreference.delete("prpref_123")
     * .then(({ deleted }) => {
     *   console.log(deleted)
     * })
     */ delete(id, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return this.client.fetch(`/admin/price-preferences/${id}`, {
                method: "DELETE",
                headers
            });
        });
    }
} //# sourceMappingURL=price-preference.js.map
}}),
"[project]/node_modules/@medusajs/js-sdk/dist/esm/admin/product.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "Product": (()=>Product)
});
var __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
class Product {
    /**
     * @ignore
     */ constructor(client){
        this.client = client;
    }
    /**
     * This method creates a product import. The products are only imported after
     * the import is confirmed using the {@link confirmImport} method.
     *
     * This method sends a request to the
     * [Create Product Import](https://docs.medusajs.com/api/admin#products_postproductsimport)
     * API route.
     *
     * @param body - The import's details.
     * @param query - Query parameters to pass to the request.
     * @param headers - Headers to pass in the request.
     * @returns The import's details.
     *
     * @example
     * sdk.admin.product.import({
     *   file // uploaded File instance
     * })
     * .then(({ transaction_id }) => {
     *   console.log(transaction_id)
     * })
     */ import(body, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            const form = new FormData();
            form.append("file", body.file);
            return yield this.client.fetch(`/admin/products/import`, {
                method: "POST",
                headers: Object.assign(Object.assign({}, headers), {
                    // Let the browser determine the content type.
                    "content-type": null
                }),
                body: form,
                query
            });
        });
    }
    /**
     * This method confirms a product import created using the method {@link import}.
     * It sends a request to the
     * [Confirm Product Import](https://docs.medusajs.com/api/admin#products_postproductsimporttransaction_idconfirm)
     * API route.
     *
     * @param transactionId - The ID of the transaction of the created product import. This is returned
     * by the API route used to create the product import.
     * @param query - Query parameters to pass in the request.
     * @param headers - Headers to pass in the request.
     *
     * @example
     * sdk.admin.product.confirmImport("transaction_123")
     * .then(() => {
     *   console.log("Import confirmed")
     * })
     */ confirmImport(transactionId, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/products/import/${transactionId}/confirm`, {
                method: "POST",
                headers,
                body: {},
                query
            });
        });
    }
    /**
     * This method starts a product export process to retrieve a CSV of exported products.
     *
     * You'll receive in the response the transaction ID of the workflow generating the CSV file.
     * To check the status of the execution, send a `GET` request to
     * `/admin/workflows-executions/export-products/:transaction-id`.
     *
     * Once the execution finishes successfully, a notification is created for the export.
     * You can retrieve the notifications using the `/admin/notification` API route to
     * retrieve the file's download URL.
     *
     * This method sends a request to the [Export Product](https://docs.medusajs.com/api/admin#products_postproductsexport)
     * API route.
     *
     * @param body - The export's details.
     * @param query - Filters to specify which products to export.
     * @param headers - Headers to pass in the request.
     * @returns The export's details.
     *
     * @example
     * sdk.admin.product.export({})
     * .then(({ transaction_id }) => {
     *   console.log(transaction_id)
     * })
     */ export(body, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/products/export`, {
                method: "POST",
                headers,
                body,
                query
            });
        });
    }
    /**
     * This method manages products to create, update, or delete them. It sends a request to the
     * [Manage Products](https://docs.medusajs.com/api/admin#products_postproductsbatch)
     * API route.
     *
     * @param body - The products to create, update, or delete.
     * @param query - Configure the fields to retrieve in the products.
     * @param headers - Headers to pass in the request
     * @returns The batch operations details.
     *
     * @example
     * sdk.admin.product.batch({
     *   create: [
     *     {
     *       title: "Shirt",
     *       options: [{
     *         title: "Default",
     *         values: ["Default Option"]
     *       }],
     *       variants: [
     *         {
     *           title: "Default",
     *           options: {
     *             Default: "Default Option"
     *           },
     *           prices: []
     *         }
     *       ]
     *     }
     *   ],
     *   update: [{
     *     id: "prod_123",
     *     title: "Pants"
     *   }],
     *   delete: ["prod_321"]
     * })
     * .then(({ created, updated, deleted }) => {
     *   console.log(created, updated, deleted)
     * })
     */ batch(body, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/products/batch`, {
                method: "POST",
                headers,
                body,
                query
            });
        });
    }
    /**
     * This method creates a product. It sends a request to the
     * [Create Product](https://docs.medusajs.com/api/admin#products_postproducts)
     * API route.
     *
     * @param body - The product's details.
     * @param query - Configure the fields to retrieve in the product.
     * @param headers - Headers to pass in the request
     * @returns The product's details.
     *
     * @example
     * sdk.admin.product.create({
     *   title: "Shirt",
     *   options: [{
     *     title: "Default",
     *     values: ["Default Option"]
     *   }],
     *   variants: [
     *     {
     *       title: "Default",
     *       options: {
     *         Default: "Default Option"
     *       },
     *       prices: []
     *     }
     *   ]
     * })
     * .then(({ product }) => {
     *   console.log(product)
     * })
     */ create(body, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/products`, {
                method: "POST",
                headers,
                body,
                query
            });
        });
    }
    /**
     * This method updates a product. It sends a request to the
     * [Update Product](https://docs.medusajs.com/api/admin#products_postproductsid)
     * API route.
     *
     * @param id - The product's ID.
     * @param body - The data to update in the product.
     * @param query - Configure the fields to retrieve in the product.
     * @param headers - Headers to pass in the request
     * @returns The product's details.
     *
     * @example
     * sdk.admin.product.update("prod_123", {
     *   title: "Shirt",
     * })
     * .then(({ product }) => {
     *   console.log(product)
     * })
     */ update(id, body, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/products/${id}`, {
                method: "POST",
                headers,
                body,
                query
            });
        });
    }
    /**
     * This method retrieves a paginated list of products. It sends a request to the
     * [List Products](https://docs.medusajs.com/api/admin#products_getproducts) API route.
     *
     * @param query - Filters and pagination configurations.
     * @param headers - Headers to pass in the request.
     * @returns The paginated list of products.
     *
     * @example
     * To retrieve the list of products:
     *
     * ```ts
     * sdk.admin.product.list()
     * .then(({ products, count, limit, offset }) => {
     *   console.log(products)
     * })
     * ```
     *
     * To configure the pagination, pass the `limit` and `offset` query parameters.
     *
     * For example, to retrieve only 10 items and skip 10 items:
     *
     * ```ts
     * sdk.admin.product.list({
     *   limit: 10,
     *   offset: 10
     * })
     * .then(({ products, count, limit, offset }) => {
     *   console.log(products)
     * })
     * ```
     *
     * Using the `fields` query parameter, you can specify the fields and relations to retrieve
     * in each products:
     *
     * ```ts
     * sdk.admin.product.list({
     *   fields: "id,*variants"
     * })
     * .then(({ products, count, limit, offset }) => {
     *   console.log(products)
     * })
     * ```
     *
     * Learn more about the `fields` property in the [API reference](https://docs.medusajs.com/api/store#select-fields-and-relations).
     */ list(queryParams, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/products`, {
                headers,
                query: queryParams
            });
        });
    }
    /**
     * This method retrieves a product by its ID. It sends a request to the
     * [Get Product](https://docs.medusajs.com/api/admin#products_getproductsid)
     * API route.
     *
     * @param id - The product's ID.
     * @param query - Configure the fields to retrieve in the product.
     * @param headers - Headers to pass in the request
     * @returns The product's details.
     *
     * @example
     * To retrieve a product by its ID:
     *
     * ```ts
     * sdk.admin.product.retrieve("prod_123")
     * .then(({ product }) => {
     *   console.log(product)
     * })
     * ```
     *
     * To specify the fields and relations to retrieve:
     *
     * ```ts
     * sdk.admin.product.retrieve("prod_123", {
     *   fields: "id,*variants"
     * })
     * .then(({ product }) => {
     *   console.log(product)
     * })
     * ```
     *
     * Learn more about the `fields` property in the [API reference](https://docs.medusajs.com/api/store#select-fields-and-relations).
     */ retrieve(id, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/products/${id}`, {
                query,
                headers
            });
        });
    }
    /**
     * This method deletes a product. It sends a request to the
     * [Delete Product](https://docs.medusajs.com/api/admin#products_deleteproductsid)
     * API route.
     *
     * @param id - The product's ID.
     * @param headers - Headers to pass in the request
     * @returns The deletion's details.
     *
     * @example
     * sdk.admin.product.delete("prod_123")
     * .then(({ deleted }) => {
     *   console.log(deleted)
     * })
     */ delete(id, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/products/${id}`, {
                method: "DELETE",
                headers
            });
        });
    }
    /**
     * This method manages the variants of a product. It sends a request to the
     * [Manage Variants](https://docs.medusajs.com/api/admin#products_postproductsidvariantsbatch)
     * API route.
     *
     * @param productId - The product's ID.
     * @param body - The variants to create, update, or delete.
     * @param query - Configure the fields to retrieve in the product variants.
     * @param headers - Headers to pass in the request
     * @returns The product variants' details.
     *
     * @example
     * sdk.admin.product.batchVariants("prod_123", {
     *   create: [
     *     {
     *       title: "Blue Shirt",
     *       options: {
     *         Color: "Blue"
     *       },
     *       prices: []
     *     }
     *   ],
     *   update: [
     *     {
     *       id: "variant_123",
     *       title: "Pants"
     *     }
     *   ],
     *   delete: ["variant_123"]
     * })
     * .then(({ created, updated, deleted }) => {
     *   console.log(created, updated, deleted)
     * })
     */ batchVariants(productId, body, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/products/${productId}/variants/batch`, {
                method: "POST",
                headers,
                body,
                query
            });
        });
    }
    /**
     * This method creates a variant for a product. It sends a request to the
     * [Create Variant](https://docs.medusajs.com/api/admin#products_postproductsidvariants)
     * API route.
     *
     * @param productId - The product's ID.
     * @param body - The variant's details.
     * @param query - Configure the fields to retrieve in the product.
     * @param headers - Headers to pass in the request
     * @returns The product's details.
     *
     * @example
     * sdk.admin.product.createVariant("prod_123", {
     *   title: "Blue Shirt",
     *   options: {
     *     Color: "Blue"
     *   },
     *   prices: [
     *     {
     *       amount: 10,
     *       currency_code: "usd"
     *     }
     *   ]
     * })
     * .then(({ product }) => {
     *   console.log(product)
     * })
     */ createVariant(productId, body, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/products/${productId}/variants`, {
                method: "POST",
                headers,
                body,
                query
            });
        });
    }
    /**
     * This method updates a variant of a product. It sends a request to the
     * [Update Variant](https://docs.medusajs.com/api/admin#products_postproductsidvariantsvariant_id)
     * API route.
     *
     * @param productId - The product's ID.
     * @param id - The variant's ID.
     * @param body - The data to update in the variant.
     * @param query - Configure the fields to retrieve in the product.
     * @param headers - Headers to pass in the request
     * @returns The product's details.
     *
     * @example
     * sdk.admin.product.updateVariant(
     *   "prod_123",
     *   "variant_123",
     *     {
     *     title: "Blue Shirt",
     *   }
     * )
     * .then(({ product }) => {
     *   console.log(product)
     * })
     */ updateVariant(productId, id, body, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/products/${productId}/variants/${id}`, {
                method: "POST",
                headers,
                body,
                query
            });
        });
    }
    /**
     * This method retrieves a paginated list of products. It sends a request to the
     * [List Products](https://docs.medusajs.com/api/admin#products_getproductsidvariants) API route.
     *
     * @param productId - The ID of the product to retrieve its variants.
     * @param query - Filters and pagination configurations.
     * @param headers - Headers to pass in the request.
     * @returns The paginated list of product variants.
     *
     * @example
     * To retrieve the list of product variants:
     *
     * ```ts
     * sdk.admin.product.listVariants("prod_123")
     * .then(({ variants, count, limit, offset }) => {
     *   console.log(variants)
     * })
     * ```
     *
     * To configure the pagination, pass the `limit` and `offset` query parameters.
     *
     * For example, to retrieve only 10 items and skip 10 items:
     *
     * ```ts
     * sdk.admin.product.listVariants("prod_123", {
     *   limit: 10,
     *   offset: 10
     * })
     * .then(({ variants, count, limit, offset }) => {
     *   console.log(variants)
     * })
     * ```
     *
     * Using the `fields` query parameter, you can specify the fields and relations to retrieve
     * in each product variant:
     *
     * ```ts
     * sdk.admin.product.listVariants("prod_123", {
     *   fields: "id,*product"
     * })
     * .then(({ variants, count, limit, offset }) => {
     *   console.log(variants)
     * })
     * ```
     *
     * Learn more about the `fields` property in the [API reference](https://docs.medusajs.com/api/store#select-fields-and-relations).
     */ listVariants(productId, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/products/${productId}/variants`, {
                headers,
                query
            });
        });
    }
    /**
     * This method retrieves a product's variant. It sends a request to the
     * [Retrieve Variant](https://docs.medusajs.com/api/admin#products_getproductsidvariantsvariant_id)
     * API route.
     *
     * @param productId - The product's ID.
     * @param id - The variant's ID.
     * @param query - Configure the fields to retrieve in the product variant.
     * @param headers - Headers to pass in the request
     * @returns The product variant's details.
     *
     * @example
     * To retrieve a product variant by its ID:
     *
     * ```ts
     * sdk.admin.product.retrieveVariant(
     *   "prod_123",
     *   "variant_123"
     * )
     * .then(({ variant }) => {
     *   console.log(variant)
     * })
     * ```
     *
     * To specify the fields and relations to retrieve:
     *
     * ```ts
     * sdk.admin.product.retrieveVariant(
     *   "prod_123",
     *   "variant_123",
     *   {
     *     fields: "id, *product"
     *   }
     * )
     * .then(({ variant }) => {
     *   console.log(variant)
     * })
     * ```
     *
     * Learn more about the `fields` property in the [API reference](https://docs.medusajs.com/api/store#select-fields-and-relations).
     */ retrieveVariant(productId, id, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/products/${productId}/variants/${id}`, {
                query,
                headers
            });
        });
    }
    /**
     * This method deletes a product's variant. It sends a request to the
     * [Delete Variant](https://docs.medusajs.com/api/admin#products_deleteproductsidvariantsvariant_id)
     * API route.
     *
     * @param productId - The product's ID.
     * @param id - The ID of the variant.
     * @param headers - Headers to pass in the request
     * @returns The deletion's details.
     *
     * @example
     * sdk.admin.product.deleteVariant("prod_123", "variant_123")
     * .then(({ deleted }) => {
     *   console.log(deleted)
     * })
     */ deleteVariant(productId, id, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/products/${productId}/variants/${id}`, {
                method: "DELETE",
                headers
            });
        });
    }
    /**
     * This method manages a product's variant's inventories to associate them with inventory items,
     * update their inventory items, or delete their association with inventory items.
     *
     * It sends a request to the
     * [Manage Variant Inventory](https://docs.medusajs.com/api/admin#products_postproductsidvariantsinventoryitemsbatch)
     * API route.
     *
     * @param productId - The ID of the product that the variant belongs to.
     * @param body - The inventory items to create, update, or delete.
     * @param query - Pass query parameters in the request.
     * @param headers - Headers to pass in the request
     * @returns The details of the created, updated, or deleted inventory items.
     *
     * @example
     * sdk.admin.product.batchVariantInventoryItems(
     *   "prod_123",
     *   {
     *     create: [
     *       {
     *         inventory_item_id: "iitem_123",
     *         variant_id: "variant_123",
     *         required_quantity: 10
     *       }
     *     ],
     *     update: [
     *       {
     *         inventory_item_id: "iitem_1234",
     *         variant_id: "variant_1234",
     *         required_quantity: 20
     *       }
     *     ],
     *     delete: [
     *       {
     *         inventory_item_id: "iitem_321",
     *         variant_id: "variant_321"
     *       }
     *     ]
     *   }
     * )
     * .then(({ created, updated, deleted }) => {
     *   console.log(created, updated, deleted)
     * })
     */ batchVariantInventoryItems(productId, body, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/products/${productId}/variants/inventory-items/batch`, {
                method: "POST",
                headers,
                body,
                query
            });
        });
    }
    /**
     * This method creates an option in a product. It sends a request to the
     * [Create Option](https://docs.medusajs.com/api/admin#products_postproductsidoptions)
     * API route.
     *
     * @param productId - The product's ID.
     * @param body - The option's details.
     * @param query - Configure the fields to retrieve in the product.
     * @param headers - Headers to pass in the request
     * @returns The product's details.
     *
     * @example
     * sdk.admin.product.createOption(
     *   "prod_123",
     *   {
     *     title: "Color",
     *     values: ["Green", "Blue"]
     *   }
     * )
     * .then(({ product }) => {
     *   console.log(product)
     * })
     */ createOption(productId, body, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/products/${productId}/options`, {
                method: "POST",
                headers,
                body,
                query
            });
        });
    }
    /**
     * This method updates a product's option. It sends a request to the
     * [Update Option](https://docs.medusajs.com/api/admin#products_postproductsidoptionsoption_id)
     * API route.
     *
     * @param productId - The product's ID.
     * @param id - The ID of the option to update.
     * @param body - The data to update in the option.
     * @param query - Configure the fields to retrieve in the product.
     * @param headers - Headers to pass in the request
     * @returns The product's details.
     *
     * @example
     * sdk.admin.product.updateOption(
     *   "prod_123",
     *   "prodopt_123",
     *   {
     *     title: "Color"
     *   }
     * )
     * .then(({ product }) => {
     *   console.log(product)
     * })
     */ updateOption(productId, id, body, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/products/${productId}/options/${id}`, {
                method: "POST",
                headers,
                body,
                query
            });
        });
    }
    /**
     * This method retrieves a paginated list of product options. It sends a request to the
     * [List Options](https://docs.medusajs.com/api/admin#products_getproductsidoptions) API route.
     *
     * @param productId - The ID of the product to retrieve its options
     * @param query - Filters and pagination configurations.
     * @param headers - Headers to pass in the request.
     * @returns The paginated list of product options.
     *
     * @example
     * To retrieve the list of product options:
     *
     * ```ts
     * sdk.admin.product.listOptions("prod_123")
     * .then(({ product_options, count, limit, offset }) => {
     *   console.log(product_options)
     * })
     * ```
     *
     * To configure the pagination, pass the `limit` and `offset` query parameters.
     *
     * For example, to retrieve only 10 items and skip 10 items:
     *
     * ```ts
     * sdk.admin.product.listOptions("prod_123", {
     *   limit: 10,
     *   offset: 10
     * })
     * .then(({ product_options, count, limit, offset }) => {
     *   console.log(product_options)
     * })
     * ```
     *
     * Using the `fields` query parameter, you can specify the fields and relations to retrieve
     * in each product options:
     *
     * ```ts
     * sdk.admin.product.listOptions("prod_123", {
     *   fields: "id,title"
     * })
     * .then(({ product_options, count, limit, offset }) => {
     *   console.log(product_options)
     * })
     * ```
     *
     * Learn more about the `fields` property in the [API reference](https://docs.medusajs.com/api/store#select-fields-and-relations).
     */ listOptions(productId, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/products/${productId}/options`, {
                headers,
                query
            });
        });
    }
    /**
     * This method retrieves a product's option. It sends a request to the
     * [Get Option](https://docs.medusajs.com/api/admin#products_getproductsidoptionsoption_id)
     * API route.
     *
     * @param productId - The product's ID.
     * @param id - The product option's ID.
     * @param query - Configure the fields to retrieve in the product option.
     * @param headers - Headers to pass in the request
     * @returns The product option's details.
     *
     * @example
     * To retrieve a product option by its ID:
     *
     * ```ts
     * sdk.admin.product.retrieveOption(
     *   "prod_123",
     *   "prodopt_123"
     * )
     * .then(({ product_option }) => {
     *   console.log(product_option)
     * })
     * ```
     *
     * To specify the fields and relations to retrieve:
     *
     * ```ts
     * sdk.admin.product.retrieveOption(
     *   "prod_123",
     *   "prodopt_123",
     *   {
     *     fields: "id,title"
     *   }
     * )
     * .then(({ product_option }) => {
     *   console.log(product_option)
     * })
     * ```
     *
     * Learn more about the `fields` property in the [API reference](https://docs.medusajs.com/api/store#select-fields-and-relations).
     */ retrieveOption(productId, id, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/products/${productId}/options/${id}`, {
                query,
                headers
            });
        });
    }
    /**
     * This method deletes a product's option. It sends a request to the
     * [Delete Option](https://docs.medusajs.com/api/admin#products_deleteproductsidoptionsoption_id)
     * API route.
     *
     * @param productId - The product's ID.
     * @param id - The option's ID.
     * @param headers - Headers to pass in the request
     * @returns The deletion's details.
     *
     * @example
     * sdk.admin.product.deleteOption("prod_123", "prodopt_123")
     * .then(({ deleted }) => {
     *   console.log(deleted)
     * })
     */ deleteOption(productId, id, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/products/${productId}/options/${id}`, {
                method: "DELETE",
                headers
            });
        });
    }
} //# sourceMappingURL=product.js.map
}}),
"[project]/node_modules/@medusajs/js-sdk/dist/esm/admin/product-category.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "ProductCategory": (()=>ProductCategory)
});
var __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
class ProductCategory {
    /**
     * @ignore
     */ constructor(client){
        this.client = client;
    }
    /**
     * This method creates a product category. It sends a request to the
     * [Create Category](https://docs.medusajs.com/api/admin#product-categories_postproductcategories)
     * API route.
     *
     * @param body - The details of the category to create.
     * @param query - Configure the fields to retrieve in the category.
     * @param headers - Headers to pass in the request
     * @returns The category's details.
     *
     * @example
     * sdk.admin.productCategory.create({
     *   name: "Shirts"
     * })
     * .then(({ product_category }) => {
     *   console.log(product_category)
     * })
     */ create(body, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return this.client.fetch(`/admin/product-categories`, {
                method: "POST",
                headers,
                body,
                query
            });
        });
    }
    /**
     * This method updates a product category. It sends a request to the
     * [Update Category](https://docs.medusajs.com/api/admin#product-categories_postproductcategoriesid)
     * API route.
     *
     * @param id - The product category's ID.
     * @param body - The data to update in the category.
     * @param query - Configure the fields to retrieve in the category.
     * @param headers - Headers to pass in the request
     * @returns The category's details.
     *
     * @example
     * sdk.admin.productCategory.update("pcat_123", {
     *   name: "Shirts"
     * })
     * .then(({ product_category }) => {
     *   console.log(product_category)
     * })
     */ update(id, body, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return this.client.fetch(`/admin/product-categories/${id}`, {
                method: "POST",
                headers,
                body,
                query
            });
        });
    }
    /**
     * This method retrieves a paginated list of product categories. It sends a request to the
     * [List Product Categories](https://docs.medusajs.com/api/admin#product-categories_getproductcategories) API route.
     *
     * @param query - Filters and pagination configurations.
     * @param headers - Headers to pass in the request.
     * @returns The paginated list of product categories.
     *
     * @example
     * To retrieve the list of product categories:
     *
     * ```ts
     * sdk.admin.productCategory.list()
     * .then(({ product_categories, count, limit, offset }) => {
     *   console.log(product_categories)
     * })
     * ```
     *
     * To configure the pagination, pass the `limit` and `offset` query parameters.
     *
     * For example, to retrieve only 10 items and skip 10 items:
     *
     * ```ts
     * sdk.admin.productCategory.list({
     *   limit: 10,
     *   offset: 10
     * })
     * .then(({ product_categories, count, limit, offset }) => {
     *   console.log(product_categories)
     * })
     * ```
     *
     * Using the `fields` query parameter, you can specify the fields and relations to retrieve
     * in each product category:
     *
     * ```ts
     * sdk.admin.productCategory.list({
     *   fields: "id,*products"
     * })
     * .then(({ product_categories, count, limit, offset }) => {
     *   console.log(product_categories)
     * })
     * ```
     *
     * Learn more about the `fields` property in the [API reference](https://docs.medusajs.com/api/store#select-fields-and-relations).
     */ list(query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return this.client.fetch(`/admin/product-categories`, {
                headers,
                query: query
            });
        });
    }
    /**
     * This method retrieves a product category by its ID. It sends a request to the
     * [Get Product Category](https://docs.medusajs.com/api/admin#product-categories_getproductcategoriesid) API route.
     *
     * @param id - The category's ID.
     * @param query - Configure the fields to retrieve in the product category.
     * @param headers - Headers to pass in the request
     * @returns The product category's details.
     *
     * @example
     * To retrieve a product category by its ID:
     *
     * ```ts
     * sdk.admin.productCategory.retrieve("pcat_123")
     * .then(({ product_category }) => {
     *   console.log(product_category)
     * })
     * ```
     *
     * To specify the fields and relations to retrieve:
     *
     * ```ts
     * sdk.admin.productCategory.retrieve("pcat_123", {
     *   fields: "id,*products"
     * })
     * .then(({ product_category }) => {
     *   console.log(product_category)
     * })
     * ```
     *
     * Learn more about the `fields` property in the [API reference](https://docs.medusajs.com/api/store#select-fields-and-relations).
     */ retrieve(id, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return this.client.fetch(`/admin/product-categories/${id}`, {
                query,
                headers
            });
        });
    }
    /**
     * This method deletes a product category. It sends a request to the
     * [Delete Product Category](https://docs.medusajs.com/api/admin#product-categories_deleteproductcategoriesid)
     * API route.
     *
     * @param id - The category's ID.
     * @param headers - Headers to pass in the request
     * @returns The deletion's details.
     *
     * @example
     * sdk.admin.productCategory.delete("pcat_123")
     * .then(({ deleted }) => {
     *   console.log(deleted)
     * })
     */ delete(id, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return this.client.fetch(`/admin/product-categories/${id}`, {
                method: "DELETE",
                headers
            });
        });
    }
    /**
     * This method manaes the products of a category to add or remove them. It sends a request
     * to the [Manage Products](https://docs.medusajs.com/api/admin#product-categories_postproductcategoriesidproducts)
     * API route.
     *
     * @param id - The category's ID.
     * @param body - The products to create or update.
     * @param query - Configure the fields to retrieve in the product category.
     * @param headers - Headers to pass in the request
     * @returns The product category's details.
     *
     * @example
     * sdk.admin.productCategory.updateProducts("pcat_123", {
     *   add: ["prod_123"],
     *   remove: ["prod_321"]
     * })
     * .then(({ product_category }) => {
     *   console.log(product_category)
     * })
     */ updateProducts(id, body, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return this.client.fetch(`/admin/product-categories/${id}/products`, {
                method: "POST",
                headers,
                body,
                query
            });
        });
    }
} //# sourceMappingURL=product-category.js.map
}}),
"[project]/node_modules/@medusajs/js-sdk/dist/esm/admin/product-collection.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "ProductCollection": (()=>ProductCollection)
});
var __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
class ProductCollection {
    /**
     * @ignore
     */ constructor(client){
        this.client = client;
    }
    /**
     * This method creates a product collection. It sends a request to the
     * [Create Collection](https://docs.medusajs.com/api/admin#collections_postcollections)
     * API route.
     *
     * @param body - The details of the product collection to create.
     * @param query - Configure the fields to retrieve in the product collection.
     * @param headers - Headers to pass in the request
     * @returns The product collection's details.
     *
     * @example
     * sdk.admin.productCollection.create({
     *   title: "Summer Collection"
     * })
     * .then(({ collection }) => {
     *   console.log(collection)
     * })
     */ create(body, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return this.client.fetch(`/admin/collections`, {
                method: "POST",
                headers,
                body,
                query
            });
        });
    }
    /**
     * This method updates a collection. It sends a request to the
     * [Update Collection](https://docs.medusajs.com/api/admin#collections_postcollectionsid)
     * API route.
     *
     * @param id - The ID of the collection.
     * @param body - The data to update in the collection.
     * @param query - Configure the fields to retrieve in the product collection.
     * @param headers - Headers to pass in the request
     * @returns The product collection's details.
     *
     * @example
     * sdk.admin.productCollection.update("pcol_123", {
     *   title: "Summer Collection"
     * })
     * .then(({ collection }) => {
     *   console.log(collection)
     * })
     */ update(id, body, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return this.client.fetch(`/admin/collections/${id}`, {
                method: "POST",
                headers,
                body,
                query
            });
        });
    }
    /**
     * This method retrieves a paginated list of collections. It sends a request to the
     * [List Collections](https://docs.medusajs.com/api/admin#collections_getcollections) API route.
     *
     * @param query - Filters and pagination configurations.
     * @param headers - Headers to pass in the request.
     * @returns The paginated list of collections.
     *
     * @example
     * To retrieve the list of collections:
     *
     * ```ts
     * sdk.admin.productCollection.list()
     * .then(({ collections, count, limit, offset }) => {
     *   console.log(collections)
     * })
     * ```
     *
     * To configure the pagination, pass the `limit` and `offset` query parameters.
     *
     * For example, to retrieve only 10 items and skip 10 items:
     *
     * ```ts
     * sdk.admin.productCollection.list({
     *   limit: 10,
     *   offset: 10
     * })
     * .then(({ collections, count, limit, offset }) => {
     *   console.log(collections)
     * })
     * ```
     *
     * Using the `fields` query parameter, you can specify the fields and relations to retrieve
     * in each collection:
     *
     * ```ts
     * sdk.admin.productCollection.list({
     *   fields: "id,*products"
     * })
     * .then(({ collections, count, limit, offset }) => {
     *   console.log(collections)
     * })
     * ```
     *
     * Learn more about the `fields` property in the [API reference](https://docs.medusajs.com/api/store#select-fields-and-relations).
     */ list(queryParams, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return this.client.fetch(`/admin/collections`, {
                headers,
                query: queryParams
            });
        });
    }
    /**
     * This method retrieves a collection by its ID. It sends a request to the
     * [Get Collection](https://docs.medusajs.com/api/admin#collections_getcollectionsid) API route.
     *
     * @param id - The collection's ID.
     * @param query - Configure the fields to retrieve in the collection.
     * @param headers - Headers to pass in the request
     * @returns The collection's details.
     *
     * @example
     * To retrieve a collection by its ID:
     *
     * ```ts
     * sdk.admin.productCollection.retrieve("pcol_123")
     * .then(({ collection }) => {
     *   console.log(collection)
     * })
     * ```
     *
     * To specify the fields and relations to retrieve:
     *
     * ```ts
     * sdk.admin.productCollection.retrieve("pcol_123", {
     *   fields: "id,*products"
     * })
     * .then(({ collection }) => {
     *   console.log(collection)
     * })
     * ```
     *
     * Learn more about the `fields` property in the [API reference](https://docs.medusajs.com/api/store#select-fields-and-relations).
     */ retrieve(id, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return this.client.fetch(`/admin/collections/${id}`, {
                query,
                headers
            });
        });
    }
    /**
     * This method deletes a product collection. It sends a request to the
     * [Delete Collection](https://docs.medusajs.com/api/admin#collections_deletecollectionsid)
     * API route.
     *
     * @param id - The collection's ID.
     * @param headers - Headers to pass in the request
     * @returns The deletion's details.
     *
     * @example
     * sdk.admin.productCollection.delete("pcol_123")
     * .then(({ deleted }) => {
     *   console.log(deleted)
     * })
     */ delete(id, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return this.client.fetch(`/admin/collections/${id}`, {
                method: "DELETE",
                headers
            });
        });
    }
    /**
     * This method manages the products of a collection to add or remove them. It sends a request
     * to the [Manage Products](https://docs.medusajs.com/api/admin#collections_postcollectionsidproducts)
     * API route.
     *
     * @param id - The collection's ID.
     * @param body - The products to add or remove.
     * @param headers - Headers to pass in the request
     * @returns The product category's details.
     *
     * @example
     * sdk.admin.productCollection.updateProducts("pcol_123", {
     *   add: ["prod_123"],
     *   remove: ["prod_321"]
     * })
     * .then(({ collection }) => {
     *   console.log(collection)
     * })
     */ updateProducts(id, body, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return this.client.fetch(`/admin/collections/${id}/products`, {
                method: "POST",
                headers,
                body
            });
        });
    }
} //# sourceMappingURL=product-collection.js.map
}}),
"[project]/node_modules/@medusajs/js-sdk/dist/esm/admin/product-tag.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "ProductTag": (()=>ProductTag)
});
var __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
class ProductTag {
    /**
     * @ignore
     */ constructor(client){
        this.client = client;
    }
    /**
     * This method creates a product tag. It sends a request to the
     * [Create Product Tag](https://docs.medusajs.com/api/admin#product-tags_postproducttags)
     * API route.
     *
     * @param body - The details of the product tag.
     * @param query - Configure the fields to retrieve in the product tag.
     * @param headers - Headers to pass in the request
     * @returns The product tag's details.
     *
     * @example
     * sdk.admin.productTag.create({
     *   value: "shirt"
     * })
     * .then(({ product_tag }) => {
     *   console.log(product_tag)
     * })
     */ create(body, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return this.client.fetch(`/admin/product-tags`, {
                method: "POST",
                headers,
                body,
                query
            });
        });
    }
    /**
     * This method updates a tag's details. It sends a request to the
     * [Update Product Tag](https://docs.medusajs.com/api/admin#product-tags_postproducttagsid)
     * API route.
     *
     * @param id - The tag's ID.
     * @param body - The data to update in the tag.
     * @param query - Configure the fields to retrieve in the product tag.
     * @param headers - Headers to pass in the request
     * @returns The product tag's details.
     *
     * @example
     * sdk.admin.productTag.update("ptag_123", {
     *   value: "shirt"
     * })
     * .then(({ product_tag }) => {
     *   console.log(product_tag)
     * })
     */ update(id, body, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return this.client.fetch(`/admin/product-tags/${id}`, {
                method: "POST",
                headers,
                body,
                query
            });
        });
    }
    /**
     * This method retrieves a paginated list of product tags. It sends a request to the
     * [List Product Tags](https://docs.medusajs.com/api/admin#product-tags_getproducttags) API route.
     *
     * @param query - Filters and pagination configurations.
     * @param headers - Headers to pass in the request.
     * @returns The paginated list of product tags.
     *
     * @example
     * To retrieve the list of product tags:
     *
     * ```ts
     * sdk.admin.productTag.list()
     * .then(({ product_tags, count, limit, offset }) => {
     *   console.log(product_tags)
     * })
     * ```
     *
     * To configure the pagination, pass the `limit` and `offset` query parameters.
     *
     * For example, to retrieve only 10 items and skip 10 items:
     *
     * ```ts
     * sdk.admin.productTag.list({
     *   limit: 10,
     *   offset: 10
     * })
     * .then(({ product_tags, count, limit, offset }) => {
     *   console.log(product_tags)
     * })
     * ```
     *
     * Using the `fields` query parameter, you can specify the fields and relations to retrieve
     * in each product tag:
     *
     * ```ts
     * sdk.admin.productTag.list({
     *   fields: "id,*products"
     * })
     * .then(({ product_tags, count, limit, offset }) => {
     *   console.log(product_tags)
     * })
     * ```
     *
     * Learn more about the `fields` property in the [API reference](https://docs.medusajs.com/api/store#select-fields-and-relations).
     */ list(query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return this.client.fetch(`/admin/product-tags`, {
                headers,
                query: query
            });
        });
    }
    /**
     * This method retrieves a product tag by its ID. It sends a request to the
     * [Get Product Tag](https://docs.medusajs.com/api/admin#product-tags_getproducttagsid) API route.
     *
     * @param id - The product tag's ID.
     * @param query - Configure the fields to retrieve in the product tag.
     * @param headers - Headers to pass in the request
     * @returns The product tag's details.
     *
     * @example
     * To retrieve a product tag by its ID:
     *
     * ```ts
     * sdk.admin.productTag.retrieve("ptag_123")
     * .then(({ product_tag }) => {
     *   console.log(product_tag)
     * })
     * ```
     *
     * To specify the fields and relations to retrieve:
     *
     * ```ts
     * sdk.admin.productTag.retrieve("ptag_123", {
     *   fields: "id,*products"
     * })
     * .then(({ product_tag }) => {
     *   console.log(product_tag)
     * })
     * ```
     *
     * Learn more about the `fields` property in the [API reference](https://docs.medusajs.com/api/store#select-fields-and-relations).
     */ retrieve(id, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return this.client.fetch(`/admin/product-tags/${id}`, {
                query,
                headers
            });
        });
    }
    /**
     * This method deletes a product tag. It sends a request to the
     * [Delete Product Tag](https://docs.medusajs.com/api/admin#product-tags_deleteproducttagsid)
     * API route.
     *
     * @param id - The tag's ID.
     * @param headers - Headers to pass in the request
     * @returns The deletion's details.
     *
     * @example
     * sdk.admin.productTag.delete("ptag_123")
     * .then(({ deleted }) => {
     *   console.log(deleted)
     * })
     */ delete(id, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return this.client.fetch(`/admin/product-tags/${id}`, {
                method: "DELETE",
                headers
            });
        });
    }
} //# sourceMappingURL=product-tag.js.map
}}),
"[project]/node_modules/@medusajs/js-sdk/dist/esm/admin/product-type.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "ProductType": (()=>ProductType)
});
var __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
class ProductType {
    /**
     * @ignore
     */ constructor(client){
        this.client = client;
    }
    /**
     * This method creates a product type. It sends a request to the
     * [Create Product Type](https://docs.medusajs.com/api/admin#product-types_postproducttypes)
     * API route.
     *
     * @param body - The product type's details.
     * @param query - Configure the fields to retrieve in the product type.
     * @param headers - Headers to pass in the request
     * @returns The product type's details.
     *
     * @example
     * sdk.admin.productType.create({
     *   value: "Clothes"
     * })
     * .then(({ product_type }) => {
     *   console.log(product_type)
     * })
     */ create(body, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return this.client.fetch(`/admin/product-types`, {
                method: "POST",
                headers,
                body,
                query
            });
        });
    }
    /**
     * This method updates a product type. It sends a request to the
     * [Update Product Type](https://docs.medusajs.com/api/admin#product-types_postproducttypesid)
     * API route.
     *
     * @param id - The product type's ID.
     * @param body - The data to update in the product type.
     * @param query - Configure the fields to retrieve in the product type.
     * @param headers - Headers to pass in the request
     * @returns The product type's details.
     *
     * @example
     * sdk.admin.productType.update("ptyp_123", {
     *   value: "Clothes"
     * })
     * .then(({ product_type }) => {
     *   console.log(product_type)
     * })
     */ update(id, body, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return this.client.fetch(`/admin/product-types/${id}`, {
                method: "POST",
                headers,
                body,
                query
            });
        });
    }
    /**
     * This method retrieves a paginated list of product types. It sends a request to the
     * [List Product Types](https://docs.medusajs.com/api/admin#product-types_getproducttypes) API route.
     *
     * @param query - Filters and pagination configurations.
     * @param headers - Headers to pass in the request.
     * @returns The paginated list of product types.
     *
     * @example
     * To retrieve the list of product types:
     *
     * ```ts
     * sdk.admin.productType.list()
     * .then(({ product_types, count, limit, offset }) => {
     *   console.log(product_types)
     * })
     * ```
     *
     * To configure the pagination, pass the `limit` and `offset` query parameters.
     *
     * For example, to retrieve only 10 items and skip 10 items:
     *
     * ```ts
     * sdk.admin.productType.list({
     *   limit: 10,
     *   offset: 10
     * })
     * .then(({ product_types, count, limit, offset }) => {
     *   console.log(product_types)
     * })
     * ```
     *
     * Using the `fields` query parameter, you can specify the fields and relations to retrieve
     * in each product type:
     *
     * ```ts
     * sdk.admin.productType.list({
     *   fields: "id,*products"
     * })
     * .then(({ product_types, count, limit, offset }) => {
     *   console.log(product_types)
     * })
     * ```
     *
     * Learn more about the `fields` property in the [API reference](https://docs.medusajs.com/api/store#select-fields-and-relations).
     */ list(query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return this.client.fetch(`/admin/product-types`, {
                headers,
                query: query
            });
        });
    }
    /**
     * This method retrieves a product type by its ID. It sends a request to the
     * [Get Product Type](https://docs.medusajs.com/api/admin#product-types_getproducttypesid)
     * API route.
     *
     * @param id - The product type's ID.
     * @param query - Configure the fields to retrieve in the product type.
     * @param headers - Headers to pass in the request
     * @returns The product type's details.
     *
     * @example
     * To retrieve a product type by its ID:
     *
     * ```ts
     * sdk.admin.productType.retrieve("ptyp_123")
     * .then(({ product_type }) => {
     *   console.log(product_type)
     * })
     * ```
     *
     * To specify the fields and relations to retrieve:
     *
     * ```ts
     * sdk.admin.productType.retrieve("ptyp_123", {
     *   fields: "id,*products"
     * })
     * .then(({ product_type }) => {
     *   console.log(product_type)
     * })
     * ```
     *
     * Learn more about the `fields` property in the [API reference](https://docs.medusajs.com/api/store#select-fields-and-relations).
     */ retrieve(id, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return this.client.fetch(`/admin/product-types/${id}`, {
                query,
                headers
            });
        });
    }
    /**
     * This method deletes a product type. It sends a request to the
     * [Delete Product Type](https://docs.medusajs.com/api/admin#product-types_deleteproducttypesid)
     * API route.
     *
     * @param id - The product type's ID.
     * @param headers - Headers to pass in the request
     * @returns The product type's details.
     *
     * @example
     * sdk.admin.productType.delete("ptyp_123")
     * .then(({ deleted }) => {
     *   console.log(deleted)
     * })
     */ delete(id, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return this.client.fetch(`/admin/product-types/${id}`, {
                method: "DELETE",
                headers
            });
        });
    }
} //# sourceMappingURL=product-type.js.map
}}),
"[project]/node_modules/@medusajs/js-sdk/dist/esm/admin/product-variant.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "ProductVariant": (()=>ProductVariant)
});
var __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
class ProductVariant {
    /**
     * @ignore
     */ constructor(client){
        this.client = client;
    }
    /**
     * This method retrieves a paginated list of product variants. It sends a request to the
     * [List Product Variants](https://docs.medusajs.com/api/admin#product-variants_getproductvariants)
     * API route.
     *
     * @param query - Filters and pagination configurations.
     * @param headers - Headers to pass in the request.
     * @returns The paginated list of product variants.
     *
     * @example
     * To retrieve the list of product variants:
     *
     * ```ts
     * sdk.admin.productVariant.list()
     * .then(({ variants, count, limit, offset }) => {
     *   console.log(variants)
     * })
     * ```
     *
     * To configure the pagination, pass the `limit` and `offset` query parameters.
     *
     * For example, to retrieve only 10 items and skip 10 items:
     *
     * ```ts
     * sdk.admin.productVariant.list({
     *   limit: 10,
     *   offset: 10
     * })
     * .then(({ variants, count, limit, offset }) => {
     *   console.log(variants)
     * })
     * ```
     *
     * Using the `fields` query parameter, you can specify the fields and relations to retrieve
     * in each campaign:
     *
     * ```ts
     * sdk.admin.productVariant.list({
     *   fields: "id,products"
     * })
     * .then(({ variants, count, limit, offset }) => {
     *   console.log(variants)
     * })
     * ```
     *
     * Learn more about the `fields` property in the [API reference](https://docs.medusajs.com/api/store#select-fields-and-relations).
     */ list(query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/product-variants`, {
                headers,
                query
            });
        });
    }
} //# sourceMappingURL=product-variant.js.map
}}),
"[project]/node_modules/@medusajs/js-sdk/dist/esm/admin/promotion.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "Promotion": (()=>Promotion)
});
var __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
class Promotion {
    /**
     * @ignore
     */ constructor(client){
        this.client = client;
    }
    retrieve(id, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/promotions/${id}`, {
                headers,
                query
            });
        });
    }
    list(query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/promotions`, {
                headers,
                query
            });
        });
    }
    create(payload, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/promotions`, {
                method: "POST",
                headers,
                body: payload
            });
        });
    }
    update(id, payload, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/promotions/${id}`, {
                method: "POST",
                headers,
                body: payload
            });
        });
    }
    delete(id, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/promotions/${id}`, {
                method: "DELETE",
                headers
            });
        });
    }
    addRules(id, ruleType, payload, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/promotions/${id}/${ruleType}/batch`, {
                method: "POST",
                headers,
                body: {
                    create: payload.rules
                }
            });
        });
    }
    updateRules(id, ruleType, payload, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/promotions/${id}/${ruleType}/batch`, {
                method: "POST",
                headers,
                body: {
                    update: payload.rules
                }
            });
        });
    }
    removeRules(id, ruleType, payload, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/promotions/${id}/${ruleType}/batch`, {
                method: "POST",
                headers,
                body: {
                    delete: payload.rule_ids
                }
            });
        });
    }
    listRules(id, ruleType, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            // eslint-disable-next-line max-len
            return yield this.client.fetch(`/admin/promotions/${id}/${ruleType}`, {
                headers,
                query
            });
        });
    }
    listRuleAttributes(ruleType, promotionType, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            // eslint-disable-next-line max-len
            return yield this.client.fetch(`/admin/promotions/rule-attribute-options/${ruleType}`, {
                headers,
                query: {
                    promotion_type: promotionType
                }
            });
        });
    }
    listRuleValues(ruleType, ruleValue, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/promotions/rule-value-options/${ruleType}/${ruleValue}`, {
                headers,
                query
            });
        });
    }
} //# sourceMappingURL=promotion.js.map
}}),
"[project]/node_modules/@medusajs/js-sdk/dist/esm/admin/refund-reasons.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "RefundReason": (()=>RefundReason)
});
var __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
class RefundReason {
    /**
     * @ignore
     */ constructor(client){
        this.client = client;
    }
    list(query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/refund-reasons`, {
                query,
                headers
            });
        });
    }
} //# sourceMappingURL=refund-reasons.js.map
}}),
"[project]/node_modules/@medusajs/js-sdk/dist/esm/admin/region.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "Region": (()=>Region)
});
var __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
class Region {
    /**
     * @ignore
     */ constructor(client){
        this.client = client;
    }
    create(body, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/regions`, {
                method: "POST",
                headers,
                body,
                query
            });
        });
    }
    update(id, body, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/regions/${id}`, {
                method: "POST",
                headers,
                body,
                query
            });
        });
    }
    list(queryParams, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/regions`, {
                query: queryParams,
                headers
            });
        });
    }
    retrieve(id, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/regions/${id}`, {
                query,
                headers
            });
        });
    }
    delete(id, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/regions/${id}`, {
                method: "DELETE",
                headers
            });
        });
    }
} //# sourceMappingURL=region.js.map
}}),
"[project]/node_modules/@medusajs/js-sdk/dist/esm/admin/reservation.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "default": (()=>__TURBOPACK__default__export__)
});
var __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
class Reservation {
    /**
     * @ignore
     */ constructor(client){
        this.client = client;
    }
    retrieve(id, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/reservations/${id}`, {
                method: "GET",
                headers,
                query
            });
        });
    }
    list(query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch("/admin/reservations", {
                method: "GET",
                query,
                headers
            });
        });
    }
    create(body, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch("/admin/reservations", {
                method: "POST",
                body,
                query,
                headers
            });
        });
    }
    update(id, body, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/reservations/${id}`, {
                method: "POST",
                body,
                query,
                headers
            });
        });
    }
    delete(id, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/reservations/${id}`, {
                method: "DELETE",
                headers
            });
        });
    }
}
const __TURBOPACK__default__export__ = Reservation;
 //# sourceMappingURL=reservation.js.map
}}),
"[project]/node_modules/@medusajs/js-sdk/dist/esm/admin/return.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "Return": (()=>Return)
});
var __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
class Return {
    /**
     * @ignore
     */ constructor(client){
        this.client = client;
    }
    list(query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/returns`, {
                query,
                headers
            });
        });
    }
    retrieve(id, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/returns/${id}`, {
                query,
                headers
            });
        });
    }
    initiateRequest(body, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/returns`, {
                method: "POST",
                headers,
                body,
                query
            });
        });
    }
    cancel(id, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/returns/${id}/cancel`, {
                method: "POST",
                headers,
                query
            });
        });
    }
    cancelRequest(id, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/returns/${id}/request`, {
                method: "DELETE",
                headers,
                query
            });
        });
    }
    addReturnItem(id, body, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/returns/${id}/request-items`, {
                method: "POST",
                headers,
                body,
                query
            });
        });
    }
    updateReturnItem(id, actionId, body, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/returns/${id}/request-items/${actionId}`, {
                method: "POST",
                headers,
                body,
                query
            });
        });
    }
    removeReturnItem(id, actionId, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/returns/${id}/request-items/${actionId}`, {
                method: "DELETE",
                headers,
                query
            });
        });
    }
    addReturnShipping(id, body, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/returns/${id}/shipping-method`, {
                method: "POST",
                headers,
                body,
                query
            });
        });
    }
    updateReturnShipping(id, actionId, body, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/returns/${id}/shipping-method/${actionId}`, {
                method: "POST",
                headers,
                body,
                query
            });
        });
    }
    deleteReturnShipping(id, actionId, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/returns/${id}/shipping-method/${actionId}`, {
                method: "DELETE",
                headers,
                query
            });
        });
    }
    updateRequest(id, body, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/returns/${id}`, {
                method: "POST",
                headers,
                body,
                query
            });
        });
    }
    confirmRequest(id, body, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/returns/${id}/request`, {
                method: "POST",
                headers,
                body,
                query
            });
        });
    }
    initiateReceive(id, body, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/returns/${id}/receive`, {
                method: "POST",
                headers,
                body,
                query
            });
        });
    }
    receiveItems(id, body, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/returns/${id}/receive-items`, {
                method: "POST",
                headers,
                body,
                query
            });
        });
    }
    updateReceiveItem(id, actionId, body, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/returns/${id}/receive-items/${actionId}`, {
                method: "POST",
                headers,
                body,
                query
            });
        });
    }
    removeReceiveItem(id, actionId, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/returns/${id}/receive-items/${actionId}`, {
                method: "DELETE",
                headers,
                query
            });
        });
    }
    dismissItems(id, body, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/returns/${id}/dismiss-items`, {
                method: "POST",
                headers,
                body,
                query
            });
        });
    }
    updateDismissItem(id, actionId, body, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/returns/${id}/dismiss-items/${actionId}`, {
                method: "POST",
                headers,
                body,
                query
            });
        });
    }
    removeDismissItem(id, actionId, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/returns/${id}/dismiss-items/${actionId}`, {
                method: "DELETE",
                headers,
                query
            });
        });
    }
    confirmReceive(id, body, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/returns/${id}/receive/confirm`, {
                method: "POST",
                headers,
                body,
                query
            });
        });
    }
    cancelReceive(id, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/returns/${id}/receive`, {
                method: "DELETE",
                headers,
                query
            });
        });
    }
} //# sourceMappingURL=return.js.map
}}),
"[project]/node_modules/@medusajs/js-sdk/dist/esm/admin/return-reason.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "ReturnReason": (()=>ReturnReason)
});
var __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
class ReturnReason {
    /**
     * @ignore
     */ constructor(client){
        this.client = client;
    }
    list(query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch("/admin/return-reasons", {
                headers,
                query
            });
        });
    }
    retrieve(id, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/return-reasons/${id}`, {
                query,
                headers
            });
        });
    }
    create(body, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return this.client.fetch(`/admin/return-reasons`, {
                method: "POST",
                headers,
                body,
                query
            });
        });
    }
    update(id, body, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return this.client.fetch(`/admin/return-reasons/${id}`, {
                method: "POST",
                headers,
                body,
                query
            });
        });
    }
    delete(id, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/return-reasons/${id}`, {
                method: "DELETE",
                headers,
                query
            });
        });
    }
} //# sourceMappingURL=return-reason.js.map
}}),
"[project]/node_modules/@medusajs/js-sdk/dist/esm/admin/sales-channel.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "SalesChannel": (()=>SalesChannel)
});
var __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
class SalesChannel {
    /**
     * @ignore
     */ constructor(client){
        this.client = client;
    }
    create(body, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/sales-channels`, {
                method: "POST",
                headers,
                body,
                query
            });
        });
    }
    update(id, body, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/sales-channels/${id}`, {
                method: "POST",
                headers,
                body,
                query
            });
        });
    }
    delete(id, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/sales-channels/${id}`, {
                method: "DELETE",
                headers
            });
        });
    }
    retrieve(id, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/sales-channels/${id}`, {
                method: "GET",
                headers,
                query
            });
        });
    }
    list(query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/sales-channels`, {
                method: "GET",
                headers,
                query
            });
        });
    }
    updateProducts(id, body, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/sales-channels/${id}/products`, {
                method: "POST",
                headers,
                body
            });
        });
    }
    batchProducts(id, body, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/sales-channels/${id}/products`, {
                method: "POST",
                headers,
                body
            });
        });
    }
} //# sourceMappingURL=sales-channel.js.map
}}),
"[project]/node_modules/@medusajs/js-sdk/dist/esm/admin/shipping-option.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "ShippingOption": (()=>ShippingOption)
});
var __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
class ShippingOption {
    /**
     * @ignore
     */ constructor(client){
        this.client = client;
    }
    create(body, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/shipping-options`, {
                method: "POST",
                headers,
                body,
                query
            });
        });
    }
    retrieve(id, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/shipping-options/${id}`, {
                method: "GET",
                headers,
                query
            });
        });
    }
    update(id, body, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/shipping-options/${id}`, {
                method: "POST",
                headers,
                body,
                query
            });
        });
    }
    delete(id, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/shipping-options/${id}`, {
                method: "DELETE",
                headers
            });
        });
    }
    list(query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/shipping-options`, {
                method: "GET",
                headers,
                query
            });
        });
    }
    updateRules(id, body, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/shipping-options/${id}/rules/batch`, {
                method: "POST",
                headers,
                body
            });
        });
    }
} //# sourceMappingURL=shipping-option.js.map
}}),
"[project]/node_modules/@medusajs/js-sdk/dist/esm/admin/shipping-profile.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "ShippingProfile": (()=>ShippingProfile)
});
var __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
class ShippingProfile {
    /**
     * @ignore
     */ constructor(client){
        this.client = client;
    }
    create(body, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/shipping-profiles`, {
                method: "POST",
                headers,
                body,
                query
            });
        });
    }
    update(id, body, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/shipping-profiles/${id}`, {
                method: "POST",
                headers,
                body,
                query
            });
        });
    }
    delete(id, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/shipping-profiles/${id}`, {
                method: "DELETE",
                headers
            });
        });
    }
    list(query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/shipping-profiles`, {
                method: "GET",
                headers,
                query
            });
        });
    }
    retrieve(id, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/shipping-profiles/${id}`, {
                method: "GET",
                headers,
                query
            });
        });
    }
} //# sourceMappingURL=shipping-profile.js.map
}}),
"[project]/node_modules/@medusajs/js-sdk/dist/esm/admin/stock-location.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "StockLocation": (()=>StockLocation)
});
var __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
class StockLocation {
    /**
     * @ignore
     */ constructor(client){
        this.client = client;
    }
    create(body, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/stock-locations`, {
                method: "POST",
                headers,
                body,
                query
            });
        });
    }
    update(id, body, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/stock-locations/${id}`, {
                method: "POST",
                headers,
                body,
                query
            });
        });
    }
    delete(id, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/stock-locations/${id}`, {
                method: "DELETE",
                headers
            });
        });
    }
    retrieve(id, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/stock-locations/${id}`, {
                method: "GET",
                headers,
                query
            });
        });
    }
    list(query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/stock-locations`, {
                method: "GET",
                headers,
                query
            });
        });
    }
    updateSalesChannels(id, body, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/stock-locations/${id}/sales-channels`, {
                method: "POST",
                headers,
                body
            });
        });
    }
    createFulfillmentSet(id, body, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/stock-locations/${id}/fulfillment-sets`, {
                method: "POST",
                headers,
                body
            });
        });
    }
    updateFulfillmentProviders(id, body, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/stock-locations/${id}/fulfillment-providers`, {
                method: "POST",
                headers,
                body
            });
        });
    }
} //# sourceMappingURL=stock-location.js.map
}}),
"[project]/node_modules/@medusajs/js-sdk/dist/esm/admin/store.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "Store": (()=>Store)
});
var __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
class Store {
    /**
     * @ignore
     */ constructor(client){
        this.client = client;
    }
    retrieve(id, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/stores/${id}`, {
                method: "GET",
                headers,
                query
            });
        });
    }
    list(query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/stores`, {
                method: "GET",
                headers,
                query
            });
        });
    }
    update(id, body, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/stores/${id}`, {
                method: "POST",
                headers,
                body,
                query
            });
        });
    }
} //# sourceMappingURL=store.js.map
}}),
"[project]/node_modules/@medusajs/js-sdk/dist/esm/admin/tax-rate.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "TaxRate": (()=>TaxRate)
});
var __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const taxRateUrl = "/admin/tax-rates";
class TaxRate {
    /**
     * @ignore
     */ constructor(client){
        this.client = client;
    }
    create(body, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(taxRateUrl, {
                method: "POST",
                headers,
                body,
                query
            });
        });
    }
    update(id, body, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`${taxRateUrl}/${id}`, {
                method: "POST",
                headers,
                body,
                query
            });
        });
    }
    delete(id, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`${taxRateUrl}/${id}`, {
                method: "DELETE",
                headers
            });
        });
    }
    retrieve(id, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`${taxRateUrl}/${id}`, {
                method: "GET",
                headers,
                query
            });
        });
    }
    list(query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(taxRateUrl, {
                method: "GET",
                headers,
                query
            });
        });
    }
} //# sourceMappingURL=tax-rate.js.map
}}),
"[project]/node_modules/@medusajs/js-sdk/dist/esm/admin/tax-region.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "TaxRegion": (()=>TaxRegion)
});
var __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const taxRegionUrl = "/admin/tax-regions";
class TaxRegion {
    /**
     * @ignore
     */ constructor(client){
        this.client = client;
    }
    create(body, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(taxRegionUrl, {
                method: "POST",
                headers,
                body,
                query
            });
        });
    }
    delete(id, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`${taxRegionUrl}/${id}`, {
                method: "DELETE",
                headers
            });
        });
    }
    retrieve(id, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`${taxRegionUrl}/${id}`, {
                method: "GET",
                headers,
                query
            });
        });
    }
    list(query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(taxRegionUrl, {
                method: "GET",
                headers,
                query
            });
        });
    }
} //# sourceMappingURL=tax-region.js.map
}}),
"[project]/node_modules/@medusajs/js-sdk/dist/esm/admin/upload.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "Upload": (()=>Upload)
});
var __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
class Upload {
    /**
     * @ignore
     */ constructor(client){
        this.client = client;
    }
    // Note: The creation/upload flow be made more advanced, with support for streaming and progress, but for now we keep it simple
    create(body, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            const form = new FormData();
            if (body instanceof FileList) {
                Array.from(body).forEach((file)=>{
                    form.append("files", file);
                });
            } else {
                body.files.forEach((file)=>{
                    form.append("files", "content" in file ? new Blob([
                        file.content
                    ], {
                        type: "text/plain"
                    }) : file, file.name);
                });
            }
            return this.client.fetch(`/admin/uploads`, {
                method: "POST",
                headers: Object.assign(Object.assign({}, headers), {
                    // Let the browser determine the content type.
                    "content-type": null
                }),
                body: form,
                query
            });
        });
    }
    retrieve(id, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return this.client.fetch(`/admin/uploads/${id}`, {
                query,
                headers
            });
        });
    }
    delete(id, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return this.client.fetch(`/admin/uploads/${id}`, {
                method: "DELETE",
                headers
            });
        });
    }
} //# sourceMappingURL=upload.js.map
}}),
"[project]/node_modules/@medusajs/js-sdk/dist/esm/admin/user.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "User": (()=>User)
});
var __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
class User {
    /**
     * @ignore
     */ constructor(client){
        this.client = client;
    }
    create(body, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return this.client.fetch(`/admin/users`, {
                method: "POST",
                headers,
                body,
                query
            });
        });
    }
    update(id, body, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return this.client.fetch(`/admin/users/${id}`, {
                method: "POST",
                headers,
                body,
                query
            });
        });
    }
    list(queryParams, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return this.client.fetch(`/admin/users`, {
                headers,
                query: queryParams
            });
        });
    }
    retrieve(id, query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return this.client.fetch(`/admin/users/${id}`, {
                query,
                headers
            });
        });
    }
    delete(id, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return this.client.fetch(`/admin/users/${id}`, {
                method: "DELETE",
                headers
            });
        });
    }
    me(query, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return this.client.fetch(`/admin/users/me`, {
                query,
                headers
            });
        });
    }
} //# sourceMappingURL=user.js.map
}}),
"[project]/node_modules/@medusajs/js-sdk/dist/esm/admin/workflow-execution.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "WorkflowExecution": (()=>WorkflowExecution)
});
var __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
class WorkflowExecution {
    /**
     * @ignore
     */ constructor(client){
        this.client = client;
    }
    list(queryParams, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/workflows-executions`, {
                query: queryParams,
                headers
            });
        });
    }
    retrieve(id, headers) {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.client.fetch(`/admin/workflows-executions/${id}`, {
                headers
            });
        });
    }
} //# sourceMappingURL=workflow-execution.js.map
}}),
"[project]/node_modules/@medusajs/js-sdk/dist/esm/admin/index.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "Admin": (()=>Admin)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$medusajs$2f$js$2d$sdk$2f$dist$2f$esm$2f$admin$2f$api$2d$key$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@medusajs/js-sdk/dist/esm/admin/api-key.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$medusajs$2f$js$2d$sdk$2f$dist$2f$esm$2f$admin$2f$campaign$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@medusajs/js-sdk/dist/esm/admin/campaign.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$medusajs$2f$js$2d$sdk$2f$dist$2f$esm$2f$admin$2f$claim$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@medusajs/js-sdk/dist/esm/admin/claim.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$medusajs$2f$js$2d$sdk$2f$dist$2f$esm$2f$admin$2f$currency$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@medusajs/js-sdk/dist/esm/admin/currency.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$medusajs$2f$js$2d$sdk$2f$dist$2f$esm$2f$admin$2f$customer$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@medusajs/js-sdk/dist/esm/admin/customer.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$medusajs$2f$js$2d$sdk$2f$dist$2f$esm$2f$admin$2f$customer$2d$group$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@medusajs/js-sdk/dist/esm/admin/customer-group.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$medusajs$2f$js$2d$sdk$2f$dist$2f$esm$2f$admin$2f$exchange$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@medusajs/js-sdk/dist/esm/admin/exchange.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$medusajs$2f$js$2d$sdk$2f$dist$2f$esm$2f$admin$2f$fulfillment$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@medusajs/js-sdk/dist/esm/admin/fulfillment.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$medusajs$2f$js$2d$sdk$2f$dist$2f$esm$2f$admin$2f$fulfillment$2d$provider$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@medusajs/js-sdk/dist/esm/admin/fulfillment-provider.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$medusajs$2f$js$2d$sdk$2f$dist$2f$esm$2f$admin$2f$fulfillment$2d$set$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@medusajs/js-sdk/dist/esm/admin/fulfillment-set.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$medusajs$2f$js$2d$sdk$2f$dist$2f$esm$2f$admin$2f$inventory$2d$item$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@medusajs/js-sdk/dist/esm/admin/inventory-item.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$medusajs$2f$js$2d$sdk$2f$dist$2f$esm$2f$admin$2f$invite$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@medusajs/js-sdk/dist/esm/admin/invite.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$medusajs$2f$js$2d$sdk$2f$dist$2f$esm$2f$admin$2f$notification$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@medusajs/js-sdk/dist/esm/admin/notification.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$medusajs$2f$js$2d$sdk$2f$dist$2f$esm$2f$admin$2f$order$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@medusajs/js-sdk/dist/esm/admin/order.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$medusajs$2f$js$2d$sdk$2f$dist$2f$esm$2f$admin$2f$order$2d$edit$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@medusajs/js-sdk/dist/esm/admin/order-edit.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$medusajs$2f$js$2d$sdk$2f$dist$2f$esm$2f$admin$2f$payment$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@medusajs/js-sdk/dist/esm/admin/payment.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$medusajs$2f$js$2d$sdk$2f$dist$2f$esm$2f$admin$2f$payment$2d$collection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@medusajs/js-sdk/dist/esm/admin/payment-collection.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$medusajs$2f$js$2d$sdk$2f$dist$2f$esm$2f$admin$2f$price$2d$list$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@medusajs/js-sdk/dist/esm/admin/price-list.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$medusajs$2f$js$2d$sdk$2f$dist$2f$esm$2f$admin$2f$price$2d$preference$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@medusajs/js-sdk/dist/esm/admin/price-preference.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$medusajs$2f$js$2d$sdk$2f$dist$2f$esm$2f$admin$2f$product$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@medusajs/js-sdk/dist/esm/admin/product.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$medusajs$2f$js$2d$sdk$2f$dist$2f$esm$2f$admin$2f$product$2d$category$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@medusajs/js-sdk/dist/esm/admin/product-category.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$medusajs$2f$js$2d$sdk$2f$dist$2f$esm$2f$admin$2f$product$2d$collection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@medusajs/js-sdk/dist/esm/admin/product-collection.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$medusajs$2f$js$2d$sdk$2f$dist$2f$esm$2f$admin$2f$product$2d$tag$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@medusajs/js-sdk/dist/esm/admin/product-tag.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$medusajs$2f$js$2d$sdk$2f$dist$2f$esm$2f$admin$2f$product$2d$type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@medusajs/js-sdk/dist/esm/admin/product-type.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$medusajs$2f$js$2d$sdk$2f$dist$2f$esm$2f$admin$2f$product$2d$variant$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@medusajs/js-sdk/dist/esm/admin/product-variant.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$medusajs$2f$js$2d$sdk$2f$dist$2f$esm$2f$admin$2f$promotion$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@medusajs/js-sdk/dist/esm/admin/promotion.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$medusajs$2f$js$2d$sdk$2f$dist$2f$esm$2f$admin$2f$refund$2d$reasons$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@medusajs/js-sdk/dist/esm/admin/refund-reasons.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$medusajs$2f$js$2d$sdk$2f$dist$2f$esm$2f$admin$2f$region$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@medusajs/js-sdk/dist/esm/admin/region.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$medusajs$2f$js$2d$sdk$2f$dist$2f$esm$2f$admin$2f$reservation$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@medusajs/js-sdk/dist/esm/admin/reservation.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$medusajs$2f$js$2d$sdk$2f$dist$2f$esm$2f$admin$2f$return$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@medusajs/js-sdk/dist/esm/admin/return.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$medusajs$2f$js$2d$sdk$2f$dist$2f$esm$2f$admin$2f$return$2d$reason$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@medusajs/js-sdk/dist/esm/admin/return-reason.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$medusajs$2f$js$2d$sdk$2f$dist$2f$esm$2f$admin$2f$sales$2d$channel$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@medusajs/js-sdk/dist/esm/admin/sales-channel.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$medusajs$2f$js$2d$sdk$2f$dist$2f$esm$2f$admin$2f$shipping$2d$option$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@medusajs/js-sdk/dist/esm/admin/shipping-option.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$medusajs$2f$js$2d$sdk$2f$dist$2f$esm$2f$admin$2f$shipping$2d$profile$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@medusajs/js-sdk/dist/esm/admin/shipping-profile.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$medusajs$2f$js$2d$sdk$2f$dist$2f$esm$2f$admin$2f$stock$2d$location$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@medusajs/js-sdk/dist/esm/admin/stock-location.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$medusajs$2f$js$2d$sdk$2f$dist$2f$esm$2f$admin$2f$store$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@medusajs/js-sdk/dist/esm/admin/store.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$medusajs$2f$js$2d$sdk$2f$dist$2f$esm$2f$admin$2f$tax$2d$rate$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@medusajs/js-sdk/dist/esm/admin/tax-rate.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$medusajs$2f$js$2d$sdk$2f$dist$2f$esm$2f$admin$2f$tax$2d$region$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@medusajs/js-sdk/dist/esm/admin/tax-region.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$medusajs$2f$js$2d$sdk$2f$dist$2f$esm$2f$admin$2f$upload$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@medusajs/js-sdk/dist/esm/admin/upload.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$medusajs$2f$js$2d$sdk$2f$dist$2f$esm$2f$admin$2f$user$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@medusajs/js-sdk/dist/esm/admin/user.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$medusajs$2f$js$2d$sdk$2f$dist$2f$esm$2f$admin$2f$workflow$2d$execution$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@medusajs/js-sdk/dist/esm/admin/workflow-execution.js [app-ssr] (ecmascript)");
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
class Admin {
    constructor(client){
        this.invite = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$medusajs$2f$js$2d$sdk$2f$dist$2f$esm$2f$admin$2f$invite$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Invite"](client);
        this.customer = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$medusajs$2f$js$2d$sdk$2f$dist$2f$esm$2f$admin$2f$customer$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Customer"](client);
        this.productCollection = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$medusajs$2f$js$2d$sdk$2f$dist$2f$esm$2f$admin$2f$product$2d$collection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ProductCollection"](client);
        this.productCategory = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$medusajs$2f$js$2d$sdk$2f$dist$2f$esm$2f$admin$2f$product$2d$category$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ProductCategory"](client);
        this.priceList = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$medusajs$2f$js$2d$sdk$2f$dist$2f$esm$2f$admin$2f$price$2d$list$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PriceList"](client);
        this.pricePreference = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$medusajs$2f$js$2d$sdk$2f$dist$2f$esm$2f$admin$2f$price$2d$preference$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PricePreference"](client);
        this.product = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$medusajs$2f$js$2d$sdk$2f$dist$2f$esm$2f$admin$2f$product$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Product"](client);
        this.productType = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$medusajs$2f$js$2d$sdk$2f$dist$2f$esm$2f$admin$2f$product$2d$type$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ProductType"](client);
        this.upload = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$medusajs$2f$js$2d$sdk$2f$dist$2f$esm$2f$admin$2f$upload$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Upload"](client);
        this.region = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$medusajs$2f$js$2d$sdk$2f$dist$2f$esm$2f$admin$2f$region$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Region"](client);
        this.returnReason = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$medusajs$2f$js$2d$sdk$2f$dist$2f$esm$2f$admin$2f$return$2d$reason$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ReturnReason"](client);
        this.stockLocation = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$medusajs$2f$js$2d$sdk$2f$dist$2f$esm$2f$admin$2f$stock$2d$location$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["StockLocation"](client);
        this.salesChannel = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$medusajs$2f$js$2d$sdk$2f$dist$2f$esm$2f$admin$2f$sales$2d$channel$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["SalesChannel"](client);
        this.fulfillmentSet = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$medusajs$2f$js$2d$sdk$2f$dist$2f$esm$2f$admin$2f$fulfillment$2d$set$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["FulfillmentSet"](client);
        this.fulfillment = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$medusajs$2f$js$2d$sdk$2f$dist$2f$esm$2f$admin$2f$fulfillment$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Fulfillment"](client);
        this.fulfillmentProvider = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$medusajs$2f$js$2d$sdk$2f$dist$2f$esm$2f$admin$2f$fulfillment$2d$provider$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["FulfillmentProvider"](client);
        this.shippingOption = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$medusajs$2f$js$2d$sdk$2f$dist$2f$esm$2f$admin$2f$shipping$2d$option$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ShippingOption"](client);
        this.shippingProfile = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$medusajs$2f$js$2d$sdk$2f$dist$2f$esm$2f$admin$2f$shipping$2d$profile$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ShippingProfile"](client);
        this.inventoryItem = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$medusajs$2f$js$2d$sdk$2f$dist$2f$esm$2f$admin$2f$inventory$2d$item$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["InventoryItem"](client);
        this.notification = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$medusajs$2f$js$2d$sdk$2f$dist$2f$esm$2f$admin$2f$notification$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Notification"](client);
        this.order = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$medusajs$2f$js$2d$sdk$2f$dist$2f$esm$2f$admin$2f$order$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Order"](client);
        this.orderEdit = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$medusajs$2f$js$2d$sdk$2f$dist$2f$esm$2f$admin$2f$order$2d$edit$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["OrderEdit"](client);
        this.return = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$medusajs$2f$js$2d$sdk$2f$dist$2f$esm$2f$admin$2f$return$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Return"](client);
        this.claim = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$medusajs$2f$js$2d$sdk$2f$dist$2f$esm$2f$admin$2f$claim$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Claim"](client);
        this.taxRate = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$medusajs$2f$js$2d$sdk$2f$dist$2f$esm$2f$admin$2f$tax$2d$rate$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["TaxRate"](client);
        this.taxRegion = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$medusajs$2f$js$2d$sdk$2f$dist$2f$esm$2f$admin$2f$tax$2d$region$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["TaxRegion"](client);
        this.store = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$medusajs$2f$js$2d$sdk$2f$dist$2f$esm$2f$admin$2f$store$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Store"](client);
        this.productTag = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$medusajs$2f$js$2d$sdk$2f$dist$2f$esm$2f$admin$2f$product$2d$tag$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ProductTag"](client);
        this.user = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$medusajs$2f$js$2d$sdk$2f$dist$2f$esm$2f$admin$2f$user$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["User"](client);
        this.currency = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$medusajs$2f$js$2d$sdk$2f$dist$2f$esm$2f$admin$2f$currency$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Currency"](client);
        this.payment = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$medusajs$2f$js$2d$sdk$2f$dist$2f$esm$2f$admin$2f$payment$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Payment"](client);
        this.productVariant = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$medusajs$2f$js$2d$sdk$2f$dist$2f$esm$2f$admin$2f$product$2d$variant$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ProductVariant"](client);
        this.refundReason = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$medusajs$2f$js$2d$sdk$2f$dist$2f$esm$2f$admin$2f$refund$2d$reasons$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["RefundReason"](client);
        this.exchange = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$medusajs$2f$js$2d$sdk$2f$dist$2f$esm$2f$admin$2f$exchange$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Exchange"](client);
        this.paymentCollection = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$medusajs$2f$js$2d$sdk$2f$dist$2f$esm$2f$admin$2f$payment$2d$collection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PaymentCollection"](client);
        this.apiKey = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$medusajs$2f$js$2d$sdk$2f$dist$2f$esm$2f$admin$2f$api$2d$key$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ApiKey"](client);
        this.workflowExecution = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$medusajs$2f$js$2d$sdk$2f$dist$2f$esm$2f$admin$2f$workflow$2d$execution$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["WorkflowExecution"](client);
        this.reservation = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$medusajs$2f$js$2d$sdk$2f$dist$2f$esm$2f$admin$2f$reservation$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"](client);
        this.customerGroup = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$medusajs$2f$js$2d$sdk$2f$dist$2f$esm$2f$admin$2f$customer$2d$group$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["CustomerGroup"](client);
        this.promotion = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$medusajs$2f$js$2d$sdk$2f$dist$2f$esm$2f$admin$2f$promotion$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Promotion"](client);
        this.campaign = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$medusajs$2f$js$2d$sdk$2f$dist$2f$esm$2f$admin$2f$campaign$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Campaign"](client);
    }
} //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@medusajs/js-sdk/dist/esm/auth/index.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "Auth": (()=>Auth)
});
var __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
class Auth {
    constructor(client, config){
        /**
         * This method is used to retrieve a registration JWT token for a user, customer, or custom actor type. It sends a request to the
         * [Retrieve Registration Token API route](https://docs.medusajs.com/api/store#auth_postactor_typeauth_provider_register).
         *
         * @param actor - The actor type. For example, `user` for admin user, or `customer` for customer.
         * @param method - The authentication provider to use. For example, `emailpass` or `google`.
         * @param payload - The data to pass in the request's body for authentication. When using the `emailpass` provider,
         * you pass the email and password.
         * @returns The JWT token used for registration later.
         *
         * @tags auth
         *
         * @example
         * sdk.auth.register(
         *   "customer",
         *   "emailpass",
         *   {
         *     email: "customer@gmail.com",
         *     password: "supersecret"
         *   }
         * ).then((token) => {
         *   console.log(token)
         * })
         */ this.register = (actor, method, payload)=>__awaiter(this, void 0, void 0, function*() {
                const { token } = yield this.client.fetch(`/auth/${actor}/${method}/register`, {
                    method: "POST",
                    body: payload
                });
                this.client.setToken(token);
                return token;
            });
        /**
         * This method retrieves the JWT authenticated token for an admin user, customer, or custom
         * actor type. It sends a request to the [Authenticate API Route](https://docs.medusajs.com/api/admin#auth_postactor_typeauth_provider).
         *
         * If the `auth.type` of the SDK is set to `session`, this method will also send a request to the
         * [Set Authentication Session API route](https://docs.medusajs.com/api/admin#auth_postsession).
         *
         * Subsequent requests using the SDK will automatically have the necessary authentication headers / session
         * set.
         *
         * @param actor - The actor type. For example, `user` for admin user, or `customer` for customer.
         * @param method - The authentication provider to use. For example, `emailpass` or `google`.
         * @param payload - The data to pass in the request's body for authentication. When using the `emailpass` provider,
         * you pass the email and password.
         * @returns The authentication JWT token
         *
         * @tags auth
         *
         * @example
         * sdk.auth.login(
         *   "customer",
         *   "emailpass",
         *   {
         *     email: "customer@gmail.com",
         *     password: "supersecret"
         *   }
         * ).then((token) => {
         *   console.log(token)
         * })
         */ this.login = (actor, method, payload)=>__awaiter(this, void 0, void 0, function*() {
                // There will either be token or location returned from the backend.
                const { token, location } = yield this.client.fetch(`/auth/${actor}/${method}`, {
                    method: "POST",
                    body: payload
                });
                // In the case of an oauth login, we return the redirect location to the caller.
                // They can decide if they do an immediate redirect or put it in an <a> tag.
                if (location) {
                    return {
                        location
                    };
                }
                yield this.setToken_(token);
                return token;
            });
        /**
         * This method is used to validate an Oauth callback from a third-party service, such as Google, for an admin user, customer, or custom actor types.
         * It sends a request to the [Validate Authentication Callback](https://docs.medusajs.com/api/admin#auth_postactor_typeauth_providercallback).
         *
         * @param actor - The actor type. For example, `user` for admin user, or `customer` for customer.
         * @param method - The authentication provider to use. For example, `google`.
         * @param query - The query parameters from the Oauth callback, which should be passed to the API route. This includes query parameters like
         * `code` and `state`.
         * @returns The authentication JWT token
         *
         * @tags auth
         *
         * @example
         * sdk.auth.callback(
         *   "customer",
         *   "google",
         *   {
         *     code: "123",
         *     state: "456"
         *   }
         * ).then((token) => {
         *   console.log(token)
         * })
         *
         *
         * @privateRemarks
         * The callback expects all query parameters from the Oauth callback to be passed to
         * the backend, and the provider is in charge of parsing and validating them
         */ this.callback = (actor, method, query)=>__awaiter(this, void 0, void 0, function*() {
                const { token } = yield this.client.fetch(`/auth/${actor}/${method}/callback`, {
                    method: "GET",
                    query
                });
                yield this.setToken_(token);
                return token;
            });
        /**
         * This method refreshes a JWT authentication token, which is useful after validating the Oauth callback
         * with {@link callback}. It sends a request to the [Refresh Authentication Token API route](https://docs.medusajs.com/api/admin#auth_postadminauthtokenrefresh).
         *
         * @returns The refreshed JWT authentication token.
         *
         * @tags auth
         *
         * @example
         * sdk.auth.refresh()
         * .then((token) => {
         *   console.log(token)
         * })
         */ this.refresh = ()=>__awaiter(this, void 0, void 0, function*() {
                const { token } = yield this.client.fetch("/auth/token/refresh", {
                    method: "POST"
                });
                // Putting the token in session after refreshing is only useful when the new token has updated info (eg. actor_id).
                // Ideally we don't use the full JWT in session as key, but just store a pseudorandom key that keeps the rest of the auth context as value.
                yield this.setToken_(token);
                return token;
            });
        /**
         * This method deletes the authentication session of the currently logged-in user to log them out.
         * It sends a request to the [Delete Authentication Session API route](https://docs.medusajs.com/api/admin#auth_deletesession).
         *
         * @tags auth
         *
         * @example
         * sdk.auth.logout()
         * .then(() => {
         *   // user is logged out
         * })
         */ this.logout = ()=>__awaiter(this, void 0, void 0, function*() {
                var _a, _b;
                if (((_b = (_a = this.config) === null || _a === void 0 ? void 0 : _a.auth) === null || _b === void 0 ? void 0 : _b.type) === "session") {
                    yield this.client.fetch("/auth/session", {
                        method: "DELETE"
                    });
                }
                this.client.clearToken();
            });
        /**
         * This method requests a reset password token for an admin user, customer, or custom actor type.
         * It sends a request to the [Generate Reset Password Token API route](https://docs.medusajs.com/api/admin#auth_postactor_typeauth_providerresetpassword).
         *
         * To reset the password later using the token delivered to the user, use the {@link updateProvider} method.
         *
         * Related guide: [How to allow customers to reset their passwords in a storefront](https://docs.medusajs.com/resources/storefront-development/customers/reset-password).
         *
         * @param actor - The actor type. For example, `user` for admin user, or `customer` for customer.
         * @param provider - The authentication provider to use. For example, `emailpass`.
         * @param body - The data required to identify the user.
         *
         * @tags auth
         *
         * @example
         * sdk.auth.resetPassword(
         *   "customer",
         *   "emailpass",
         *   {
         *     identifier: "customer@gmail.com"
         *   }
         * )
         * .then(() => {
         *   // user receives token
         * })
         */ this.resetPassword = (actor, provider, body)=>__awaiter(this, void 0, void 0, function*() {
                yield this.client.fetch(`/auth/${actor}/${provider}/reset-password`, {
                    method: "POST",
                    body,
                    headers: {
                        accept: "text/plain"
                    }
                });
            });
        /**
         * This method is used to update user-related data authentication data.
         *
         * More specifically, use this method when updating the password of an admin user, customer, or
         * custom actor type after requesting to reset their password with {@link resetPassword}.
         *
         * This method sends a request to [this API route](https://docs.medusajs.com/api/admin#auth_postactor_typeauth_providerupdate).
         *
         * Related guide: [How to allow customers to reset their passwords in a storefront](https://docs.medusajs.com/resources/storefront-development/customers/reset-password).
         *
         * @param actor - The actor type. For example, `user` for admin user, or `customer` for customer.
         * @param provider - The authentication provider to use. For example, `emailpass`.
         * @param body - The data necessary to update the user's authentication data. When resetting the user's password,
         * send the `password` property.
         *
         * @tags auth
         *
         * @example
         * sdk.auth.updateProvider(
         *   "customer",
         *   "emailpass",
         *   {
         *     password: "supersecret"
         *   },
         *   token
         * )
         * .then(() => {
         *   // password updated
         * })
         */ this.updateProvider = (actor, provider, body, token)=>__awaiter(this, void 0, void 0, function*() {
                yield this.client.fetch(`/auth/${actor}/${provider}/update?token=${token}`, {
                    method: "POST",
                    body
                });
            });
        /**
         * @ignore
         */ this.setToken_ = (token)=>__awaiter(this, void 0, void 0, function*() {
                var _a, _b;
                // By default we just set the token in the configured storage, if configured to use sessions we convert it into session storage instead.
                if (((_b = (_a = this.config) === null || _a === void 0 ? void 0 : _a.auth) === null || _b === void 0 ? void 0 : _b.type) === "session") {
                    yield this.client.fetch("/auth/session", {
                        method: "POST",
                        headers: {
                            Authorization: `Bearer ${token}`
                        }
                    });
                } else {
                    this.client.setToken(token);
                }
            });
        this.client = client;
        this.config = config;
    }
} //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@medusajs/js-sdk/dist/esm/client.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "Client": (()=>Client),
    "FetchError": (()=>FetchError),
    "PUBLISHABLE_KEY_HEADER": (()=>PUBLISHABLE_KEY_HEADER)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$fetch$2d$event$2d$stream$2f$esm$2f$mod$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/fetch-event-stream/esm/mod.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$qs$2f$lib$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/qs/lib/index.js [app-ssr] (ecmascript)");
var __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
;
;
const PUBLISHABLE_KEY_HEADER = "x-publishable-api-key";
// We want to explicitly retrieve the base URL instead of relying on relative paths that differ in behavior between browsers.
const getBaseUrl = (passedBaseUrl)=>{
    if (typeof window === "undefined") {
        return passedBaseUrl;
    }
    // If the passed base URL is empty or "/", we use the current origin from the browser.
    if (passedBaseUrl === "" || passedBaseUrl === "/") {
        return window.location.origin;
    }
    return passedBaseUrl;
};
const hasStorage = (storage)=>{
    if (typeof window !== "undefined") {
        return storage in window;
    }
    return false;
};
const toBase64 = (str)=>{
    if (typeof window !== "undefined") {
        return window.btoa(str);
    }
    return Buffer.from(str).toString("base64");
};
const sanitizeHeaders = (headers)=>{
    return Object.assign(Object.assign({}, Object.fromEntries(headers.entries())), {
        authorization: "<REDACTED>"
    });
};
const normalizeRequest = (init, headers, config)=>{
    var _a, _b, _c;
    let body = init === null || init === void 0 ? void 0 : init.body;
    if (body && ((_a = headers.get("content-type")) === null || _a === void 0 ? void 0 : _a.includes("application/json"))) {
        body = JSON.stringify(body);
    }
    // "credentials" is not supported in some environments (eg. on the backend), and it might throw an exception if the field is set.
    const isFetchCredentialsSupported = "credentials" in Request.prototype;
    // Oftentimes the server will be on a different origin, so we want to default to include
    // Note that the cookie's SameSite attribute takes precedence over this setting.
    const credentials = ((_b = config.auth) === null || _b === void 0 ? void 0 : _b.type) === "session" ? ((_c = config.auth) === null || _c === void 0 ? void 0 : _c.fetchCredentials) || "include" : "omit";
    return Object.assign(Object.assign(Object.assign({}, init), {
        headers,
        credentials: isFetchCredentialsSupported ? credentials : undefined
    }), body ? {
        body: body
    } : {});
};
const normalizeResponse = (resp, reqHeaders)=>__awaiter(void 0, void 0, void 0, function*() {
        var _a, _b;
        if (resp.status >= 300) {
            const jsonError = yield resp.json().catch(()=>({}));
            throw new FetchError((_a = jsonError.message) !== null && _a !== void 0 ? _a : resp.statusText, resp.statusText, resp.status);
        }
        // If we requested JSON, we try to parse the response. Otherwise, we return the raw response.
        const isJsonRequest = (_b = reqHeaders.get("accept")) === null || _b === void 0 ? void 0 : _b.includes("application/json");
        return isJsonRequest ? yield resp.json() : resp;
    });
class FetchError extends Error {
    constructor(message, statusText, status){
        super(message);
        this.statusText = statusText;
        this.status = status;
    }
}
class Client {
    constructor(config){
        this.DEFAULT_JWT_STORAGE_KEY = "medusa_auth_token";
        this.token = "";
        this.getApiKeyHeader_ = ()=>{
            return this.config.apiKey ? {
                Authorization: "Basic " + toBase64(this.config.apiKey + ":")
            } : {};
        };
        this.getPublishableKeyHeader_ = ()=>{
            return this.config.publishableKey ? {
                [PUBLISHABLE_KEY_HEADER]: this.config.publishableKey
            } : {};
        };
        this.getJwtHeader_ = ()=>{
            var _a;
            // If the user has requested for session storage, we don't want to send the JWT token in the header.
            if (((_a = this.config.auth) === null || _a === void 0 ? void 0 : _a.type) === "session") {
                return {};
            }
            const token = this.getToken_();
            return token ? {
                Authorization: `Bearer ${token}`
            } : {};
        };
        this.setToken_ = (token)=>{
            const { storageMethod, storageKey } = this.getTokenStorageInfo_();
            switch(storageMethod){
                case "local":
                    {
                        window.localStorage.setItem(storageKey, token);
                        break;
                    }
                case "session":
                    {
                        window.sessionStorage.setItem(storageKey, token);
                        break;
                    }
                case "memory":
                    {
                        this.token = token;
                        break;
                    }
            }
        };
        this.getToken_ = ()=>{
            const { storageMethod, storageKey } = this.getTokenStorageInfo_();
            switch(storageMethod){
                case "local":
                    {
                        return window.localStorage.getItem(storageKey);
                    }
                case "session":
                    {
                        return window.sessionStorage.getItem(storageKey);
                    }
                case "memory":
                    {
                        return this.token;
                    }
            }
            return;
        };
        this.getTokenStorageInfo_ = ()=>{
            var _a, _b;
            const hasLocal = hasStorage("localStorage");
            const hasSession = hasStorage("sessionStorage");
            const storageMethod = ((_a = this.config.auth) === null || _a === void 0 ? void 0 : _a.jwtTokenStorageMethod) || (hasLocal ? "local" : "nostore");
            const storageKey = ((_b = this.config.auth) === null || _b === void 0 ? void 0 : _b.jwtTokenStorageKey) || this.DEFAULT_JWT_STORAGE_KEY;
            if (!hasLocal && storageMethod === "local") {
                throw new Error("Local JWT storage is only available in the browser");
            }
            if (!hasSession && storageMethod === "session") {
                throw new Error("Session JWT storage is only available in the browser");
            }
            return {
                storageMethod,
                storageKey
            };
        };
        this.config = Object.assign(Object.assign({}, config), {
            baseUrl: getBaseUrl(config.baseUrl)
        });
        const logger = config.logger || {
            error: console.error,
            warn: console.warn,
            info: console.info,
            debug: console.debug
        };
        this.logger = Object.assign(Object.assign({}, logger), {
            debug: config.debug ? logger.debug : ()=>{}
        });
        this.fetch_ = this.initClient();
    }
    /**
     * `fetch` closely follows (and uses under the hood) the native `fetch` API. There are, however, few key differences:
     * - Non 2xx statuses throw a `FetchError` with the status code as the `status` property, rather than resolving the promise
     * - You can pass `body` and `query` as objects, and they will be encoded and stringified.
     * - The response gets parsed as JSON if the `accept` header is set to `application/json`, otherwise the raw Response object is returned
     *
     * Since the response is dynamically determined, we cannot know if it is JSON or not. Therefore, it is important to pass `Response` as the return type
     *
     * @param input: FetchInput
     * @param init: FetchArgs
     * @returns Promise<T>
     */ fetch(input, init) {
        return this.fetch_(input, init);
    }
    /**
     * `fetchStream` is a helper method to deal with server-sent events. It returns an object with a stream and an abort function.
     * It follows a very similar interface to `fetch`, with the return value being an async generator.
     * The stream is an async generator that yields `ServerSentEventMessage` objects, which contains the event name, stringified data, and few other properties.
     * The caller is responsible for handling `disconnect` events and aborting the stream. The caller is also responsible for parsing the data field.
     *
     * @param input: FetchInput
     * @param init: FetchArgs
     * @returns FetchStreamResponse
     */ fetchStream(input, init) {
        return __awaiter(this, void 0, void 0, function*() {
            const abortController = new AbortController();
            const abortFunc = abortController.abort.bind(abortController);
            let res = yield this.fetch_(input, Object.assign(Object.assign({}, init), {
                signal: abortController.signal,
                headers: Object.assign(Object.assign({}, init === null || init === void 0 ? void 0 : init.headers), {
                    accept: "text/event-stream"
                })
            }));
            if (res.ok) {
                return {
                    stream: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$fetch$2d$event$2d$stream$2f$esm$2f$mod$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["events"])(res, abortController.signal),
                    abort: abortFunc
                };
            }
            return {
                stream: null,
                abort: abortFunc
            };
        });
    }
    setToken(token) {
        this.setToken_(token);
    }
    clearToken() {
        this.clearToken_();
    }
    clearToken_() {
        const { storageMethod, storageKey } = this.getTokenStorageInfo_();
        switch(storageMethod){
            case "local":
                {
                    window.localStorage.removeItem(storageKey);
                    break;
                }
            case "session":
                {
                    window.sessionStorage.removeItem(storageKey);
                    break;
                }
            case "memory":
                {
                    this.token = "";
                    break;
                }
        }
    }
    initClient() {
        const defaultHeaders = new Headers(Object.assign(Object.assign({
            "content-type": "application/json",
            accept: "application/json"
        }, this.getApiKeyHeader_()), this.getPublishableKeyHeader_()));
        this.logger.debug("Initiating Medusa client with default headers:\n", `${JSON.stringify(sanitizeHeaders(defaultHeaders), null, 2)}\n`);
        return (input, init)=>__awaiter(this, void 0, void 0, function*() {
                // We always want to fetch the up-to-date JWT token before firing off a request.
                const headers = new Headers(defaultHeaders);
                const customHeaders = Object.assign(Object.assign(Object.assign({}, this.config.globalHeaders), this.getJwtHeader_()), init === null || init === void 0 ? void 0 : init.headers);
                // We use `headers.set` in order to ensure headers are overwritten in a case-insensitive manner.
                Object.entries(customHeaders).forEach(([key, value])=>{
                    if (value === null) {
                        headers.delete(key);
                    } else {
                        headers.set(key, value);
                    }
                });
                let normalizedInput = input;
                if (input instanceof URL || typeof input === "string") {
                    const baseUrl = new URL(this.config.baseUrl);
                    const fullPath = `${baseUrl.pathname.replace(/\/$/, "")}/${input.toString().replace(/^\//, "")}`;
                    normalizedInput = new URL(fullPath, baseUrl.origin);
                    if (init === null || init === void 0 ? void 0 : init.query) {
                        const params = Object.fromEntries(normalizedInput.searchParams.entries());
                        const stringifiedQuery = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$qs$2f$lib$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].stringify(Object.assign(Object.assign({}, params), init.query));
                        normalizedInput.search = stringifiedQuery;
                    }
                }
                this.logger.debug("Performing request to:\n", `URL: ${normalizedInput.toString()}\n`, `Headers: ${JSON.stringify(sanitizeHeaders(headers), null, 2)}\n`);
                // Any non-request errors (eg. invalid JSON in the response) will be thrown as-is.
                return yield fetch(normalizedInput, normalizeRequest(init, headers, this.config)).then((resp)=>{
                    this.logger.debug(`Received response with status ${resp.status}\n`);
                    return normalizeResponse(resp, headers);
                });
            });
    }
} //# sourceMappingURL=client.js.map
}}),
"[project]/node_modules/@medusajs/js-sdk/dist/esm/store/index.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "Store": (()=>Store)
});
var __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
class Store {
    /**
     * @ignore
     */ constructor(client){
        /**
         * @tags region
         */ this.region = {
            /**
             * This method retrieves the paginated list of regions in the store. It sends a request to the
             * [List Regions API route](https://docs.medusajs.com/api/store#regions_getregions).
             *
             * Related guide: [How to list regions in a storefront](https://docs.medusajs.com/resources/storefront-development/regions/list).
             *
             * @param query - Filters and pagination configurations.
             * @param headers - Headers to pass in the request
             * @returns The paginated list of regions.
             *
             * @example
             * To retrieve the list of regions:
             *
             * ```ts
             * sdk.store.region.list()
             * .then(({ regions, count, limit, offset }) => {
             *   console.log(regions)
             * })
             * ```
             *
             * To configure the pagination, pass the `limit` and `offset` query parameters.
             *
             * For example, to retrieve only 10 items and skip 10 items:
             *
             * ```ts
             * sdk.store.region.list({
             *   limit: 10,
             *   offset: 10
             * })
             * .then(({ regions, count, limit, offset }) => {
             *   console.log(regions)
             * })
             * ```
             *
             * Using the `fields` query parameter, you can specify the fields and relations to retrieve
             * in each region:
             *
             * ```ts
             * sdk.store.region.list({
             *   fields: "id,*countries"
             * })
             * .then(({ regions, count, limit, offset }) => {
             *   console.log(regions)
             * })
             * ```
             *
             * Learn more about the `fields` property in the [API reference](https://docs.medusajs.com/api/store#select-fields-and-relations).
             */ list: (query, headers)=>__awaiter(this, void 0, void 0, function*() {
                    return this.client.fetch(`/store/regions`, {
                        query,
                        headers
                    });
                }),
            /**
             * This method retrieves a region by its ID. It sends a request to the [Get Region](https://docs.medusajs.com/api/store#regions_getregionsid)
             * API route.
             *
             * Related guide: [Store and retrieve regions in a storefront](https://docs.medusajs.com/resources/storefront-development/regions/store-retrieve-region).
             *
             * @param id - The region's ID.
             * @param query - Configure the fields to retrieve in the region.
             * @param headers - Headers to pass in the request
             * @returns The region.
             *
             * @example
             * To retrieve a region by its ID:
             *
             * ```ts
             * sdk.store.region.retrieve("reg_123")
             * .then(({ region }) => {
             *   console.log(region)
             * })
             * ```
             *
             * To specify the fields and relations to retrieve:
             *
             * ```ts
             * sdk.store.region.retrieve(
             *   "reg_123",
             *   {
             *     fields: "id,*countries"
             *   }
             * )
             * .then(({ region }) => {
             *   console.log(region)
             * })
             * ```
             *
             * Learn more about the `fields` property in the [API reference](https://docs.medusajs.com/api/store#select-fields-and-relations).
             */ retrieve: (id, query, headers)=>__awaiter(this, void 0, void 0, function*() {
                    return this.client.fetch(`/store/regions/${id}`, {
                        query,
                        headers
                    });
                })
        };
        /**
         * @tags product
         */ this.collection = {
            /**
             * This method retrieves a paginated list of product collections. It sends a request to the
             * [List Collections](https://docs.medusajs.com/api/store#collections_getcollections) API route.
             *
             * Related guide: [How to retrieve collections in a storefront](https://docs.medusajs.com/resources/storefront-development/products/collections/list).
             *
             * @param query - Filters and pagination configurations.
             * @param headers - Headers to pass in the request
             * @returns The paginated list of collections.
             *
             * @example
             * To retrieve the list of collections:
             *
             * ```ts
             * sdk.store.collection.list()
             * .then(({ collections, count, limit, offset }) => {
             *   console.log(collections)
             * })
             * ```
             *
             * To configure the pagination, pass the `limit` and `offset` query parameters.
             *
             * For example, to retrieve only 10 items and skip 10 items:
             *
             * ```ts
             * sdk.store.collection.list({
             *   limit: 10,
             *   offset: 10
             * })
             * .then(({ collections, count, limit, offset }) => {
             *   console.log(collections)
             * })
             * ```
             *
             * Using the `fields` query parameter, you can specify the fields and relations to retrieve
             * in each collection:
             *
             * ```ts
             * sdk.store.collection.list({
             *   fields: "id,handle"
             * })
             * .then(({ collections, count, limit, offset }) => {
             *   console.log(collections)
             * })
             * ```
             *
             * Learn more about the `fields` property in the [API reference](https://docs.medusajs.com/api/store#select-fields-and-relations).
             */ list: (query, headers)=>__awaiter(this, void 0, void 0, function*() {
                    return this.client.fetch(`/store/collections`, {
                        query,
                        headers
                    });
                }),
            /**
             * This method retrieves a collection by its ID. It sends a request to the [Get Collection](https://docs.medusajs.com/api/store#collections_getcollectionsid)
             * API route.
             *
             * Related guide: [How to retrieve a collection in a storefront](https://docs.medusajs.com/resources/storefront-development/products/collections/retrieve).
             *
             * @param id - The ID of the collection to retrieve.
             * @param query - Configure the fields to retrieve in the collection.
             * @param headers - Headers to pass in the request
             * @returns The collection.
             *
             * @example
             * To retrieve a collection by its ID:
             *
             * ```ts
             * sdk.store.collection.retrieve("pcol_123")
             * .then(({ collection }) => {
             *   console.log(collection)
             * })
             * ```
             *
             * To specify the fields and relations to retrieve:
             *
             * ```ts
             * sdk.store.collection.retrieve("pcol_123", {
             *   fields: "id,handle"
             * })
             * .then(({ collection }) => {
             *   console.log(collection)
             * })
             * ```
             *
             * Learn more about the `fields` property in the [API reference](https://docs.medusajs.com/api/store#select-fields-and-relations).
             */ retrieve: (id, query, headers)=>__awaiter(this, void 0, void 0, function*() {
                    return this.client.fetch(`/store/collections/${id}`, {
                        query,
                        headers
                    });
                })
        };
        /**
         * @tags product
         */ this.category = {
            /**
             * This method retrieves a paginated list of product categories. It sends a request to the
             * [List Categories](https://docs.medusajs.com/api/store#product-categories_getproductcategories) API route.
             *
             * Related guide: [How to retrieve list of categories in the storefront](https://docs.medusajs.com/resources/storefront-development/products/categories/list).
             *
             * @param query - Filters and pagination configurations.
             * @param headers - Headers to pass in the request.
             * @returns The paginated list of categories.
             *
             * @example
             * To retrieve the list of categories:
             *
             * ```ts
             * sdk.store.category.list()
             * .then(({ product_categories, count, offset, limit }) => {
             *   console.log(product_categories)
             * })
             * ```
             *
             * To configure the pagination, pass the `limit` and `offset` query parameters.
             *
             * For example, to retrieve only 10 items and skip 10 items:
             *
             * ```ts
             * sdk.store.category.list({
             *   limit: 10,
             *   offset: 10
             * })
             * .then(({ product_categories, count, offset, limit }) => {
             *   console.log(product_categories)
             * })
             * ```
             *
             * Using the `fields` query parameter, you can specify the fields and relations to retrieve
             * in each category:
             *
             * ```ts
             * sdk.store.category.list({
             *   fields: "id,*parent_category"
             * })
             * .then(({ product_categories, count, offset, limit }) => {
             *   console.log(product_categories)
             * })
             * ```
             *
             * Learn more about the `fields` property in the [API reference](https://docs.medusajs.com/api/store#select-fields-and-relations).
             */ list: (query, headers)=>__awaiter(this, void 0, void 0, function*() {
                    return this.client.fetch(`/store/product-categories`, {
                        query,
                        headers
                    });
                }),
            /**
             * This method retrieves a category by its ID. It sends a request to the
             * [Retrieve Product Category](https://docs.medusajs.com/api/store#product-categories_getproductcategoriesid).
             *
             * Related guide: [How to retrieve a category in the storefront](https://docs.medusajs.com/resources/storefront-development/products/categories/retrieve).
             *
             * @param id - The ID of the category to retrieve.
             * @param query - Configure the fields to retrieve in the category.
             * @param headers - Headers to pass in the request
             * @returns The category.
             *
             * @example
             * To retrieve a category by its ID:
             *
             * ```ts
             * sdk.store.category.retrieve("pcat_123")
             * .then(({ product_category }) => {
             *   console.log(product_category)
             * })
             * ```
             *
             * To specify the fields and relations to retrieve:
             *
             * ```ts
             * sdk.store.category.retrieve("pcat_123", {
             *   fields: "id,*parent_category"
             * })
             * .then(({ product_category }) => {
             *   console.log(product_category)
             * })
             * ```
             *
             * Learn more about the `fields` property in the [API reference](https://docs.medusajs.com/api/store#select-fields-and-relations).
             */ retrieve: (id, query, headers)=>__awaiter(this, void 0, void 0, function*() {
                    return this.client.fetch(`/store/product-categories/${id}`, {
                        query,
                        headers
                    });
                })
        };
        /**
         * @tags product
         */ this.product = {
            /**
             * This method retrieves a list of products. It sends a request to the
             * [List Products API route](https://docs.medusajs.com/api/store#products_getproducts).
             *
             * Related guides:
             *
             * - [How to list products in a storefront](https://docs.medusajs.com/resources/storefront-development/products/list).
             * - [How to retrieve a product variant's prices in the storefront](https://docs.medusajs.com/resources/storefront-development/products/price)
             *
             * @param query - Filters and pagination configurations.
             * @param headers - Headers to pass in the request.
             * @returns The paginated list of products.
             *
             * @example
             * To retrieve the list of products:
             *
             * ```ts
             * sdk.store.product.list()
             * .then(({ products, count, offset, limit }) => {
             *   console.log(products)
             * })
             * ```
             *
             * To configure the pagination, pass the `limit` and `offset` query parameters.
             *
             * For example, to retrieve only 10 items and skip 10 items:
             *
             * ```ts
             * sdk.store.product.list({
             *   limit: 10,
             *   offset: 10
             * })
             * .then(({ products, count, offset, limit }) => {
             *   console.log(products)
             * })
             * ```
             *
             * Using the `fields` query parameter, you can specify the fields and relations to retrieve
             * in each product:
             *
             * ```ts
             * sdk.store.product.list({
             *   fields: "id,*collection"
             * })
             * .then(({ products, count, offset, limit }) => {
             *   console.log(products)
             * })
             * ```
             *
             * Learn more about the `fields` property in the [API reference](https://docs.medusajs.com/api/store#select-fields-and-relations).
             */ list: (query, headers)=>__awaiter(this, void 0, void 0, function*() {
                    return this.client.fetch(`/store/products`, {
                        query,
                        headers
                    });
                }),
            /**
             * This method is used to retrieve a product by its ID. It sends a request to the
             * [Get Product](https://docs.medusajs.com/api/store#products_getproductsid) API route.
             *
             * Related guides:
             *
             * - [How to retrieve a product in the storefront](https://docs.medusajs.com/resources/storefront-development/products/retrieve).
             * - [How to retrieve a product variant's prices in the storefront](https://docs.medusajs.com/resources/storefront-development/products/price)
             *
             * @param id - The product's ID.
             * @param query - Configure the fields to retrieve in the product.
             * @param headers - Headers to pass in the request
             * @returns The product.
             *
             * @example
             * To retrieve a product by its ID:
             *
             * ```ts
             * sdk.store.product.retrieve("prod_123")
             * .then(({ product }) => {
             *   console.log(product)
             * })
             * ```
             *
             * To specify the fields and relations to retrieve:
             *
             * ```ts
             * sdk.store.product.retrieve("prod_123", {
             *   fields: "id,*collection"
             * })
             * .then(({ product }) => {
             *   console.log(product)
             * })
             * ```
             *
             * Learn more about the `fields` property in the [API reference](https://docs.medusajs.com/api/store#select-fields-and-relations).
             */ retrieve: (id, query, headers)=>__awaiter(this, void 0, void 0, function*() {
                    return this.client.fetch(`/store/products/${id}`, {
                        query,
                        headers
                    });
                })
        };
        /**
         * Related guides: [How to implement carts in the storefront](https://docs.medusajs.com/resources/storefront-development/cart).
         *
         * @tags cart
         */ this.cart = {
            /**
             * This method creates a cart. It sends a request to the [Create Cart](https://docs.medusajs.com/api/store#carts_postcarts)
             * API route.
             *
             * Related guide: [How to create a cart in the storefront](https://docs.medusajs.com/resources/storefront-development/cart/create).
             *
             * @param body - The details of the cart to create.
             * @param query - Configure the fields to retrieve in the cart.
             * @param headers - Headers to pass in the request.
             * @returns The created cart.
             *
             * @example
             * sdk.store.cart.create({
             *   region_id: "reg_123"
             * })
             * .then(({ cart }) => {
             *   console.log(cart)
             * })
             */ create: (body, query, headers)=>__awaiter(this, void 0, void 0, function*() {
                    return this.client.fetch(`/store/carts`, {
                        method: "POST",
                        headers,
                        body,
                        query
                    });
                }),
            /**
             * This method updates a cart. It sends a request to the
             * [Update Cart](https://docs.medusajs.com/api/store#carts_postcartsid) API route.
             *
             * Related guide: [How to update a cart in the storefront](https://docs.medusajs.com/resources/storefront-development/cart/update).
             *
             * @param id - The cart's ID.
             * @param body - The data to update in the cart.
             * @param query - Configure the fields to retrieve in the cart.
             * @param headers - Headers to pass in the request.
             * @returns The updated cart.
             *
             * @example
             * sdk.store.cart.update("cart_123", {
             *   region_id: "reg_123"
             * })
             * .then(({ cart }) => {
             *   console.log(cart)
             * })
             */ update: (id, body, query, headers)=>__awaiter(this, void 0, void 0, function*() {
                    return this.client.fetch(`/store/carts/${id}`, {
                        method: "POST",
                        headers,
                        body,
                        query
                    });
                }),
            /**
             * This method retrieves a cart by its ID. It sends a request to the
             * [Get Cart](https://docs.medusajs.com/api/store#carts_getcartsid) API route.
             *
             * Related guide: [How to retrieve a cart in the storefront](https://docs.medusajs.com/resources/storefront-development/cart/retrieve).
             *
             * @param id - The cart's ID.
             * @param query - Configure the fields to retrieve in the cart.
             * @param headers - Headers to pass in the request.
             * @returns The cart's details.
             *
             * @example
             * To retrieve a cart by its ID:
             *
             * ```ts
             * sdk.store.cart.retrieve("cart_123")
             * .then(({ cart }) => {
             *   console.log(cart)
             * })
             * ```
             *
             * To specify the fields and relations to retrieve:
             *
             * ```ts
             * sdk.store.cart.retrieve("cart_123", {
             *   fields: "id,*items"
             * })
             * .then(({ cart }) => {
             *   console.log(cart)
             * })
             * ```
             *
             * Learn more about the `fields` property in the [API reference](https://docs.medusajs.com/api/store#select-fields-and-relations).
             */ retrieve: (id, query, headers)=>__awaiter(this, void 0, void 0, function*() {
                    return this.client.fetch(`/store/carts/${id}`, {
                        headers,
                        query
                    });
                }),
            /**
             * This methods adds a product variant to the cart as a line item. It sends a request to the
             * [Add Line Item](https://docs.medusajs.com/api/store#carts_postcartsidlineitems) API route.
             *
             * Related guide: [How to manage a cart's line items in the storefront](https://docs.medusajs.com/resources/storefront-development/cart/manage-items).
             *
             * @param cartId - The cart's ID.
             * @param body - The details of the item to add.
             * @param query - Configure the fields to retrieve in the cart.
             * @param headers - Headers to pass in the request.
             * @returns The cart's details.
             *
             * @example
             * sdk.store.cart.createLineItem("cart_123", {
             *   variant_id: "variant_123",
             *   quantity: 1
             * })
             * .then(({ cart }) => {
             *   console.log(cart)
             * })
             */ createLineItem: (cartId, body, query, headers)=>__awaiter(this, void 0, void 0, function*() {
                    return this.client.fetch(`/store/carts/${cartId}/line-items`, {
                        method: "POST",
                        headers,
                        body,
                        query
                    });
                }),
            /**
             * This method updates a line item in a cart. It sends a request to the
             * [Update Line Item](https://docs.medusajs.com/api/store#carts_postcartsidlineitemsline_id) API route.
             *
             * Related guide: [How to manage a cart's line items in the storefront](https://docs.medusajs.com/resources/storefront-development/cart/manage-items).
             *
             * @param cartId - The cart's ID.
             * @param lineItemId - The line item's ID.
             * @param body - The data to update.
             * @param query - Configure the fields to retrieve in the cart.
             * @param headers - Headers to pass in the request.
             * @returns The cart's details.
             *
             * @example
             * sdk.store.cart.updateLineItem(
             *   "cart_123",
             *   "li_123",
             *   {
             *     quantity: 1
             *   }
             * )
             * .then(({ cart }) => {
             *   console.log(cart)
             * })
             */ updateLineItem: (cartId, lineItemId, body, query, headers)=>__awaiter(this, void 0, void 0, function*() {
                    return this.client.fetch(`/store/carts/${cartId}/line-items/${lineItemId}`, {
                        method: "POST",
                        headers,
                        body,
                        query
                    });
                }),
            /**
             * This method deletes a line item from a cart. It sends a request to the
             * [Remove Line Item](https://docs.medusajs.com/api/store#carts_deletecartsidlineitemsline_id) API route.
             *
             * Related guide: [How to manage a cart's line items in the storefront](https://docs.medusajs.com/resources/storefront-development/cart/manage-items).
             *
             * @param cartId - The cart's ID.
             * @param lineItemId - The item's ID.
             * @param headers - Headers to pass in the request.
             * @returns The deletion's details.
             *
             * @example
             * sdk.store.cart.deleteLineItem(
             *   "cart_123",
             *   "li_123"
             * )
             * .then(({ deleted, parent: cart }) => {
             *   console.log(deleted, cart)
             * })
             */ deleteLineItem: (cartId, lineItemId, headers)=>__awaiter(this, void 0, void 0, function*() {
                    return this.client.fetch(`/store/carts/${cartId}/line-items/${lineItemId}`, {
                        method: "DELETE",
                        headers
                    });
                }),
            /**
             * This method adds a shipping method to a cart. It sends a request to
             * the [Add Shipping Method](https://docs.medusajs.com/api/store#carts_postcartsidshippingmethods) API routes.
             *
             * Related guide: [Implement shipping step during checkout](https://docs.medusajs.com/resources/storefront-development/checkout/shipping).
             *
             * @param cartId - The cart's ID.
             * @param body - The shipping method's details.
             * @param query - Configure the fields to retrieve in the cart.
             * @param headers - Headers to pass in the request.
             * @returns The cart's details.
             *
             * @example
             * sdk.store.cart.addShippingMethod("cart_123", {
             *   option_id: "so_123",
             *   data: {
             *     // custom data for fulfillment provider.
             *   }
             * })
             * .then(({ cart }) => {
             *   console.log(cart)
             * })
             */ addShippingMethod: (cartId, body, query, headers)=>__awaiter(this, void 0, void 0, function*() {
                    return this.client.fetch(`/store/carts/${cartId}/shipping-methods`, {
                        method: "POST",
                        headers,
                        body,
                        query
                    });
                }),
            /**
             * This method completes a cart and places the order. It's the last step of the checkout flow.
             * The method sends a request to the [Complete Cart](https://docs.medusajs.com/api/store#carts_postcartsidcomplete)
             * API route.
             *
             * Related guide: [Learn how to complete cart in checkout flow](https://docs.medusajs.com/resources/storefront-development/checkout/complete-cart).
             *
             * @param cartId - The cart's ID.
             * @param query - Configure the fields to retrieve in the created order.
             * @param headers - Headers to pass in the request.
             * @returns The order's details, if it was placed successfully. Otherwise, the cart is returned with an error.
             *
             * @example
             * sdk.store.cart.complete("cart_123")
             * .then((data) => {
             *   if(data.type === "cart") {
             *     // an error occurred
             *     console.log(data.error, data.cart)
             *   } else {
             *     // order placed successfully
             *     console.log(data.order)
             *   }
             * })
             */ complete: (cartId, query, headers)=>__awaiter(this, void 0, void 0, function*() {
                    return this.client.fetch(`/store/carts/${cartId}/complete`, {
                        method: "POST",
                        headers,
                        query
                    });
                }),
            /**
             * This method updates the customer of a cart.
             *
             * @param id - The cart's ID.
             * @param query - Configure the fields to retrieve in the cart.
             * @param headers - Headers to pass in the request.
             * @returns The updated cart.
             *
             * @example
             * sdk.store.cart.transferCart("cart_123")
             * .then(({ cart }) => {
             *   console.log(cart)
             * })
             */ transferCart: (id, query, headers)=>__awaiter(this, void 0, void 0, function*() {
                    return this.client.fetch(`/store/carts/${id}/customer`, {
                        method: "POST",
                        headers,
                        query
                    });
                })
        };
        /**
         * @tags fulfillment
         */ this.fulfillment = {
            /**
             * This method retrieves the list of shipping options for a cart. It sends a request to
             * the [List Shipping Options](https://docs.medusajs.com/api/store#shipping-options_getshippingoptions)
             * API route.
             *
             * Related guide: [Implement shipping step during checkout](https://docs.medusajs.com/resources/storefront-development/checkout/shipping).
             *
             * @param query - The cart's details along with configurations of the fields to retrieve in the options.
             * @param headers - Headers to pass in the request.
             * @returns The shipping options that can be used for the cart.
             *
             * @example
             * sdk.store.fulfillment.listCartOptions({
             *   cart_id: "cart_123"
             * })
             * .then(({ shipping_options }) => {
             *   console.log(shipping_options)
             * })
             */ listCartOptions: (query, headers)=>__awaiter(this, void 0, void 0, function*() {
                    return this.client.fetch(`/store/shipping-options`, {
                        headers,
                        query
                    });
                }),
            calculate: (id, body, query, headers)=>__awaiter(this, void 0, void 0, function*() {
                    return yield this.client.fetch(`/store/shipping-options/${id}/calculate`, {
                        method: "POST",
                        headers,
                        body,
                        query
                    });
                })
        };
        /**
         * @tags payment
         */ this.payment = {
            /**
             * This method retrieves the payment providers available in a region, which is useful during checkout.
             * It sends a request to the [List Payment Providers](https://docs.medusajs.com/api/store#payment-providers_getpaymentproviders)
             * API route.
             *
             * Related guide: [Implement payment step during checkout](https://docs.medusajs.com/resources/storefront-development/checkout/payment).
             *
             * @param query - The filters to apply on the retrieved providers, along with configurations of the
             * fields to retrieve in the options.
             * @param headers - Headers to pass in the request.
             * @returns The list of payment providers.
             *
             * @example
             * To retrieve the list of payment providers for a region:
             *
             * ```ts
             * sdk.store.payment.listPaymentProviders({
             *   region_id: "reg_123"
             * })
             * .then(({ payment_providers, count, offset, limit }) => {
             *   console.log(payment_providers)
             * })
             * ```
             *
             * To configure the pagination, pass the `limit` and `offset` query parameters.
             *
             * For example, to retrieve only 10 items and skip 10 items:
             *
             * ```ts
             * sdk.store.payment.listPaymentProviders({
             *   region_id: "reg_123",
             *   limit: 10,
             *   offset: 10
             * })
             * .then(({ payment_providers, count, offset, limit }) => {
             *   console.log(payment_providers)
             * })
             * ```
             *
             * Using the `fields` query parameter, you can specify the fields and relations to retrieve
             * in each provider:
             *
             * ```ts
             * sdk.store.payment.listPaymentProviders({
             *   region_id: "reg_123",
             *   limit: 10,
             *   offset: 10,
             *   fields: "id"
             * })
             * .then(({ payment_providers, count, offset, limit }) => {
             *   console.log(payment_providers)
             * })
             * ```
             *
             * Learn more about the `fields` property in the [API reference](https://docs.medusajs.com/api/store#select-fields-and-relations).
             */ listPaymentProviders: (query, headers)=>__awaiter(this, void 0, void 0, function*() {
                    return this.client.fetch(`/store/payment-providers`, {
                        headers,
                        query
                    });
                }),
            /**
             * This method creates a payment session of a cart's payment collection, selecting a payment provider.
             * It sends a request to the [Initialize Payment Session](https://docs.medusajs.com/api/store#payment-collections_postpaymentcollectionsidpaymentsessions)
             * API route.
             *
             * If the cart doesn't have a payment collection, a payment collection is created for the cart by
             * sending a request to the [Create Payment Collection](https://docs.medusajs.com/api/store#payment-collections_postpaymentcollections)
             * API route.
             *
             * Related guide: [Implement payment step during checkout](https://docs.medusajs.com/resources/storefront-development/checkout/payment).
             *
             * @param cart - The cart's details.
             * @param body - The payment session's details.
             * @param query - Configure the fields to retrieve in the payment collection.
             * @param headers - Headers to pass in the request.
             * @returns The payment collection's details.
             *
             * @example
             * sdk.store.payment.initiatePaymentSession(
             *   cart, // assuming you already have the cart object.
             *   {
             *     provider_id: "pp_stripe_stripe",
             *     data: {
             *       // any data relevant for the provider.
             *     }
             *   }
             * )
             * .then(({ payment_collection }) => {
             *   console.log(payment_collection)
             * })
             */ initiatePaymentSession: (cart, body, query, headers)=>__awaiter(this, void 0, void 0, function*() {
                    var _a;
                    let paymentCollectionId = (_a = cart.payment_collection) === null || _a === void 0 ? void 0 : _a.id;
                    if (!paymentCollectionId) {
                        const collectionBody = {
                            cart_id: cart.id
                        };
                        paymentCollectionId = (yield this.client.fetch(`/store/payment-collections`, {
                            method: "POST",
                            headers,
                            body: collectionBody
                        })).payment_collection.id;
                    }
                    return this.client.fetch(`/store/payment-collections/${paymentCollectionId}/payment-sessions`, {
                        method: "POST",
                        headers,
                        body,
                        query
                    });
                })
        };
        /**
         * @tags order
         */ this.order = {
            /**
             * This method retrieves a paginated list of orders matching the specified filters. It
             * sends a request to the [List Orders](https://docs.medusajs.com/api/store#orders_getorders)
             * API route.
             *
             * @param query - Configure the fields to retrieve in the orders.
             * @param headers - Headers to pass in the request.
             * @returns The paginated list of orders.
             *
             * @example
             * To retrieve the list of orders:
             *
             * ```ts
             * sdk.store.order.list()
             * .then(({ orders, count, offset, limit }) => {
             *   console.log(orders)
             * })
             * ```
             *
             * To configure the pagination, pass the `limit` and `offset` query parameters.
             *
             * For example, to retrieve only 10 items and skip 10 items:
             *
             * ```ts
             * sdk.store.order.list({
             *   limit: 10,
             *   offset: 10
             * })
             * .then(({ orders, count, offset, limit }) => {
             *   console.log(orders)
             * })
             * ```
             *
             * Using the `fields` query parameter, you can specify the fields and relations to retrieve
             * in each order:
             *
             * ```ts
             * sdk.store.order.list({
             *   fields: "id,*items"
             * })
             * .then(({ orders, count, offset, limit }) => {
             *   console.log(orders)
             * })
             * ```
             *
             * Learn more about the `fields` property in the [API reference](https://docs.medusajs.com/api/store#select-fields-and-relations).
             */ list: (query, headers)=>__awaiter(this, void 0, void 0, function*() {
                    return this.client.fetch(`/store/orders`, {
                        query,
                        headers
                    });
                }),
            /**
             * This method retrieves an order by its ID. It sends a request to the
             * [Get Order](https://docs.medusajs.com/api/store#orders_getordersid) API route.
             *
             * @param id - The order's ID.
             * @param query - Configure the fields to retrieve in the order.
             * @param headers - Headers to pass in the request.
             * @returns The order's details.
             *
             * @example
             * To retrieve an order by its ID:
             *
             * ```ts
             * sdk.store.order.retrieve("order_123")
             * .then(({ order }) => {
             *   console.log(order)
             * })
             * ```
             *
             * To specify the fields and relations to retrieve:
             *
             * ```ts
             * sdk.store.order.retrieve("order_123", {
             *   fields: "id,*items"
             * })
             * .then(({ order }) => {
             *   console.log(order)
             * })
             * ```
             *
             * Learn more about the `fields` property in the [API reference](https://docs.medusajs.com/api/store#select-fields-and-relations).
             */ retrieve: (id, query, headers)=>__awaiter(this, void 0, void 0, function*() {
                    return this.client.fetch(`/store/orders/${id}`, {
                        headers,
                        query
                    });
                }),
            /**
             * This method requests a order transfer from a guest account to the current, logged in customer account.
             *
             * Customer requesting the transfer must be logged in.
             *
             * @param body - The transfer's details.
             * @param query - Configure the fields to retrieve in the order.
             * @param headers - Headers to pass in the request.
             * @returns The order details.
             *
             * @example
             * sdk.store.order.requestTransfer(
             *   "order_123",
             *   {
             *     description: "I want to transfer this order to my friend."
             *   },
             *   {},
             *   {
             *     Authorization: `Bearer ${token}`
             *   }
             * )
             * .then(({ order }) => {
             *   console.log(order)
             * })
             */ requestTransfer: (id, body, query, headers)=>__awaiter(this, void 0, void 0, function*() {
                    return this.client.fetch(`/store/orders/${id}/transfer/request`, {
                        method: "POST",
                        headers,
                        body,
                        query
                    });
                }),
            /**
             * This method cancels an order transfer request.
             *
             * Customer requesting the transfer must be logged in.
             *
             * @param id - The order's ID.
             * @param query - Configure the fields to retrieve in the order.
             * @param headers - Headers to pass in the request.
             * @returns The order details.
             *
             * @example
             * sdk.store.order.cancelTransfer(
             *   "order_123",
             *   {},
             *   {
             *     Authorization: `Bearer ${token}`
             *   }
             * )
             * .then(({ order }) => {
             *   console.log(order)
             * })
             */ cancelTransfer: (id, query, headers)=>__awaiter(this, void 0, void 0, function*() {
                    return this.client.fetch(`/store/orders/${id}/transfer/cancel`, {
                        method: "POST",
                        headers,
                        query
                    });
                }),
            /**
             * The method called for the original owner to accept the order transfer to a new owner.
             *
             * @param id - The order's ID.
             * @param body - The payload containing the transfer token.
             * @param query - Configure the fields to retrieve in the order.
             * @param headers - Headers to pass in the request.
             * @returns The order details.
             *
             * @example
             * sdk.store.order.acceptTransfer(
             *   "order_123",
             *   {
             *     token: "transfer_token"
             *   },
             *   {
             *     Authorization: `Bearer ${token}`
             *   }
             * )
             * .then(({ order }) => {
             *   console.log(order)
             * })
             */ acceptTransfer: (id, body, query, headers)=>__awaiter(this, void 0, void 0, function*() {
                    return this.client.fetch(`/store/orders/${id}/transfer/accept`, {
                        method: "POST",
                        headers,
                        body,
                        query
                    });
                }),
            /**
             * The method called for the original owner to decline the order transfer to a new owner.
             *
             * @param id - The order's ID.
             * @param body - The payload containing the transfer token.
             * @param query - Configure the fields to retrieve in the order.
             * @param headers - Headers to pass in the request.
             * @returns The order details.
             *
             * @example
             * sdk.store.order.declineTransfer(
             *   "order_123",
             *   {
             *     token: "transfer_token"
             *   },
             *   {
             *     Authorization: `Bearer ${token}`
             *   }
             * )
             * .then(({ order }) => {
             *   console.log(order)
             * })
             */ declineTransfer: (id, body, query, headers)=>__awaiter(this, void 0, void 0, function*() {
                    return this.client.fetch(`/store/orders/${id}/transfer/decline`, {
                        method: "POST",
                        headers,
                        body,
                        query
                    });
                })
        };
        /**
         * @tags customer
         */ this.customer = {
            /**
             * This method registers a customer. It sends a request to the [Register Customer](https://docs.medusajs.com/api/store#customers_postcustomers)
             * API route.
             *
             * You must use the {@link Auth.register} method first to retrieve a registration token. Then, pass that
             * registration token in the `headers` parameter of this method as an authorization bearer header.
             *
             * Related guide: [How to register customer in storefront](https://docs.medusajs.com/resources/storefront-development/customers/register)
             *
             * @param body - The customer's details.
             * @param query - Configure the fields to retrieve in the customer.
             * @param headers - Headers to pass in the request. This is where you include the authorization JWT registration token.
             * @returns The customer's details.
             *
             * @example
             * const token = await sdk.auth.register("customer", "emailpass", {
             *   "email": "customer@gmail.com",
             *   "password": "supersecret"
             * })
             *
             * sdk.store.customer.create(
             *   {
             *     "email": "customer@gmail.com"
             *   },
             *   {},
             *   {
             *     Authorization: `Bearer ${token}`
             *   }
             * )
             * .then(({ customer }) => {
             *   console.log(customer)
             * })
             */ create: (body, query, headers)=>__awaiter(this, void 0, void 0, function*() {
                    return this.client.fetch(`/store/customers`, {
                        method: "POST",
                        headers,
                        body,
                        query
                    });
                }),
            /**
             * This method updates the logged-in customer's details. The customer must be logged in
             * first with the {@link Auth.login} method.
             *
             * It sends a request to the
             * [Update Customer](https://docs.medusajs.com/api/store#customers_postcustomersme) API route.
             *
             * Related guide: [How to edit customer's profile in the storefront](https://docs.medusajs.com/resources/storefront-development/customers/profile).
             *
             * @param body - The customer's details to update.
             * @param query - Configure the fields to retrieve in the customer.
             * @param headers - Headers to pass in the request.
             * @returns The customer's details.
             *
             * @example
             * sdk.store.customer.update({
             *   first_name: "John"
             * })
             * .then(({ customer }) => {
             *   console.log(customer)
             * })
             */ update: (body, query, headers)=>__awaiter(this, void 0, void 0, function*() {
                    return this.client.fetch(`/store/customers/me`, {
                        method: "POST",
                        headers,
                        body,
                        query
                    });
                }),
            /**
             * This method retrieves the logged-in customer's details. The customer must be logged in
             * first with the {@link Auth.login} method.
             *
             * It sends a request to the [Get Logged-In Customer](https://docs.medusajs.com/api/store#customers_getcustomersme)
             * API route.
             *
             * @param query - Configure the fields to retrieve in the customer.
             * @param headers - Headers to pass in the request.
             * @returns The customer's details.
             *
             * @example
             * sdk.store.customer.retrieve()
             * .then(({ customer }) => {
             *   console.log(customer)
             * })
             */ retrieve: (query, headers)=>__awaiter(this, void 0, void 0, function*() {
                    return this.client.fetch(`/store/customers/me`, {
                        query,
                        headers
                    });
                }),
            /**
             * This method creates an address for the logged-in customer. The customer must be logged in
             * first with the {@link Auth.login} method.
             *
             * It sends a request to the [Create Address](https://docs.medusajs.com/api/store#customers_postcustomersmeaddresses)
             * API route.
             *
             * Related guides: [How to manage customer's addresses in the storefront](https://docs.medusajs.com/resources/storefront-development/customers/addresses)
             *
             * @param body - The address's details.
             * @param query - Configure the fields to retrieve in the customer.
             * @param headers - Headers to pass in the request.
             * @returns The customer's details.
             *
             * @example
             * sdk.store.customer.createAddress({
             *   country_code: "us"
             * })
             * .then(({ customer }) => {
             *   console.log(customer)
             * })
             */ createAddress: (body, query, headers)=>__awaiter(this, void 0, void 0, function*() {
                    return this.client.fetch(`/store/customers/me/addresses`, {
                        method: "POST",
                        headers,
                        body,
                        query
                    });
                }),
            /**
             * This method updates the address of the logged-in customer. The customer must be logged in
             * first with the {@link Auth.login} method.
             *
             * It sends a request to the [Update Address](https://docs.medusajs.com/api/store#customers_postcustomersmeaddressesaddress_id)
             * API route.
             *
             * Related guides: [How to manage customer's addresses in the storefront](https://docs.medusajs.com/resources/storefront-development/customers/addresses)
             *
             * @param addressId - The ID of the address to update.
             * @param body - The details to update in the address.
             * @param query - Configure the fields to retrieve in the customer.
             * @param headers - Headers to pass in the request.
             * @returns The customer's details.
             *
             * @example
             * sdk.store.customer.updateAddress(
             *   "caddr_123",
             *   {
             *     country_code: "us"
             *   }
             * )
             * .then(({ customer }) => {
             *   console.log(customer)
             * })
             */ updateAddress: (addressId, body, query, headers)=>__awaiter(this, void 0, void 0, function*() {
                    return this.client.fetch(`/store/customers/me/addresses/${addressId}`, {
                        method: "POST",
                        headers,
                        body,
                        query
                    });
                }),
            /**
             * This method retrieves the logged-in customer's address. The customer must be logged in
             * first with the {@link Auth.login} method.
             *
             * It sends a request to the [List Customer's Address](https://docs.medusajs.com/api/store#customers_getcustomersmeaddresses)
             * API route.
             *
             * Related guides: [How to manage customer's addresses in the storefront](https://docs.medusajs.com/resources/storefront-development/customers/addresses)
             *
             * @param query - Configure the fields to retrieve in the addresses.
             * @param headers - Headers to pass in the request.
             * @returns The paginated list of addresses.
             *
             * @example
             * To retrieve the list of addresses:
             *
             * ```ts
             * sdk.store.customer.listAddress()
             * .then(({ addresses, count, offset, limit }) => {
             *   console.log(addresses)
             * })
             * ```
             *
             * To configure the pagination, pass the `limit` and `offset` query parameters.
             *
             * For example, to retrieve only 10 items and skip 10 items:
             *
             * ```ts
             * sdk.store.customer.listAddress({
             *   limit: 10,
             *   offset: 10
             * })
             * .then(({ addresses, count, offset, limit }) => {
             *   console.log(addresses)
             * })
             * ```
             *
             * Using the `fields` query parameter, you can specify the fields and relations to retrieve
             * in each address:
             *
             * ```ts
             * sdk.store.customer.listAddress({
             *   fields: "id,country_code"
             * })
             * .then(({ addresses, count, offset, limit }) => {
             *   console.log(addresses)
             * })
             * ```
             *
             * Learn more about the `fields` property in the [API reference](https://docs.medusajs.com/api/store#select-fields-and-relations).
             */ listAddress: (query, headers)=>__awaiter(this, void 0, void 0, function*() {
                    return this.client.fetch(`/store/customers/me/addresses`, {
                        query,
                        headers
                    });
                }),
            /**
             * This method retrieves an address of the logged-in customer. The customer must be logged in
             * first with the {@link Auth.login} method.
             *
             * It sends a request to the [Get Address](https://docs.medusajs.com/api/store#customers_getcustomersmeaddressesaddress_id)
             * API route.
             *
             * Related guides: [How to manage customer's addresses in the storefront](https://docs.medusajs.com/resources/storefront-development/customers/addresses)
             *
             * @param addressId - The address's ID.
             * @param query - Configure the fields to retrieve in the address.
             * @param headers - Headers to pass in the request.
             * @returns The address's details.
             *
             * @example
             * To retrieve an address by its ID:
             *
             * ```ts
             * sdk.store.customer.retrieveAddress(
             *   "caddr_123"
             * )
             * .then(({ address }) => {
             *   console.log(address)
             * })
             * ```
             *
             * To specify the fields and relations to retrieve:
             *
             * ```ts
             * sdk.store.customer.retrieveAddress(
             *   "caddr_123",
             *   {
             *     fields: "id,country_code"
             *   }
             * )
             * .then(({ address }) => {
             *   console.log(address)
             * })
             * ```
             *
             * Learn more about the `fields` property in the [API reference](https://docs.medusajs.com/api/store#select-fields-and-relations).
             */ retrieveAddress: (addressId, query, headers)=>__awaiter(this, void 0, void 0, function*() {
                    return this.client.fetch(`/store/customers/me/addresses/${addressId}`, {
                        query,
                        headers
                    });
                }),
            /**
             * This method deletes an address of the logged-in customer. The customer must be logged in
             * first with the {@link Auth.login} method.
             *
             * It sends a request to the [Remove Address](https://docs.medusajs.com/api/store#customers_deletecustomersmeaddressesaddress_id)
             * API route.
             *
             * Related guides: [How to manage customer's addresses in the storefront](https://docs.medusajs.com/resources/storefront-development/customers/addresses)
             *
             * @param addressId - The address's ID.
             * @param headers - Headers to pass in the request.
             * @returns The deletion's details.
             *
             * @example
             * sdk.store.customer.deleteAddress("caddr_123")
             * .then(({ deleted, parent: customer }) => {
             *   console.log(customer)
             * })
             */ deleteAddress: (addressId, headers)=>__awaiter(this, void 0, void 0, function*() {
                    return this.client.fetch(`/store/customers/me/addresses/${addressId}`, {
                        method: "DELETE",
                        headers
                    });
                })
        };
        this.client = client;
    }
} //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@medusajs/js-sdk/dist/esm/index.js [app-ssr] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$medusajs$2f$js$2d$sdk$2f$dist$2f$esm$2f$client$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@medusajs/js-sdk/dist/esm/client.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$medusajs$2f$js$2d$sdk$2f$dist$2f$esm$2f$admin$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@medusajs/js-sdk/dist/esm/admin/index.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$medusajs$2f$js$2d$sdk$2f$dist$2f$esm$2f$store$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@medusajs/js-sdk/dist/esm/store/index.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$medusajs$2f$js$2d$sdk$2f$dist$2f$esm$2f$auth$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@medusajs/js-sdk/dist/esm/auth/index.js [app-ssr] (ecmascript)");
;
;
;
;
class Medusa {
    constructor(config){
        this.client = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$medusajs$2f$js$2d$sdk$2f$dist$2f$esm$2f$client$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Client"](config);
        this.admin = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$medusajs$2f$js$2d$sdk$2f$dist$2f$esm$2f$admin$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Admin"](this.client);
        this.store = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$medusajs$2f$js$2d$sdk$2f$dist$2f$esm$2f$store$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Store"](this.client);
        this.auth = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$medusajs$2f$js$2d$sdk$2f$dist$2f$esm$2f$auth$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Auth"](this.client, config);
    }
}
const __TURBOPACK__default__export__ = Medusa;
;
;
;
;
 //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@medusajs/js-sdk/dist/esm/index.js [app-ssr] (ecmascript) <module evaluation>": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, t: __turbopack_require_real__ } = __turbopack_context__;
{
__turbopack_esm__({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$medusajs$2f$js$2d$sdk$2f$dist$2f$esm$2f$admin$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@medusajs/js-sdk/dist/esm/admin/index.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$medusajs$2f$js$2d$sdk$2f$dist$2f$esm$2f$auth$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@medusajs/js-sdk/dist/esm/auth/index.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$medusajs$2f$js$2d$sdk$2f$dist$2f$esm$2f$client$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@medusajs/js-sdk/dist/esm/client.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$medusajs$2f$js$2d$sdk$2f$dist$2f$esm$2f$store$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@medusajs/js-sdk/dist/esm/store/index.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$medusajs$2f$js$2d$sdk$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/@medusajs/js-sdk/dist/esm/index.js [app-ssr] (ecmascript) <locals>");
}}),

};

//# sourceMappingURL=node_modules_%40medusajs_js-sdk_dist_esm_7ece7c._.js.map